[
  {
    "name": "crowdin-editor-right-panel",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Editor Right Panel module.\n\nUse when:\n- Building translation assistance tools and helpers\n- Creating context-aware editor extensions\n- Developing quality assurance and validation tools\n- Building translation suggestion and auto-completion tools\n- Creating custom translation workflows\n- Adding glossary, terminology, or reference tools\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building project management tools (use Project Tools instead)\n\nBuilt with:\n- Crowdin Apps JS API (AP.editor for translation interactions)\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js (minimal backend - mostly frontend-focused)\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Editor Right Panel module for translation editor extensions.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Editor Right Panel (appears in translation editor sidebar)\n- Features: Compact design for sidebar, Editor API integration, event listeners\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object for context/events) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Compact CSS** - Optimized for narrow sidebar panel (300-400px)\n\n## Development Restrictions\n- **Panel Width**: Design for 300-400px width (sidebar constraint)\n- **Frontend-Focused**: Most functionality should be in frontend using AP.editor\n- **Module Configuration**: Don't modify the editorRightPanel configuration structure\n- **Editor Modes**: Panel appears only in specified editor modes (comfortable, side-by-side, multilingual, review, assets)\n- **Event Handling**: Listen to editor events for real-time updates\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Editor Right Panel configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/editor-panels/index.html` - Main HTML interface with demo UI\n- `public/editor-panels/app.js` - JavaScript with Crowdin Editor API integration\n- `public/editor-panels/styles.css` - Compact CSS optimized for sidebar\n\n## Backend Development\n\n### App Configuration\n\nConfigure your app identity in `worker/app.ts`:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",                    // Display name shown in Crowdin UI\n    identifier: \"your-unique-app-identifier\", // Unique ID (lowercase, hyphens)\n    description: \"Your app description\",      // Brief description of functionality\n    // ... rest of configuration\n}\n```\n\n**Guidelines:**\n- **identifier**: Must be unique across all Crowdin apps. Format: `company-editor-tool`\n- **name**: User-friendly display name (e.g., \"Translation Helper\")\n- **description**: Brief explanation of what your app does\n\n#### Required Scopes\n\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n### Module Configuration\n\nConfigure the Editor Right Panel module in `worker/app.ts`:\n\n```typescript\neditorRightPanel: {\n  fileName: 'index.html',\n  uiPath: '/editor-panels', // Points to public/editor-panels directory\n  modes: [EditorMode.COMFORTABLE, EditorMode.SIDE_BY_SIDE], // Specify editor modes where panel appears\n  supportsMultipleStrings: true // Handle multiple string selection\n}\n```\n\n#### Editor Modes\n\n```typescript\nimport { EditorMode } from '@crowdin/app-project-module/out/types';\n\n// Available editor modes:\nEditorMode.COMFORTABLE   // Comfortable mode (most common)\nEditorMode.SIDE_BY_SIDE  // Side-by-side mode (most common)\nEditorMode.MULTILINGUAL  // Multilingual mode\nEditorMode.REVIEW        // Review mode\nEditorMode.ASSETS        // Assets mode\n```\n\n**Recommended:** Use `[EditorMode.COMFORTABLE, EditorMode.SIDE_BY_SIDE]` for most use cases.\n\n### Crowdin API Client\n\n#### Official Documentation\n\nThe `connection.client` object is an instance of `@crowdin/crowdin-api-client`.\n\n**📚 Complete API Reference:** https://crowdin.github.io/crowdin-api-client-js/modules.html\n\n**⚠️ CRITICAL**: Only use methods documented in the official API reference. Do NOT invent or assume methods exist.\n\n#### Common Examples\n\n**Standard Endpoint Template:**\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n\n        if (!crowdinApp.establishCrowdinConnection) {\n            return res.status(500).json({ success: false, error: 'Crowdin connection method not available' });\n        }\n\n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n\n        if (!connection.client) {\n            return res.status(500).json({ success: false, error: 'Crowdin API client not available' });\n        }\n\n        const userId = connection.context.jwtPayload.context.user_id;\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n\n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n**Get Project Details:**\n```typescript\nconst response = await connection.client.projectsGroupsApi.getProject(projectId);\n\n// Access project properties\nconst project = response.data;\nconst projectName = project.name;                    // string\nconst sourceLanguageId = project.sourceLanguageId;   // string\nconst targetLanguageIds = project.targetLanguageIds; // string[]\nconst description = project.description;             // string | null\n```\n\n**List All Projects (with pagination):**\n```typescript\nconst response = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n\n// Iterate through all projects\nresponse.data.forEach((projectItem: ResponseObject<ProjectsGroupsModel.Project>) => {\n  const projectId = projectItem.data.id;\n  const projectName = projectItem.data.name;\n  const groupId = projectItem.data.groupId; // number | null\n});\n```\n\n**Get Supported Languages:**\n```typescript\nconst response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n\n// Filter languages\nconst targetLanguageIds = ['uk', 'pl', 'de'];\nconst projectLanguages = response.data.filter(\n  (lang: ResponseObject<LanguagesModel.Language>) => targetLanguageIds.includes(lang.data.id)\n);\n\n// Map to simpler structure\nconst languages = projectLanguages.map((lang: ResponseObject<LanguagesModel.Language>) => ({\n  id: lang.data.id,           // string: \"uk\"\n  name: lang.data.name,       // string: \"Ukrainian\"\n  locale: lang.data.locale,   // string: \"uk-UA\"\n  osxLocale: lang.data.osxLocale // string\n}));\n```\n\n**List Source Files:**\n```typescript\nconst response = await connection.client.sourceFilesApi.withFetchAll().listProjectFiles(projectId);\n\nresponse.data.forEach((fileItem: ResponseObject<SourceFilesModel.File>) => {\n  const file = fileItem.data;\n  const fileId = file.id;             // number\n  const fileName = file.name;         // string\n  const branchId = file.branchId;     // number | null\n  const directoryId = file.directoryId; // number | null\n});\n```\n\n#### Best Practices\n\n1. **Always access data via `.data` property**\n   ```typescript\n   // ✅ CORRECT\n   const project = response.data;\n   const projectName = response.data.name;\n   \n   // ❌ WRONG - will be undefined\n   const projectName = response.name;\n   ```\n\n2. **Use withFetchAll() for complete data**\n   ```typescript\n   // ✅ CORRECT - gets all items\n   const response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n   \n   // ⚠️ PARTIAL - only first page (25 items)\n   const response = await connection.client.languagesApi.listSupportedLanguages();\n   ```\n\n3. **Handle nullable properties**\n   ```typescript\n   const description = response.data.description || 'No description';\n   const groupId = response.data.groupId ?? null;\n   ```\n\n4. **Handle errors properly**\n   ```typescript\n   try {\n     const response = await connection.client.projectsGroupsApi.getProject(projectId);\n     const project = response.data;\n     // Use project data\n   } catch (error: any) {\n     console.error('Crowdin API Error:', error);\n\n     // API errors have specific structure\n     if (error.code === 404) {\n       return res.status(404).json({ error: 'Project not found' });\n     }\n     \n     return res.status(500).json({\n       error: 'API request failed',\n       details: error.message\n     });\n   }\n   ```\n\n5. **Use TypeScript types**\n   ```typescript\n   import { ResponseObject, ProjectsGroupsModel } from '@crowdin/crowdin-api-client';\n   \n   // Use in your code\n   const response: ResponseObject<ProjectsGroupsModel.Project> = await connection.client.projectsGroupsApi.getProject(projectId);\n   const project: ProjectsGroupsModel.Project = response.data;\n   ```\n\n#### Complete Type Definitions\n\n**⚠️ CRITICAL**: Only use methods and types from `@crowdin/crowdin-api-client` definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n<!-- CROWDIN_API_CLIENT_TYPES_START -->\n\n##### ai/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, PlainObject, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Ai extends CrowdinApi {\n    listAiOrganizationCustomPlaceholders(options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiOrganizationCustomPlaceholder(request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<void>;\n    editAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiOrganizationPromptFineTuningDataset(aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiOrganizationPromptFineTuningDatasetStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiOrganizationPromptFineTuningEvents(aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiOrganizationPromptFineTuningJobs(options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiOrganizationPromptFineTuningJob(aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiOrganizationPromptFineTuningJobStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiOrganizationPromptFineTuningDataset(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiOrganizationPrompt(aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationPrompts(options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiOrganizationPrompt(request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiOrganizationPromptCompletion(aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiOrganizationPromptCompletionStatus(aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationPrompt(aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiOrganizationPrompt(aiPromptId: number): Promise<void>;\n    editAiOrganizationPrompt(aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationProviders(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiOrganizationProvider(request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiOrganizationProvider(aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiOrganizationProvider(aiProviderId: number): Promise<void>;\n    editAiOrganizationProvider(aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiOrganizationProviderModels(aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiOrganizationAllProviderModels(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiOrganizationProxyChatCompletion(aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiOrganizationReport(request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiOrganizationReportStatus(aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiOrganizationReport(aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationSettings(): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiOrganizationSettings(request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n    listAiUserCustomPlaceholders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiUserCustomPlaceholder(userId: number, request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<void>;\n    editAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiUserPromptFineTuningDatasetStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiUserPromptFineTuningEvents(userId: number, aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiUserPromptFineTuningJobs(userId: number, options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiUserPromptFineTuningJob(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiUserPromptFineTuningJobStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiUserPrompt(userId: number, aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserPrompts(userId: number, options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiUserPrompt(userId: number, request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiUserPromptCompletion(userId: number, aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiUserPromptCompletionStatus(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUserPrompt(userId: number, aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiUserPrompt(userId: number, aiPromptId: number): Promise<void>;\n    editAiUserPrompt(userId: number, aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserProviders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiUserProvider(userId: number, request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiUserProvider(userId: number, aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiUserProvider(userId: number, aiProviderId: number): Promise<void>;\n    editAiUserProvider(userId: number, aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiUserProviderModels(userId: number, aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiUserAllProviderModels(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiUserProxyChatCompletion(userId: number, aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiUserReport(userId: number, request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiUserReportStatus(userId: number, aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiUserReport(userId: number, aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUsertSettings(userId: number): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiUserSettings(userId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n}\nexport declare namespace AiModel {\n    interface CustomPlaceholder {\n        id: number;\n        description: string;\n        placeholder: string;\n        value: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddCustomPlaceholderRequest {\n        description: string;\n        placeholder: string;\n        value: string;\n    }\n    interface FineTuningDataset {\n        projectIds: number[];\n        tmIds: number[];\n        purpose: 'training' | 'validation';\n        dateFrom: string;\n        dateTo: string;\n        maxFileSize: number;\n        minExamplesCount: number;\n        maxExamplesCount: number;\n    }\n    interface GenerateFineTuningDataset {\n        projectIds?: number[];\n        tmIds?: number[];\n        purpose?: 'training' | 'validation';\n        dateFrom?: string;\n        dateTo?: string;\n        maxFileSize?: number;\n        minExamplesCount?: number;\n        maxExamplesCount?: number;\n    }\n    interface GenerateFineTuningJob {\n        dryRun?: boolean;\n        hyperparameters?: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions?: Omit<GenerateFineTuningDataset, 'purpose'>;\n    }\n    interface FineTuningJob {\n        dryRun: boolean;\n        aiPromptId: number;\n        hyperparameters: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        baseModel: string;\n        fineTunedModel: string;\n        trainedTokensCount: number;\n        trainingDatasetUrl: string;\n        validationDatasetUrl: string;\n        metadata: PlainObject;\n    }\n    interface PromptFineTuningEvent {\n        id: string;\n        type: string;\n        message: string;\n        data: {\n            step: number;\n            totalSteps: number;\n            trainingLoss: number;\n            validationLoss: number;\n            fullValidationLoss: number;\n        };\n        createdAt: string;\n    }\n    interface ListPromptFineTuningJobsOptions extends PaginationOptions {\n        statuses: string;\n        orderBy: string;\n    }\n    interface ListAiPromptsOptions extends PaginationOptions {\n        projectId?: number;\n        action?: Action;\n    }\n    interface AiPromptResponse {\n        id: number;\n        name: string;\n        action: Action;\n        aiProviderId: number;\n        aiModelId: string;\n        isEnabled: boolean;\n        enabledProjectIds: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiModel.AiPromptConfigExternal;\n        promptPreview: string;\n        isFineTuningAvailable: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AiPromptConfigBasicOtherLanguageTranslations {\n        isEnabled?: boolean;\n        languageIds?: string[];\n    }\n    interface AiPromptConfigBasicPreTranslate {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        customPlaceholders?: string[];\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContent?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAssistAction {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n        filteredStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAligmentAction {\n        mode: 'basic';\n        customPlaceholders?: string[];\n        publicProjectDescription?: boolean;\n    }\n    interface AiPromptConfigAdvanced {\n        mode: 'advanced';\n        screenshots?: boolean;\n        prompt: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n    }\n    interface AiPromptConfigExternal {\n        mode: 'external';\n        identifier: string;\n        key: string;\n        options?: any;\n    }\n    interface AddAiPromptRequest {\n        name: string;\n        action: Action;\n        aiProviderId?: number;\n        aiModelId?: string;\n        isEnabled?: boolean;\n        enabledProjectIds?: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiPromptConfigExternal;\n    }\n    interface GenerateAiPromptCompletionRequest {\n        resources: AiModel.AiPromptResourceWithPreTranslate | AiModel.AiPromptResourceWithAssist | AiModel.AiPromptResourceWithAlignment | AiModel.AiPromptResourceWithCustom;\n        tools?: {\n            tool: {\n                type: 'function';\n                function: {\n                    description?: string;\n                    name: string;\n                    parameters?: PlainObject;\n                };\n            };\n        }[];\n        tool_choice?: string | PlainObject;\n    }\n    interface AiPromptCompletionAttribute {\n        aiPromptId: number;\n    }\n    interface AiPromptResourceWithPreTranslate {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAlignment {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAssist {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        filteredStringsIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithCustom {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n        customInstruction?: string;\n    }\n    interface OverridePromptValues {\n        [key: string]: any;\n    }\n    interface AiProviderResponse {\n        id: number;\n        name: string;\n        type: ProviderType;\n        credentials: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsCustom;\n        config: AiModel.AiProviderConfig;\n        isEnabled: boolean;\n        useSystemCredentials: boolean;\n        createdAt: string;\n        updatedAt: string;\n        promptsCount: string;\n    }\n    interface AiProviderCredentialsBasic {\n        apiKey: string;\n    }\n    interface AiProviderCredentialsAzureOpenAi extends AiProviderCredentialsBasic {\n        resourceName: string;\n        deploymentName: string;\n        apiVersion: string;\n    }\n    interface AiProviderCredentialsGoogleGemini {\n        project: string;\n        region: string;\n        serviceAccountKey: string;\n    }\n    interface AiProviderCredentialsWatsonx {\n        apiKey: string;\n        projectId: string;\n        region: string;\n    }\n    interface AiProviderCredentialsCustom {\n        identifier: string;\n        key: string;\n    }\n    interface AiProviderConfig {\n        actionRules?: AiModel.AiProviderConfigActionRule[];\n    }\n    interface AiProviderConfigActionRule {\n        action?: 'pre_translate' | 'assist';\n        availableAiModelIds?: string[];\n    }\n    interface AddAiProviderRequest {\n        name: string;\n        type: ProviderType;\n        credentials?: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsWatsonx | AiProviderCredentialsCustom;\n        config?: AiModel.AiProviderConfig;\n        isEnabled?: boolean;\n        useSystemCredentials?: boolean;\n    }\n    interface AiProviderModelResponse {\n        id: string;\n    }\n    interface AiProviderProxyResponseData {\n        data: object;\n    }\n    interface OtherChatCompletionRequest {\n        stream?: boolean;\n        [key: string]: any;\n    }\n    interface GoogleGeminiChatCompletionRequest extends OtherChatCompletionRequest {\n        model: string;\n    }\n    type AiReport = AiReportTokenUsage;\n    interface AiReportTokenUsage {\n        type: 'tokens-usage-raw-data';\n        schema: AiReportGeneralSchema;\n    }\n    interface AiReportGeneralSchema {\n        dateFrom: string;\n        dateTo: string;\n        format?: 'json' | 'csv';\n        projectIds?: number[];\n        promptIds?: number[];\n        userIds?: number[];\n    }\n    interface AiSettings {\n        assistActionAiPromptId: number;\n        showSuggestion: boolean;\n        shortcuts: {\n            name: string;\n            prompt: string;\n            enabled: boolean;\n        }[];\n    }\n    type Action = 'pre_translate' | 'assist';\n    type ProviderType = 'open_ai' | 'azure_open_ai' | 'google_gemini' | 'mistral_ai' | 'anthropic' | 'custom_ai' | 'x_ai' | 'deepseek' | 'watsonx';\n}\n```\n\n##### applications/index.d.ts\n\n```typescript\nimport { CrowdinApi, ResponseObject, PatchRequest, Pagination, ResponseList } from '../core';\nexport declare class Applications extends CrowdinApi {\n    listApplicationInstallations(options?: Pagination): Promise<ResponseList<ApplicationsModel.Application>>;\n    installApplication(request: ApplicationsModel.InstallApplication): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationInstallation(applicationId: string): Promise<ResponseObject<ApplicationsModel.Application>>;\n    deleteApplicationInstallation(applicationId: string, force?: boolean): Promise<ResponseObject<ApplicationsModel.Application>>;\n    editApplicationInstallation(applicationId: string, request: PatchRequest[]): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationData(applicationId: string, path: string): Promise<ResponseObject<any>>;\n    updateOrRestoreApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    addApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    deleteApplicationData(applicationId: string, path: string): Promise<void>;\n    editApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n}\nexport declare namespace ApplicationsModel {\n    interface Application {\n        identifier: string;\n        name: string;\n        description: string;\n        logo: string;\n        baseUrl: string;\n        manifestUrl: string;\n        createdAt: string;\n        modules: ApplicationModule[];\n        scopes: string[];\n        permissions: ApplicationPermissions;\n        defaultPermissions: any;\n        limitReached: boolean;\n    }\n    interface InstallApplication {\n        url: string;\n        permissions?: ApplicationPermissions;\n        modules?: ApplicationModule[];\n    }\n    interface ApplicationPermissions {\n        user: {\n            value: 'all' | 'owner' | 'managers' | 'guests' | 'restricted';\n            ids: number[];\n        };\n        project: {\n            value: 'own' | 'restricted';\n            ids: number[];\n        };\n    }\n    interface ApplicationModule {\n        key: string;\n        type?: string;\n        data?: any;\n        authenticationType?: string;\n        permissions: Omit<ApplicationPermissions, 'project'>;\n    }\n}\n```\n\n##### bundles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class Bundles extends CrowdinApi {\n    listBundles(projectId: number, options?: PaginationOptions): Promise<ResponseList<BundlesModel.Bundle>>;\n    addBundle(projectId: number, request: BundlesModel.CreateBundleRequest): Promise<ResponseObject<BundlesModel.Bundle>>;\n    getBundle(projectId: number, bundleId: number): Promise<ResponseObject<BundlesModel.Bundle>>;\n    deleteBundle(projectId: number, bundleId: number): Promise<void>;\n    editBundle(projectId: number, bundleId: number, request: PatchRequest[]): Promise<ResponseObject<BundlesModel.Bundle>>;\n    downloadBundle(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    exportBundle(projectId: number, bundleId: number): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    checkBundleExportStatus(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    listBundleFiles(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listBundleBranches(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n}\nexport declare namespace BundlesModel {\n    interface Bundle {\n        id: number;\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns: string[];\n        exportPattern: string;\n        isMultilingual: boolean;\n        includeProjectSourceLanguage: boolean;\n        labelIds: number[];\n        excludeLabelIds: number[];\n        createdAt: string;\n        webUrl: string;\n        updatedAt: string;\n    }\n    interface CreateBundleRequest {\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns?: string[];\n        exportPattern: string;\n        isMultilingual?: boolean;\n        includeProjectSourceLanguage?: boolean;\n        includeInContextPseudoLanguage?: boolean;\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface ExportAttributes {\n        bundleId: number;\n    }\n}\n```\n\n##### clients/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Clients extends CrowdinApi {\n    listClients(options?: PaginationOptions): Promise<ResponseList<ClientsModel.Client>>;\n}\nexport declare namespace ClientsModel {\n    interface Client {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### core/http-client-error.d.ts\n\n```typescript\nimport { AxiosError } from 'axios';\nimport { FetchClientJsonPayloadError } from './internal/fetch/fetchClientError';\nexport type HttpClientError = AxiosError | FetchClientJsonPayloadError | Error;\nexport declare const toHttpClientError: (error?: unknown) => HttpClientError;\n```\n\n##### core/index.d.ts\n\n```typescript\nimport { HttpClientError } from './http-client-error';\nimport { RetryConfig, RetryService } from './internal/retry';\nexport interface HttpClient {\n    get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport type HttpClientType = 'axios' | 'fetch';\nexport interface Credentials {\n    token: string;\n    organization?: string;\n    baseUrl?: string;\n}\nexport interface ClientConfig {\n    httpClientType?: HttpClientType;\n    httpClient?: HttpClient;\n    userAgent?: string;\n    integrationUserAgent?: string;\n    retryConfig?: RetryConfig;\n    httpRequestTimeout?: number;\n}\nexport interface ResponseList<T> {\n    data: ResponseObject<T>[];\n    pagination: Pagination;\n}\nexport interface ResponseObject<T> {\n    data: T;\n}\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\nexport type PaginationOptions = Partial<Pagination>;\nexport interface PatchRequest {\n    value?: any;\n    op: PatchOperation;\n    path: string;\n}\nexport type PatchOperation = 'add' | 'remove' | 'replace' | 'move' | 'copy' | 'test';\nexport type ProjectRoles = 'manager' | 'developer' | 'translator' | 'proofreader' | 'language_coordinator' | 'member';\nexport interface DownloadLink {\n    url: string;\n    expireIn: string;\n}\nexport declare enum BooleanInt {\n    TRUE = 1,\n    FALSE = 0\n}\nexport interface Status<T> {\n    identifier: string;\n    status: string;\n    progress: number;\n    attributes: T;\n    createdAt: string;\n    updatedAt: string;\n    startedAt: string;\n    finishedAt: string;\n    eta: string;\n}\nexport interface Attribute {\n    [key: string]: string;\n}\nexport type PlainObject = Record<string, any>;\nexport declare class CrowdinError extends Error {\n    apiError: any;\n    code: number;\n    constructor(message: string, code: number, apiError: any);\n}\nexport declare class CrowdinValidationError extends CrowdinError {\n    validationCodes: {\n        key: string;\n        codes: string[];\n    }[];\n    constructor(message: string, validationCodes: {\n        key: string;\n        codes: string[];\n    }[], apiError: any);\n}\nexport declare function handleHttpClientError(error: HttpClientError): never;\nexport declare abstract class CrowdinApi {\n    private static readonly CROWDIN_URL_SUFFIX;\n    private static readonly AXIOS_INSTANCE;\n    private static readonly FETCH_INSTANCE;\n    readonly token: string;\n    readonly organization?: string;\n    readonly url: string;\n    readonly config: ClientConfig | undefined;\n    readonly retryService: RetryService;\n    protected fetchAllFlag: boolean;\n    protected maxLimit: number | undefined;\n    constructor(credentials: Credentials, config?: ClientConfig);\n    graphql<T>(req: {\n        query: string;\n        operationName?: string;\n        variables?: any;\n    }, config?: {\n        url?: string;\n    }): Promise<ResponseObject<T>>;\n    protected addQueryParam(url: string, name: string, value?: string | number): string;\n    protected defaultConfig(): {\n        headers: Record<string, string>;\n    };\n    get httpClient(): HttpClient;\n    withFetchAll(maxLimit?: number): this;\n    protected getList<T = any>(url: string, limit?: number, offset?: number, config?: {\n        headers: Record<string, string>;\n    }): Promise<ResponseList<T>>;\n    protected fetchAll<T>(url: string, config: {\n        headers: Record<string, string>;\n    }, maxAmount?: number): Promise<ResponseList<T>>;\n    protected encodeUrlParam(param: string | number | boolean): string;\n    protected get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport declare function isOptionalString(parameter: string | unknown, parameterInArgs: boolean): parameter is string | undefined;\nexport declare function isOptionalNumber(parameter: number | unknown, parameterInArgs: boolean): parameter is number | undefined;\nexport interface ProjectRole {\n    name: string;\n    permissions: ProjectRolePermissions;\n}\nexport interface ProjectRolePermissions {\n    allLanguages: boolean;\n    languagesAccess: {\n        [lang: string]: {\n            allContent: boolean;\n            workflowStepIds: number[];\n        };\n    };\n}\n```\n\n##### dictionaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Dictionaries extends CrowdinApi {\n    listDictionaries(projectId: number, options?: DictionariesModel.ListDictionariesOptions): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    listDictionaries(projectId: number, languageIds?: string): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    editDictionary(projectId: number, languageId: string, request: PatchRequest[]): Promise<ResponseObject<DictionariesModel.Dictionary>>;\n}\nexport declare namespace DictionariesModel {\n    interface Dictionary {\n        languageId: string;\n        words: string[];\n    }\n    interface ListDictionariesOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### distributions/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Distributions extends CrowdinApi {\n    listDistributions(projectId: number, options?: PaginationOptions): Promise<ResponseList<DistributionsModel.Distribution>>;\n    listDistributions(projectId: number, limit?: number, offset?: number): Promise<ResponseList<DistributionsModel.Distribution>>;\n    createDistribution(projectId: number, request: DistributionsModel.CreateDistributionRequest | DistributionsModel.CreateDistributionStringsBasedRequest): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistribution(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    deleteDistribution(projectId: number, hash: string): Promise<void>;\n    editDistribution(projectId: number, hash: string, request: PatchRequest[]): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n    createDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n}\nexport declare namespace DistributionsModel {\n    interface Distribution {\n        hash: string;\n        manifestUrl: string;\n        name: string;\n        bundleIds: number[];\n        createdAt: string;\n        updatedAt: string;\n        exportMode: ExportMode;\n        fileIds: number[];\n    }\n    interface CreateDistributionRequest {\n        exportMode?: ExportMode;\n        name: string;\n        fileIds?: number[];\n        bundleIds?: number[];\n    }\n    interface CreateDistributionStringsBasedRequest {\n        name: string;\n        bundleIds: number[];\n    }\n    interface DistributionRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentFileId: number;\n        date: string;\n    }\n    interface DistributionStringsBasedRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentBranchId: number;\n        date: string;\n    }\n    type ExportMode = 'default' | 'bundle';\n}\n```\n\n##### fields/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Fields extends CrowdinApi {\n    listFields(options?: FieldsModel.ListFieldsParams): Promise<ResponseList<FieldsModel.Field>>;\n    addField(request: FieldsModel.AddFieldRequest): Promise<ResponseObject<FieldsModel.Field>>;\n    getField(fieldId: number): Promise<ResponseObject<FieldsModel.Field>>;\n    deleteField(fieldId: number): Promise<void>;\n    editField(fieldId: number, request: PatchRequest[]): Promise<ResponseObject<FieldsModel.Field>>;\n}\nexport declare namespace FieldsModel {\n    type Entity = 'project' | 'user' | 'task' | 'file' | 'translation' | 'string';\n    type Type = 'checkbox' | 'radiobuttons' | 'date' | 'datetime' | 'number' | 'labels' | 'select' | 'multiselect' | 'text' | 'textarea' | 'url';\n    type Place = 'projectCreateModal' | 'projectHeader' | 'projectDetails' | 'projectCrowdsourceDetails' | 'projectSettings' | 'projectTaskEditCreate' | 'projectTaskDetails' | 'projectTaskBoardCard' | 'fileDetails' | 'fileSettings' | 'userEditModal' | 'userDetails' | 'userPopover' | 'stringEditModal' | 'stringDetails' | 'translationUnderContent';\n    interface Location {\n        place: Place;\n    }\n    interface Option {\n        label: string;\n        value: string;\n    }\n    interface OtherFieldConfig {\n        locations: Location[];\n    }\n    interface ListFieldConfig extends OtherFieldConfig {\n        options: Option[];\n    }\n    interface NumberFieldConfig extends OtherFieldConfig {\n        min: number;\n        max: number;\n        units: string;\n    }\n    type Config = ListFieldConfig | NumberFieldConfig | OtherFieldConfig;\n    interface ListFieldsParams extends PaginationOptions {\n        search?: string;\n        entity?: Entity;\n        type?: Type;\n    }\n    interface Field {\n        id: number;\n        name: string;\n        slug: string;\n        type: Type;\n        description: string;\n        entities: Entity[];\n        config: Config;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddFieldRequest {\n        name: string;\n        slug: string;\n        type: Type;\n        description?: string;\n        entities: Entity[];\n        config?: Config;\n    }\n}\n```\n\n##### glossaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Glossaries extends CrowdinApi {\n    listGlossaries(options?: GlossariesModel.ListGlossariesOptions): Promise<ResponseList<GlossariesModel.Glossary>>;\n    listGlossaries(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<GlossariesModel.Glossary>>;\n    addGlossary(request: GlossariesModel.CreateGlossaryRequest): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    getGlossary(glossaryId: number): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    deleteGlossary(glossaryId: number): Promise<void>;\n    editGlossary(glossaryId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    exportGlossary(glossaryId: number, request: GlossariesModel.ExportGlossaryRequest): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    checkGlossaryExportStatus(glossaryId: number, exportId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    downloadGlossary(glossaryId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    importGlossaryFile(glossaryId: number, request: GlossariesModel.GlossaryFile): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    checkGlossaryImportStatus(glossaryId: number, importId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    listTerms(glossaryId: number, options?: GlossariesModel.ListTermsOptions): Promise<ResponseList<GlossariesModel.Term>>;\n    listTerms(glossaryId: number, userId?: number, limit?: number, offset?: number, languageId?: string, translationOfTermId?: number, conceptId?: number): Promise<ResponseList<GlossariesModel.Term>>;\n    addTerm(glossaryId: number, request: GlossariesModel.CreateTermRequest): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, options?: GlossariesModel.ClearGlossaryOptions): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, languageId?: number, translationOfTermId?: number, conceptId?: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    getTerm(glossaryId: number, termId: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    deleteTerm(glossaryId: number, termId: number): Promise<void>;\n    editTerm(glossaryId: number, termId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Term>>;\n    listConcepts(glossaryId: number, options?: {\n        orderBy?: string;\n    } & PaginationOptions): Promise<ResponseList<GlossariesModel.Concept>>;\n    getConcept(glossaryId: number, conceptId: number): Promise<ResponseObject<GlossariesModel.Concept>>;\n    updateConcept(glossaryId: number, conceptId: number, request: GlossariesModel.UpdateConceptRequest): Promise<ResponseObject<GlossariesModel.Concept>>;\n    deleteConcept(glossaryId: number, conceptId: number): Promise<void>;\n    concordanceSearch(projectId: number, request: GlossariesModel.ConcordanceSearchRequest): Promise<ResponseList<GlossariesModel.ConcordanceSearchResponse>>;\n}\nexport declare namespace GlossariesModel {\n    interface Glossary {\n        id: number;\n        name: string;\n        groupId: number;\n        userId: number;\n        terms: number;\n        languageId: string;\n        languageIds: string[];\n        defaultProjectIds: number[];\n        projectIds: number[];\n        webUrl: string;\n        createdAt: string;\n    }\n    interface CreateGlossaryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    type ExportField = 'term' | 'description' | 'partOfSpeech' | 'type' | 'status' | 'gender' | 'note' | 'url' | 'conceptDefinition' | 'conceptSubject' | 'conceptNote' | 'conceptUrl' | 'conceptFigure';\n    interface ExportGlossaryRequest {\n        format?: GlossaryFormat;\n        exportFields?: ExportField[];\n    }\n    interface GlossaryExportStatusAttribute {\n        format: string;\n        exportFields: ExportField[];\n    }\n    interface GlossaryImportStatusAttribute {\n        storageId: number;\n        scheme: unknown;\n        firstLineContainsHeader: boolean;\n    }\n    interface GlossaryFile {\n        storageId: number;\n        scheme?: GlossaryFileScheme;\n        firstLineContainsHeader?: boolean;\n    }\n    interface ListTermsOptions extends PaginationOptions {\n        userId?: number;\n        languageId?: string;\n        conceptId?: number;\n        orderBy?: string;\n        croql?: string;\n        translationOfTermId?: number;\n    }\n    interface Term {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        languageId: string;\n        text: string;\n        description: string;\n        partOfSpeech: PartOfSpeech;\n        status: Status;\n        type: Type;\n        gender: Gender;\n        note: string;\n        url: string;\n        conceptId: number;\n        lemma: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTermRequest {\n        languageId: string;\n        text: string;\n        description?: string;\n        partOfSpeech?: PartOfSpeech;\n        status?: Status;\n        type?: Type;\n        gender?: Gender;\n        note?: string;\n        url?: string;\n        conceptId?: number;\n        translationOfTermId?: number;\n    }\n    interface ConcordanceSearchRequest extends PaginationOptions {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        glossary: Glossary;\n        concept: Concept;\n        sourceTerms: Term[];\n        targetTerms: Term[];\n    }\n    type Status = 'preferred' | 'admitted' | 'not recommended' | 'obsolete';\n    type Type = 'full form' | 'acronym' | 'abbreviation' | 'short form' | 'phrase' | 'variant';\n    type Gender = 'masculine' | 'feminine' | 'neuter' | 'other';\n    type GlossaryFormat = 'tbx' | 'tbx_v3' | 'csv' | 'xlsx';\n    interface GlossaryFileScheme {\n        [key: string]: number;\n    }\n    type PartOfSpeech = 'adjective' | 'adposition' | 'adverb' | 'auxiliary' | 'coordinating conjunction' | 'determiner' | 'interjection' | 'noun' | 'numeral' | 'particle' | 'pronoun' | 'proper noun' | 'subordinating conjunction' | 'verb' | 'other';\n    interface ListGlossariesOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ClearGlossaryOptions {\n        languageId?: number;\n        translationOfTermId?: number;\n        conceptId?: number;\n    }\n    interface Concept {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        subject: string;\n        definition: string;\n        translatable: boolean;\n        note: string;\n        url: string;\n        figure: string;\n        languagesDetails: LanguageDetails[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface LanguageDetails {\n        languageId: string;\n        userId: number;\n        definition: string;\n        note: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface UpdateConceptRequest {\n        subject?: string;\n        definition?: string;\n        translatable?: boolean;\n        note?: string;\n        url?: string;\n        figure?: string;\n        languagesDetails?: {\n            languageId: string;\n            definition: string;\n            note?: string;\n        }[];\n    }\n}\n```\n\n##### index.d.ts\n\n```typescript\nimport { Ai } from './ai';\nimport { Applications } from './applications';\nimport { Bundles } from './bundles';\nimport { Clients } from './clients';\nimport { ClientConfig, Credentials, CrowdinApi } from './core';\nimport { Dictionaries } from './dictionaries';\nimport { Distributions } from './distributions';\nimport { Fields } from './fields';\nimport { Glossaries } from './glossaries';\nimport { Issues } from './issues';\nimport { Labels } from './labels';\nimport { Languages } from './languages';\nimport { MachineTranslation } from './machineTranslation';\nimport { Notifications } from './notifications';\nimport { OrganizationWebhooks } from './organizationWebhooks';\nimport { ProjectsGroups } from './projectsGroups';\nimport { Reports } from './reports';\nimport { Screenshots } from './screenshots';\nimport { SecurityLogs } from './securityLogs';\nimport { SourceFiles } from './sourceFiles';\nimport { SourceStrings } from './sourceStrings';\nimport { StringComments } from './stringComments';\nimport { StringCorrections } from './stringCorrections';\nimport { StringTranslations } from './stringTranslations';\nimport { Tasks } from './tasks';\nimport { Teams } from './teams';\nimport { TranslationMemory } from './translationMemory';\nimport { TranslationStatus } from './translationStatus';\nimport { Translations } from './translations';\nimport { UploadStorage } from './uploadStorage';\nimport { Users } from './users';\nimport { Vendors } from './vendors';\nimport { Webhooks } from './webhooks';\nimport { Workflows } from './workflows';\nexport * from './ai';\nexport * from './applications';\nexport * from './bundles';\nexport * from './clients';\nexport * from './core';\nexport * from './dictionaries';\nexport * from './distributions';\nexport * from './fields';\nexport * from './glossaries';\nexport * from './issues';\nexport * from './labels';\nexport * from './languages';\nexport * from './machineTranslation';\nexport * from './notifications';\nexport * from './organizationWebhooks';\nexport * from './projectsGroups';\nexport * from './reports';\nexport * from './screenshots';\nexport * from './securityLogs';\nexport * from './sourceFiles';\nexport * from './sourceStrings';\nexport * from './stringComments';\nexport * from './stringCorrections';\nexport * from './stringTranslations';\nexport * from './tasks';\nexport * from './teams';\nexport * from './translationMemory';\nexport * from './translationStatus';\nexport * from './translations';\nexport * from './uploadStorage';\nexport * from './users';\nexport * from './vendors';\nexport * from './webhooks';\nexport * from './workflows';\nexport default class Client extends CrowdinApi {\n    readonly aiApi: Ai;\n    readonly applicationsApi: Applications;\n    readonly sourceFilesApi: SourceFiles;\n    readonly glossariesApi: Glossaries;\n    readonly languagesApi: Languages;\n    readonly translationsApi: Translations;\n    readonly translationStatusApi: TranslationStatus;\n    readonly projectsGroupsApi: ProjectsGroups;\n    readonly reportsApi: Reports;\n    readonly screenshotsApi: Screenshots;\n    readonly sourceStringsApi: SourceStrings;\n    readonly uploadStorageApi: UploadStorage;\n    readonly tasksApi: Tasks;\n    readonly translationMemoryApi: TranslationMemory;\n    readonly webhooksApi: Webhooks;\n    readonly organizationWebhooksApi: OrganizationWebhooks;\n    readonly machineTranslationApi: MachineTranslation;\n    readonly stringTranslationsApi: StringTranslations;\n    readonly workflowsApi: Workflows;\n    readonly usersApi: Users;\n    readonly vendorsApi: Vendors;\n    readonly issuesApi: Issues;\n    readonly teamsApi: Teams;\n    readonly distributionsApi: Distributions;\n    readonly dictionariesApi: Dictionaries;\n    readonly labelsApi: Labels;\n    readonly stringCommentsApi: StringComments;\n    readonly bundlesApi: Bundles;\n    readonly notificationsApi: Notifications;\n    readonly clientsApi: Clients;\n    readonly securityLogsApi: SecurityLogs;\n    readonly fieldsApi: Fields;\n    readonly stringCorrectionsApi: StringCorrections;\n    constructor(credentials: Credentials, config?: ClientConfig);\n}\nexport { Client };\n```\n\n##### issues/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Issues extends CrowdinApi {\n    listReportedIssues(projectId: number, options?: IssuesModel.ListReportedIssuesOptions): Promise<ResponseList<IssuesModel.Issue>>;\n    listReportedIssues(projectId: number, limit?: number, offset?: number, type?: IssuesModel.Type, status?: IssuesModel.Status): Promise<ResponseList<IssuesModel.Issue>>;\n    editIssue(projectId: number, issueId: number, request: PatchRequest[]): Promise<ResponseObject<IssuesModel.Issue>>;\n}\nexport declare namespace IssuesModel {\n    type Type = 'all' | 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type Status = 'all' | 'resolved' | 'unresolved';\n    interface Issue {\n        id: number;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: string;\n        languageId: string;\n        type: Type;\n        status: Status;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface String {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface ListReportedIssuesOptions extends PaginationOptions {\n        type?: IssuesModel.Type;\n        status?: IssuesModel.Status;\n    }\n}\n```\n\n##### labels/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { ScreenshotsModel } from '../screenshots';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Labels extends CrowdinApi {\n    listLabels(projectId: number, options?: LabelsModel.ListLabelsParams): Promise<ResponseList<LabelsModel.Label>>;\n    listLabels(projectId: number, limit?: number, offset?: number): Promise<ResponseList<LabelsModel.Label>>;\n    addLabel(projectId: number, request: LabelsModel.AddLabelRequest): Promise<ResponseObject<LabelsModel.Label>>;\n    getLabel(projectId: number, labelId: number): Promise<ResponseObject<LabelsModel.Label>>;\n    deleteLabel(projectId: number, labelId: number): Promise<void>;\n    editLabel(projectId: number, labelId: number, request: PatchRequest[]): Promise<ResponseObject<LabelsModel.Label>>;\n    assignLabelToScreenshots(projectId: number, labelId: number, request: LabelsModel.AssignLabelToScreenshotsRequet): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    unassignLabelFromScreenshots(projectId: number, labelId: number, screenshotIds: string): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    assignLabelToString(projectId: number, labelId: number, request: LabelsModel.AssignLabelToStringsRequet): Promise<ResponseList<SourceStringsModel.String>>;\n    unassignLabelFromString(projectId: number, labelId: number, stringIds: string): Promise<ResponseList<SourceStringsModel.String>>;\n}\nexport declare namespace LabelsModel {\n    interface ListLabelsParams extends PaginationOptions {\n        orderBy?: string;\n    }\n    interface Label {\n        id: number;\n        title: string;\n        isSystem?: boolean;\n    }\n    interface AddLabelRequest {\n        title: string;\n    }\n    interface AssignLabelToStringsRequet {\n        stringIds: number[];\n    }\n    interface AssignLabelToScreenshotsRequet {\n        screenshotIds: number[];\n    }\n}\n```\n\n##### languages/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Languages extends CrowdinApi {\n    listSupportedLanguages(options?: PaginationOptions): Promise<ResponseList<LanguagesModel.Language>>;\n    listSupportedLanguages(limit?: number, offset?: number): Promise<ResponseList<LanguagesModel.Language>>;\n    addCustomLanguage(request: LanguagesModel.AddLanguageRequest): Promise<ResponseObject<LanguagesModel.Language>>;\n    getLanguage(languageId: string): Promise<ResponseObject<LanguagesModel.Language>>;\n    deleteCustomLanguage(languageId: string): Promise<void>;\n    editCustomLanguage(languageId: string, request: PatchRequest[]): Promise<ResponseObject<LanguagesModel.Language>>;\n}\nexport declare namespace LanguagesModel {\n    interface Language {\n        id: string;\n        name: string;\n        editorCode: string;\n        twoLettersCode: string;\n        threeLettersCode: string;\n        locale: string;\n        androidCode: string;\n        osxCode: string;\n        osxLocale: string;\n        pluralCategoryNames: string[];\n        pluralRules: string;\n        pluralExamples: string[];\n        textDirection: TextDirection;\n        dialectOf: string;\n    }\n    interface AddLanguageRequest {\n        name: string;\n        code: string;\n        localeCode: string;\n        textDirection: TextDirection;\n        pluralCategoryNames: string[];\n        threeLettersCode: string;\n        twoLettersCode?: string;\n        dialectOf?: string;\n    }\n    type TextDirection = 'ltr' | 'rtl';\n}\n```\n\n##### machineTranslation/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class MachineTranslation extends CrowdinApi {\n    listMts(options?: MachineTranslationModel.ListMTsOptions): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    listMts(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    createMt(request: MachineTranslationModel.CreateMachineTranslationRequest): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    getMt(mtId: number): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    deleteMt(mtId: number): Promise<void>;\n    updateMt(mtId: number, request: PatchRequest[]): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    translate(mtId: number, request: MachineTranslationModel.TranslateRequest): Promise<ResponseObject<MachineTranslationModel.TranslateResponse>>;\n}\nexport declare namespace MachineTranslationModel {\n    interface MachineTranslation {\n        id: number;\n        groupId: number;\n        name: string;\n        type: number;\n        credentials: Credentials;\n        projectIds: number[];\n        supportedLanguageIds: string[];\n        supportedLanguagePairs: Record<string, string[]>;\n        enabledLanguageIds: string[];\n        enabledProjectIds: number[];\n        isEnabled: boolean;\n    }\n    type Credentials = {\n        apiKey: string;\n    } | {\n        credentials: string;\n    } | {\n        model: string;\n        apiKey: string;\n    } | {\n        isSystemCredentials: boolean;\n        apiKey: string;\n    } | {\n        endpoint: string;\n        apiKey: string;\n    } | {\n        url: string;\n    } | {\n        accessKey: string;\n        secretKey: string;\n    };\n    interface CreateMachineTranslationRequest {\n        name: string;\n        type: string;\n        credentials: Credentials;\n        groupId?: number;\n        enabledLanguageIds?: string[];\n        enabledProjectIds?: number[];\n        isEnabled?: boolean;\n    }\n    interface TranslateRequest {\n        languageRecognitionProvider?: LanguageRecognitionProvider;\n        sourceLanguageId?: string;\n        targetLanguageId: string;\n        strings?: string[];\n    }\n    interface TranslateResponse {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        strings: string[];\n        translations: string[];\n    }\n    type LanguageRecognitionProvider = 'crowdin' | 'engine';\n    interface ListMTsOptions extends PaginationOptions {\n        groupId?: number;\n    }\n}\n```\n\n##### notifications/index.d.ts\n\n```typescript\nimport { CrowdinApi } from '../core';\nexport declare class Notifications extends CrowdinApi {\n    sendNotificationToAuthenticatedUser(request: NotificationsModel.Notification): Promise<void>;\n    sendNotificationToProjectMembers(projectId: number, request: NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n    sendNotificationToOrganizationMembers(request: NotificationsModel.Notification | NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n}\nexport declare namespace NotificationsModel {\n    interface Notification {\n        message: string;\n    }\n    interface NotificationByUsers extends Notification {\n        userIds: number[];\n    }\n    interface NotificationByRole extends Notification {\n        role: 'owner' | 'admin';\n    }\n}\n```\n\n##### organizationWebhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { WebhooksModel } from '../webhooks';\nexport declare class OrganizationWebhooks extends CrowdinApi {\n    listWebhooks(options?: PaginationOptions): Promise<ResponseList<OrganizationWebhooksModel.OrganizationWebhook>>;\n    addWebhook(request: OrganizationWebhooksModel.AddOrganizationWebhookRequest): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    getWebhook(webhookId: number): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    deleteWebhook(webhookId: number): Promise<void>;\n    editWebhook(webhookId: number, request: PatchRequest[]): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n}\nexport declare namespace OrganizationWebhooksModel {\n    type OrganizationWebhook = Omit<WebhooksModel.Webhook, 'projectId' | 'events'> & {\n        events: Event[];\n    };\n    type AddOrganizationWebhookRequest = Omit<WebhooksModel.AddWebhookRequest, 'events'> & {\n        events: Event[];\n    };\n    type Event = 'group.created' | 'group.deleted' | 'project.created' | 'project.deleted';\n}\n```\n\n##### projectsGroups/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class ProjectsGroups extends CrowdinApi {\n    listGroups(options?: ProjectsGroupsModel.ListGroupsOptions): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    listGroups(parentId?: number, offset?: number, userId?: number, limit?: number): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    addGroup(request: ProjectsGroupsModel.AddGroupRequest): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    getGroup(groupId: number): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    deleteGroup(groupId: number): Promise<void>;\n    editGroup(groupId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    listProjects(options?: ProjectsGroupsModel.ListProjectsOptions): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    listProjects(groupId?: number, hasManagerAccess?: BooleanInt, limit?: number, offset?: number): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    addProject(request: ProjectsGroupsModel.CreateProjectEnterpriseRequest | ProjectsGroupsModel.CreateProjectRequest): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    getProject(projectId: number): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    deleteProject(projectId: number): Promise<void>;\n    editProject(projectId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    downloadProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    resetProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    listProjectFileFormatSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    addProjectFileFormatSettings(projectId: number, request: ProjectsGroupsModel.AddProjectFileFormatSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    getProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    deleteProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<void>;\n    editProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    listProjectStringsExporterSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    addProjectStringsExporterSettings(projectId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    getProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    deleteProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<void>;\n    editProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n}\nexport declare namespace ProjectsGroupsModel {\n    interface Group {\n        id: number;\n        name: string;\n        description: string;\n        parentId: number;\n        organizationId: number;\n        userId: number;\n        subgroupsCount: number;\n        projectsCount: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddGroupRequest {\n        name: string;\n        parentId?: number;\n        description?: string;\n    }\n    interface Project {\n        id: number;\n        type: Type;\n        userId: number;\n        sourceLanguageId: string;\n        targetLanguageIds: string[];\n        languageAccessPolicy: LanguageAccessPolicy;\n        name: string;\n        identifier: string;\n        description: string;\n        visibility: string;\n        logo: string;\n        publicDownloads: boolean;\n        createdAt: string;\n        updatedAt: string;\n        lastActivity: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        webUrl: string;\n        savingsReportSettingsTemplateId: number;\n        fields: Record<string, any>;\n        cname: string;\n        groupId: number;\n        background: string;\n        isExternal: boolean;\n        externalType: string;\n        externalProjectId: number;\n        externalOrganizationId: number;\n        workflowId: number;\n        hasCrowdsourcing: boolean;\n        publicUrl: string;\n    }\n    interface CreateProjectRequest {\n        name: string;\n        identifier: string;\n        sourceLanguageId: string;\n        targetLanguageIds?: string[];\n        visibility?: JoinPolicy;\n        languageAccessPolicy?: LanguageAccessPolicy;\n        cname?: string;\n        description?: string;\n        tagDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        autoSubstitution?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        useGlobalTm?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportApprovedOnly?: boolean;\n        qaCheckIsActive?: boolean;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        normalizePlaceholder?: boolean;\n        notificationSettings?: NotificationSettings;\n        tmPreTranslate?: ProjectSettings['tmPreTranslate'];\n        mtPreTranslate?: ProjectSettings['mtPreTranslate'];\n        aiPreTranslate?: ProjectSettings['aiPreTranslate'];\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        savingsReportSettingsTemplateId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    interface CreateProjectEnterpriseRequest {\n        name: string;\n        sourceLanguageId: string;\n        templateId?: number;\n        steps?: WorkflowTemplateStepConfig[];\n        groupId?: number;\n        targetLanguageIds?: string[];\n        vendorId?: number;\n        mtEngineId?: number;\n        description?: string;\n        translateDuplicates?: TranslateDuplicates;\n        tagsDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        taskReviewerIds?: number[];\n        autoSubstitution?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        delayedWorkflowStart?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: number;\n        normalizePlaceholder?: boolean;\n        qaCheckIsActive?: boolean;\n        qaApprovalsCount?: number;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        customQaCheckIds?: number[];\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        notificationSettings?: NotificationSettings;\n        savingsReportSettingsTemplateId?: number;\n        fields?: Record<string, any>;\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        alignmentActionAiPromptId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    type GlossaryAccessOption = 'readOnly' | 'fullAccess' | 'manageDrafts';\n    interface ProjectSettings extends Project {\n        translateDuplicates: TranslateDuplicates;\n        tagsDetection: TagDetection;\n        glossaryAccess: boolean;\n        glossaryAccessOption: GlossaryAccessOption;\n        isMtAllowed: boolean;\n        taskBasedAccessControl: boolean;\n        hiddenStringsProofreadersAccess: boolean;\n        autoSubstitution: boolean;\n        exportTranslatedOnly: boolean;\n        skipUntranslatedStrings: boolean;\n        exportApprovedOnly: boolean;\n        autoTranslateDialects: boolean;\n        useGlobalTm: boolean;\n        showTmSuggestionsDialects: boolean;\n        isSuspended: boolean;\n        qaCheckIsActive: boolean;\n        qaCheckCategories: CheckCategories;\n        qaChecksIgnorableCategories: CheckCategories;\n        languageMapping: LanguageMapping;\n        notificationSettings: NotificationSettings;\n        defaultTmId: number;\n        defaultGlossaryId: number;\n        assignedTms: {\n            [id: string]: {\n                priority: number;\n            };\n        };\n        assignedGlossaries: number[];\n        tmPenalties: {\n            autoSubstitution: number;\n            tmPriority: {\n                priority: number;\n                penalty: number;\n            };\n            multipleTranslations: number;\n            timeSinceLastUsage: {\n                months: number;\n                penalty: number;\n            };\n            timeSinceLastModified: {\n                months: number;\n                penalty: number;\n            };\n        };\n        normalizePlaceholder: boolean;\n        tmPreTranslate: {\n            enabled: boolean;\n            autoApproveOption: 'all' | 'perfectMatchOnly' | 'exceptAutoSubstituted' | 'perfectMatchApprovedOnly' | 'none';\n            minimumMatchRatio: 'perfect' | '100';\n        };\n        mtPreTranslate: {\n            enabled: boolean;\n            mts: {\n                mtId: number;\n                languageIds: string[];\n            }[];\n        };\n        aiPreTranslate: {\n            enabled: boolean;\n            aiPrompts: {\n                aiPromptId: number;\n                languageIds: string[];\n            }[];\n        };\n        assistActionAiPromptId: number;\n        editorSuggestionAiPromptId: number;\n        inContext: boolean;\n        inContextProcessHiddenStrings: string;\n        inContextPseudoLanguageId: string;\n        inContextPseudoLanguage: LanguagesModel.Language;\n        saveMetaInfoInSource: boolean;\n        skipUntranslatedFiles: boolean;\n        tmContextType: TmContextType;\n        clientOrganizationId: number;\n        taskReviewerIds: number[];\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n        qaApprovalsCount: number;\n        customQaCheckIds: number[];\n        externalQaCheckIds: number[];\n        delayedWorkflowStart: boolean;\n        alignmentActionAiPromptId: number;\n    }\n    enum Type {\n        FILES_BASED = 0,\n        STRINGS_BASED = 1\n    }\n    enum TagDetection {\n        AUTO = 0,\n        COUNT_TAGS = 1,\n        SKIP_TAGS = 2\n    }\n    type JoinPolicy = 'open' | 'private';\n    type LanguageAccessPolicy = 'open' | 'moderate';\n    interface CheckCategories {\n        empty: boolean;\n        size: boolean;\n        tags: boolean;\n        spaces: boolean;\n        variables: boolean;\n        punctuation: boolean;\n        symbolRegister: boolean;\n        specialSymbols: boolean;\n        wrongTranslation: boolean;\n        spellcheck: boolean;\n        icu: boolean;\n        terms: boolean;\n        duplicate: boolean;\n        ftl: boolean;\n        android: boolean;\n    }\n    interface LanguageMapping {\n        [key: string]: LanguageMappingEntity;\n    }\n    interface LanguageMappingEntity {\n        name: string;\n        two_letters_code: string;\n        three_letters_code: string;\n        locale: string;\n        locale_with_underscore: string;\n        android_code: string;\n        osx_code: string;\n        osx_locale: string;\n    }\n    enum TranslateDuplicates {\n        SHOW = 0,\n        HIDE_REGULAR_DETECTION = 1,\n        SHOW_AUTO_TRANSLATE = 2,\n        SHOW_WITHIN_VERION_BRANCH_REGULAR_DETECTION = 3,\n        HIDE_STRICT_DETECTION = 4,\n        SHOW_WITHIN_VERION_BRANCH_STRICT_DETECTION = 5\n    }\n    interface NotificationSettings {\n        translatorNewStrings?: boolean;\n        managerNewStrings?: boolean;\n        managerLanguageCompleted?: boolean;\n    }\n    interface ListGroupsOptions extends PaginationOptions {\n        parentId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListProjectsOptions extends PaginationOptions {\n        groupId?: number;\n        hasManagerAccess?: BooleanInt;\n        orderBy?: string;\n        type?: BooleanInt;\n    }\n    type Settings = PropertyFileFormatSettings | CommonFileFormatSettings | XmlFileFormatSettings | MdxV2FormatSettings | FmHtmlFormatSettings | HtmlFormatSettings | JsonFormatSettings | MdxV1FormatSettings | JavaScriptFileFormatSettings | DocxFileFormatSettings;\n    interface ProjectFileFormatSettings {\n        id: number;\n        name: string;\n        format: string;\n        extensions: string[];\n        settings: Settings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddProjectFileFormatSettingsRequest {\n        format: string;\n        settings: Settings;\n    }\n    interface PropertyFileFormatSettings {\n        escapeQuotes?: 0 | 1 | 2 | 3;\n        escapeSpecialCharacters?: 0 | 1;\n        exportPattern?: string;\n    }\n    interface JavaScriptFileFormatSettings {\n        exportPattern?: 'string';\n        exportQuotes?: 'single' | 'double';\n    }\n    interface CommonFileFormatSettings {\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        exportPattern?: string;\n    }\n    interface XmlFileFormatSettings extends CommonFileFormatSettings {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        translatableElements?: string[];\n    }\n    interface JsonFormatSettings extends CommonFileFormatSettings {\n        type?: 'i18next_json' | 'nestjs_i18n';\n    }\n    interface MdxV2FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxV1FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n        type?: 'mdx_v1' | 'mdx_v2';\n    }\n    interface FmHtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface HtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n    }\n    interface DocxFileFormatSettings extends CommonFileFormatSettings {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n    }\n    type TmContextType = 'segmentContext' | 'auto' | 'prevAndNextSegment';\n    type WorkflowTemplateStepConfig = WorkflowTemplateStepConfigTranslateProofread | WorkflowTemplateStepConfigVendor | WorkflowTemplateStepConfigTMPreTranslate | WorkflowTemplateStepConfigMTPreTranslate;\n    interface WorkflowTemplateStepConfigTranslateProofread {\n        id: number;\n        languages?: string[];\n        assignees?: number[];\n        config?: {\n            assignees: {\n                [key: string]: number[];\n            };\n        };\n    }\n    interface WorkflowTemplateStepConfigVendor {\n        id: number;\n        languages?: string[];\n        vendorId?: number;\n    }\n    interface WorkflowTemplateStepConfigTMPreTranslate {\n        id: number;\n        languages?: string[];\n        config?: {\n            minRelevant?: number;\n            autoSubstitution?: boolean;\n        };\n    }\n    interface WorkflowTemplateStepConfigMTPreTranslate {\n        id: number;\n        languages?: string[];\n        mtId?: number;\n    }\n    type StringsExporterSettings = AndroidStringsExporterSettings | MacOSXStringsExporterSettings | XliffStringsExporterSettings;\n    interface ProjectStringsExporterSettings {\n        id: number;\n        format: string;\n        settings: StringsExporterSettings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AndroidStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n        useCdataForStringsWithTags?: boolean;\n    }\n    interface MacOSXStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n    }\n    interface XliffStringsExporterSettings {\n        languagePairMapping?: {\n            [key: string]: {\n                sourceLanguageId: string;\n            };\n        };\n        copySourceToEmptyTarget?: boolean;\n        exportTranslatorsComment?: boolean;\n    }\n    interface AddProjectStringsExporterSettingsRequest {\n        format: string;\n        settings: StringsExporterSettings;\n    }\n}\n```\n\n##### reports/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Reports extends CrowdinApi {\n    listOrganizationReportArchives(options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getOrganizationReportArchive(archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteOrganizationReportArchive(archiveId: number): Promise<void>;\n    exportOrganizationReportArchive(archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkOrganizationReportArchiveStatus(archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadOrganizationReportArchive(archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    listUserReportArchives(userId: number, options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getUserReportArchive(userId: number, archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteUserReportArchive(userId: number, archiveId: number): Promise<void>;\n    exportUserReportArchive(userId: number, archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkUserReportArchiveStatus(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadUserReportArchive(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateGroupReport(groupId: number, request: ReportsModel.GenerateGroupReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    checkGroupReportStatus(groupId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    downloadGroupReport(groupId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listOrganizationReportSettingsTemplates(options?: ReportsModel.ListOrganizationReportSettingsParams): Promise<ResponseList<ReportsModel.OrganizationReportSettings>>;\n    addOrganizationReportSettingsTemplate(request: ReportsModel.AddOrganizationReportSettingsRequest): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    getOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    editOrganizationReportSettingsTemplate(reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    deleteOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<void>;\n    generateOrganizationReport(request: ReportsModel.GenerateOrganizationReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    checkOrganizationReportStatus(reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    downloadOrganizationReport(reportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateReport(projectId: number, request: ReportsModel.GenerateReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    checkReportStatus(projectId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    downloadReport(projectId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listReportSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.ReportSettings>>;\n    addReportSettingsTemplate(projectId: number, request: ReportsModel.AddReportSettingsRequest): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    getReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    editReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    deleteReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<void>;\n    listUserReportSettingsTemplates(userId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.UserReportSettings>>;\n    addUserReportSettingsTemplate(userId: number, request: ReportsModel.AddUserReportSettingsRequest): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    getUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    editUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    deleteUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<void>;\n}\nexport declare namespace ReportsModel {\n    interface ReportArchive {\n        id: number;\n        scopeType: string;\n        scopeId: number;\n        userId: number;\n        name: string;\n        webUrl: string;\n        scheme: any;\n        createdAt: string;\n    }\n    interface ListReportArchiveParams extends PaginationOptions {\n        scopeType: string;\n        scopeId: number;\n    }\n    interface ReportArchiveStatusAttribute {\n        format: Format;\n        reportName: string;\n        schema: any;\n    }\n    type GroupReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    type OrganizationReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    interface GenerateGroupReportRequest {\n        name: string;\n        schema: GroupReportSchema;\n    }\n    interface GenerateOrganizationReportRequest {\n        name: string;\n        schema: OrganizationReportSchema;\n    }\n    interface GroupTranslationCostsPostEditingSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n    }\n    interface GroupTranslationCostsPerEditingByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n    }\n    interface CostsEstimationSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface CostsEstimationByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface GroupTopMembersSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface RawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type GenerateReportRequest = PreTranslateEfficeincy | PreTranslateAccuracy | TranslateAccuracy | CostEstimationPostEnding | TranslationCostsPostEnding | TopMembers | ContributionRawData | SourceContentUpdates | ProjectMembers | EditorIssues | QaCheckIssues | SavingActivity | TranslationActivity;\n    type ReportSchema = Pick<GenerateReportRequest, 'schema'>;\n    interface PreTranslateEfficeincy {\n        name: 'pre-translate-efficiency';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface PreTranslateAccuracy {\n        name: 'pre-translate-accuracy';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface TranslateAccuracy {\n        name: 'translator-accuracy';\n        schema: TranslateAccuracySchema;\n    }\n    interface CostEstimationPostEnding {\n        name: 'costs-estimation-pe';\n        schema: CostEstimationPostEndingSchema | CostEstimationPostEndingSchemaByTask;\n    }\n    interface TranslationCostsPostEnding {\n        name: 'translation-costs-pe';\n        schema: TranslationCostsPostEndingSchema | TranslationCostsPostEndingSchemaByTask;\n    }\n    interface TopMembers {\n        name: 'top-members';\n        schema: TopMembersSchema;\n    }\n    interface ContributionRawData {\n        name: 'contribution-raw-data';\n        schema: ContributionRawDataSchema | ContributionRawDataSchemaByTask;\n    }\n    interface SourceContentUpdates {\n        name: 'source-content-updates';\n        schema: SourceContentUpdatesSchema;\n    }\n    interface ProjectMembers {\n        name: 'project-members';\n        schema: MembersSchema;\n    }\n    interface EditorIssues {\n        name: 'editor-issues';\n        schema: EditorIssuesSchema;\n    }\n    interface QaCheckIssues {\n        name: 'qa-check-issues';\n        schema: ProjectQaCheckIssuesSchema;\n    }\n    interface SavingActivity {\n        name: 'saving-activity';\n        schema: SavingActivitySchema;\n    }\n    interface TranslationActivity {\n        name: 'translation-activity';\n        schema: ProjectConsumptionSchema;\n    }\n    interface ReportStatusAttributes<S> {\n        format: Format;\n        reportName: string;\n        schema: S;\n    }\n    interface PreTranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateAccuracySchemaByTask {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        taskId?: number;\n    }\n    interface TranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        userIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface CostEstimationPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface CostEstimationPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface TranslationCostsPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n    }\n    interface TranslationCostsPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number;\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface TopMembersSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: string;\n        columns?: Column[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchemaByTask {\n        mode: ContributionMode;\n        unit?: Unit;\n        taskId: number;\n        columns?: Column[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateEfficiencySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ListOrganizationReportSettingsParams extends PaginationOptions {\n        projectId?: number;\n        groupId?: number;\n    }\n    interface ReportSettings {\n        id: number;\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic: boolean;\n        isGlobal: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddReportSettingsRequest {\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic?: boolean;\n        isGlobal?: boolean;\n    }\n    type UserReportSettings = Omit<ReportSettings, 'isPublic' | 'isGlobal'>;\n    type AddUserReportSettingsRequest = Omit<AddReportSettingsRequest, 'isPublic' | 'isGlobal'>;\n    type OrganizationReportSettings = Omit<ReportSettings, 'isGlobal'> & {\n        projectId: number;\n        groupId: number;\n    };\n    type AddOrganizationReportSettingsRequest = Omit<AddReportSettingsRequest, 'isGlobal'> & {\n        projectId?: number;\n        groupId?: number;\n    };\n    interface ReportSettinsConfig {\n        baseRates: BaseRate;\n        netRateSchemes: NetRateSchemas[];\n        individualRates: IndividualRate[];\n    }\n    type Unit = 'strings' | 'words' | 'chars' | 'chars_with_spaces';\n    type Currency = 'USD' | 'EUR' | 'JPY' | 'GBP' | 'AUD' | 'CAD' | 'CHF' | 'CNY' | 'SEK' | 'NZD' | 'MXN' | 'SGD' | 'HKD' | 'NOK' | 'KRW' | 'TRY' | 'RUB' | 'INR' | 'BRL' | 'ZAR' | 'GEL' | 'UAH';\n    type Format = 'xlsx' | 'csv' | 'json';\n    interface BaseRate {\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface IndividualRate extends BaseRate {\n        languageIds: string[];\n        userIds: number[];\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface NetRateSchemas {\n        tmMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        mtMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        suggestionMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        aiMatch?: {\n            matchType: Mode;\n            price: number;\n        }[];\n    }\n    type Mode = 'no_match' | 'tm_match' | 'approval' | '99-95' | '94-90' | '89-80' | 'perfect' | '100';\n    type ContributionMode = 'translations' | 'approvals' | 'votes';\n    type GroupBy = 'user' | 'language';\n    type LabelIncludeType = 'strings_with_label' | 'strings_without_label';\n    type Column = 'userId' | 'languageId' | 'stringId' | 'translationId' | 'fileId' | 'filePath' | 'pluralForm' | 'sourceStringTextHash' | 'mtEngine' | 'mtId' | 'tmName' | 'tmId' | 'aiPromptName' | 'aiPromptId' | 'preTranslated' | 'tmMatch' | 'mtMatch' | 'aiMatch' | 'suggestionMatch' | 'sourceUnits' | 'targetUnits' | 'createdAt' | 'updatedAt' | 'mark';\n    interface SourceContentUpdatesSchema {\n        unit?: Unit;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface MembersSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface EditorIssuesSchema {\n        dateFrom?: string;\n        dateTo?: string;\n        format?: Format;\n        languageId?: string;\n        userId?: number;\n    }\n    interface ProjectQaCheckIssuesSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface SavingActivitySchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface ProjectConsumptionSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface GroupTaskUsageSchema {\n        format: Format;\n        type: 'workload' | 'create-vs-resolve' | 'performance' | 'time' | 'cost';\n        projectIds?: number[];\n        assigneeId?: number;\n        creatorId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n        wordsCountFrom?: number;\n        wordsCountTo?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        currency?: Currency;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n    }\n    interface GroupQaCheckIssuesSchema {\n        projectIds?: number[];\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface GroupTranslationActivitySchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n}\n```\n\n##### screenshots/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Screenshots extends CrowdinApi {\n    listScreenshots(projectId: number, options?: ScreenshotsModel.ListScreenshotParams): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    listScreenshots(projectId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    addScreenshot(projectId: number, request: ScreenshotsModel.CreateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    getScreenshot(projectId: number, screenshotId: number): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    updateScreenshot(projectId: number, screenshotId: number, request: ScreenshotsModel.UpdateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    deleteScreenshot(projectId: number, screenshotId: number): Promise<void>;\n    editScreenshot(projectId: number, screenshotId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    listScreenshotTags(projectId: number, screenshotId: number, options?: PaginationOptions): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    listScreenshotTags(projectId: number, screenshotId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    replaceTags(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[] | ScreenshotsModel.AutoTagRequest): Promise<void>;\n    addTag(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[]): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    clearTags(projectId: number, screenshotId: number): Promise<void>;\n    getTag(projectId: number, screenshotId: number, tagId: number): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    deleteTag(projectId: number, screenshotId: number, tagId: number): Promise<void>;\n    updateTag(projectId: number, screenshotId: number, tagId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n}\nexport declare namespace ScreenshotsModel {\n    interface ListScreenshotParams extends PaginationOptions {\n        stringIds?: number[];\n        stringId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Screenshot {\n        id: number;\n        userId: number;\n        url: string;\n        webUrl: string;\n        name: string;\n        size: Size;\n        tagsCount: number;\n        tags: Tag[];\n        labels: number[];\n        labelIds: number[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateScreenshotRequest {\n        storageId: number;\n        name: string;\n        autoTag?: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        labelIds?: number[];\n    }\n    interface UpdateScreenshotRequest {\n        storageId: number;\n        name: string;\n    }\n    interface Tag {\n        id: number;\n        screenshotId: number;\n        stringId: number;\n        position: Position;\n        createdAt: string;\n    }\n    interface ReplaceTagRequest {\n        stringId: number;\n        position?: Position;\n    }\n    interface AutoTagRequest {\n        autoTag: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n    }\n    interface Size {\n        width: number;\n        height: number;\n    }\n    interface Position {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n    }\n}\n```\n\n##### securityLogs/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class SecurityLogs extends CrowdinApi {\n    listOrganizationSecurityLogs(options?: SecurityLogsModel.ListOrganizationSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getOrganizationSecurityLog(securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n    listUserSecurityLogs(userId: number, options?: SecurityLogsModel.ListUserSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getUserSecurityLog(userId: number, securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n}\nexport declare namespace SecurityLogsModel {\n    type Event = 'login' | 'password.set' | 'password.change' | 'email.change' | 'login.change' | 'personal_token.issued' | 'personal_token.revoked' | 'mfa.enabled' | 'mfa.disabled' | 'session.revoke' | 'session.revoke_all' | 'sso.connect' | 'sso.disconnect' | 'user.remove' | 'application.connected' | 'application.disconnected' | 'webauthn.created' | 'webauthn.deleted' | 'trusted_device.remove' | 'trusted_device.remove_all' | 'device_verification.enabled' | 'device_verification.disabled';\n    interface ListOrganizationSecurityLogsParams extends PaginationOptions {\n        event?: Event;\n        createdAfter?: string;\n        createdBefore?: string;\n        ipAddress?: string;\n        userId?: number;\n    }\n    type ListUserSecurityLogsParams = Omit<ListOrganizationSecurityLogsParams, 'userId'>;\n    interface SecurityLog {\n        id: number;\n        event: string;\n        info: string;\n        userId: number;\n        location: string;\n        ipAddress: string;\n        deviceName: string;\n        createdAt: string;\n    }\n}\n```\n\n##### sourceFiles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class SourceFiles extends CrowdinApi {\n    getClonedBranch(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    clonedBranch(projectId: number, branchId: number, request: SourceFilesModel.CloneBranchRequest): Promise<ResponseObject<Status<object>>>;\n    checkBranchClonedStatus(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<Status<object>>>;\n    listProjectBranches(projectId: number, options?: SourceFilesModel.ListProjectBranchesOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n    listProjectBranches(projectId: number, name?: string, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.Branch>>;\n    createBranch(projectId: number, request: SourceFilesModel.CreateBranchRequest): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    getBranch(projectId: number, branchId: number): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    deleteBranch(projectId: number, branchId: number): Promise<void>;\n    editBranch(projectId: number, branchId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    mergeBranch(projectId: number, branchId: number, request: SourceFilesModel.MergeBranchRequest): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    checkBranchMergeStatus(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    getBranchMergeSummary(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<SourceFilesModel.MergeBranchSummary>>;\n    listProjectDirectories(projectId: number, options?: SourceFilesModel.ListProjectDirectoriesOptions): Promise<ResponseList<SourceFilesModel.Directory>>;\n    listProjectDirectories(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, filter?: string, recursion?: string): Promise<ResponseList<SourceFilesModel.Directory>>;\n    createDirectory(projectId: number, request: SourceFilesModel.CreateDirectoryRequest): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    getDirectory(projectId: number, directoryId: number): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    deleteDirectory(projectId: number, directoryId: number): Promise<void>;\n    editDirectory(projectId: number, directoryId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    listProjectFiles(projectId: number, options?: SourceFilesModel.ListProjectFilesOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listProjectFiles(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, recursion?: any, filter?: string): Promise<ResponseList<SourceFilesModel.File>>;\n    createFile(projectId: number, request: SourceFilesModel.CreateFileRequest): Promise<ResponseObject<SourceFilesModel.File>>;\n    getFile(projectId: number, fileId: number): Promise<ResponseObject<SourceFilesModel.File>>;\n    updateOrRestoreFile(projectId: number, fileId: number, request: SourceFilesModel.ReplaceFileFromStorageRequest | SourceFilesModel.RestoreFile): Promise<ResponseObject<SourceFilesModel.File>>;\n    deleteFile(projectId: number, fileId: number): Promise<void>;\n    editFile(projectId: number, fileId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.File>>;\n    downloadFilePreview(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    downloadFile(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    listFileRevisions(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    listFileRevisions(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    getFileRevision(projectId: number, fileId: number, revisionId: number): Promise<ResponseObject<SourceFilesModel.FileRevision>>;\n    listReviewedSourceFilesBuild(projectId: number, options?: SourceFilesModel.ListReviewedSourceFilesBuildOptions): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    listReviewedSourceFilesBuild(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    buildReviewedSourceFiles(projectId: number, request?: SourceFilesModel.BuildReviewedSourceFilesRequest): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    checkReviewedSourceFilesBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    downloadReviewedSourceFiles(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace SourceFilesModel {\n    interface Branch {\n        id: number;\n        projectId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateBranchRequest {\n        name: string;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface CloneBranchRequest {\n        name: string;\n        title?: string;\n    }\n    interface MergeBranchRequest {\n        deleteAfterMerge?: boolean;\n        sourceBranchId: number;\n        dryRun?: boolean;\n    }\n    interface MergeBranchAttributes {\n        sourceBranchId: number;\n        deleteAfterMerge: boolean;\n    }\n    interface MergeBranchSummary {\n        status: string;\n        sourceBranchId: number;\n        targetBranchId: number;\n        dryRun: boolean;\n        details: {\n            added: number;\n            deleted: number;\n            updated: number;\n            conflicted: number;\n        };\n    }\n    type Priority = 'low' | 'normal' | 'high';\n    interface ListProjectDirectoriesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        filter?: string;\n        recursion?: string;\n        orderBy?: string;\n    }\n    interface Directory {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        path: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateDirectoryRequest {\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface ListProjectFilesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        recursion?: any;\n        filter?: string;\n        orderBy?: string;\n    }\n    interface File {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        context: string;\n        type: string;\n        path: string;\n        status: string;\n        revisionId: number;\n        priority: Priority;\n        importOptions: ImportOptions;\n        exportOptions: GeneralExportOptions | PropertyExportOptions;\n        excludedTargetLanguages: string[];\n        parserVersion: number;\n        createdAt: string;\n        updatedAt: string;\n        fields: Record<string, any>;\n    }\n    interface CreateFileRequest {\n        storageId: number;\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        context?: string;\n        type?: FileType;\n        parserVersion?: number;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        excludedTargetLanguages?: string[];\n        attachLabelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface ReplaceFileFromStorageRequest {\n        storageId: number;\n        name?: string;\n        updateOption?: UpdateOption;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        attachLabelIds?: number[];\n        detachLabelIds?: number[];\n        replaceModifiedContext?: boolean;\n    }\n    type ExportOptions = GeneralExportOptions | PropertyExportOptions | JavaScriptExportOptions | MdExportOptions;\n    type ImportOptions = SpreadsheetImportOptions | XmlImportOptions | WebXmlImportOptions | DocxFileImportOptions | HtmlFileImportOptions | HtmlFrontMatterFileImportOptions | MdxFileImportOptions | MdFileImportOptions | StringCatalogFileImportOptions | AdocFileImportOptions | OtherImportOptions;\n    interface RestoreFile {\n        revisionId: number;\n    }\n    interface FileRevision {\n        id: number;\n        projectId: number;\n        fileId: number;\n        restoreToRevision: number;\n        info: FileRevisionInfo;\n        date: string;\n    }\n    interface FileRevisionInfo {\n        added: FileRevisionInfoAttribute;\n        deleted: FileRevisionInfoAttribute;\n        updated: FileRevisionInfoAttribute;\n    }\n    interface FileRevisionInfoAttribute {\n        strings: number;\n        words: number;\n    }\n    type FileType = 'auto' | 'android' | 'macosx' | 'resx' | 'properties' | 'gettext' | 'yaml' | 'php' | 'json' | 'xml' | 'ini' | 'rc' | 'resw' | 'resjson' | 'qtts' | 'joomla' | 'chrome' | 'dtd' | 'dklang' | 'flex' | 'nsh' | 'wxl' | 'xliff' | 'xliff_two' | 'html' | 'haml' | 'txt' | 'csv' | 'md' | 'flsnp' | 'fm_html' | 'fm_md' | 'mediawiki' | 'docx' | 'xlsx' | 'sbv' | 'properties_play' | 'properties_xml' | 'maxthon' | 'go_json' | 'dita' | 'mif' | 'idml' | 'stringsdict' | 'plist' | 'vtt' | 'vdf' | 'srt' | 'stf' | 'toml' | 'contentful_rt' | 'svg' | 'js' | 'coffee' | 'nestjs_i18n' | 'webxml';\n    interface SpreadsheetImportOptions {\n        firstLineContainsHeader?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        importTranslations?: boolean;\n        scheme?: Scheme;\n    }\n    interface Scheme {\n        none: number;\n        identifier: number;\n        sourcePhrase: number;\n        sourceOrTranslation: number;\n        translation: number;\n        context: number;\n        maxLength: number;\n        labels: number;\n        [key: string]: number;\n    }\n    interface XmlImportOptions {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        translatableElements?: string[];\n        srxStorageId?: number;\n    }\n    interface WebXmlImportOptions {\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface DocxFileImportOptions {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFileImportOptions {\n        excludedElements?: string[];\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFrontMatterFileImportOptions extends HtmlFileImportOptions {\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface MdFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface StringCatalogFileImportOptions {\n        importKeyAsSource?: boolean;\n    }\n    interface AdocFileImportOptions {\n        excludeIncludeDirectives?: boolean;\n    }\n    interface OtherImportOptions {\n        contentSegmentation: boolean;\n        srxStorageId: number;\n    }\n    interface GeneralExportOptions {\n        exportPattern?: string;\n    }\n    interface PropertyExportOptions {\n        escapeQuotes?: EscapeQuotes;\n        exportPattern?: string;\n        escapeSpecialCharacters?: 0 | 1;\n    }\n    interface JavaScriptExportOptions {\n        exportPattern?: string;\n        exportQuotes?: ExportQuotes;\n    }\n    interface MdExportOptions {\n        exportPattern?: string;\n        strongMarker?: 'asterisk' | 'underscore';\n        emphasisMarker?: 'asterisk' | 'underscore';\n        unorderedListBullet?: 'asterisks' | 'plus' | 'plus';\n        tableColumnWidth?: 'consolidate' | 'evenly_distribute_cells';\n    }\n    enum EscapeQuotes {\n        ZERO = 0,\n        ONE = 1,\n        TWO = 2,\n        THREE = 3\n    }\n    enum ExportQuotes {\n        SINGLE = \"single\",\n        DOUBLE = \"double\"\n    }\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n    interface ReviewedSourceFilesBuild {\n        id: number;\n        projectId: number;\n        status: string;\n        progress: number;\n        attributes: ReviewedSourceFilesBuildAttributes;\n    }\n    interface ReviewedSourceFilesBuildAttributes {\n        branchId: number;\n        targetLanguageId: string;\n    }\n    interface BuildReviewedSourceFilesRequest {\n        branchId?: number;\n    }\n    interface ListProjectBranchesOptions extends PaginationOptions {\n        name?: string;\n        orderBy?: string;\n    }\n    interface ListReviewedSourceFilesBuildOptions extends PaginationOptions {\n        branchId?: number;\n    }\n}\n```\n\n##### sourceStrings/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class SourceStrings extends CrowdinApi {\n    uploadStringsStatus(projectId: number, uploadId: string): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    uploadStrings(projectId: number, request: SourceStringsModel.UploadStringsRequest): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    listProjectStrings(projectId: number, options?: SourceStringsModel.ListProjectStringsOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listProjectStrings(projectId: number, fileId?: number, limit?: number, offset?: number, filter?: string, denormalizePlaceholders?: BooleanInt, labelIds?: string, scope?: SourceStringsModel.Scope, croql?: string, branchId?: number, directoryId?: number): Promise<ResponseList<SourceStringsModel.String>>;\n    addString(projectId: number, request: SourceStringsModel.CreateStringRequest | SourceStringsModel.CreateStringStringsBasedRequest): Promise<ResponseObject<SourceStringsModel.String>>;\n    stringBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<SourceStringsModel.String>>;\n    getString(projectId: number, stringId: number, query?: {\n        denormalizePlaceholders: BooleanInt;\n    }): Promise<ResponseObject<SourceStringsModel.String>>;\n    deleteString(projectId: number, stringId: number): Promise<void>;\n    editString(projectId: number, stringId: number, request: PatchRequest[]): Promise<ResponseObject<SourceStringsModel.String>>;\n}\nexport declare namespace SourceStringsModel {\n    type UploadStringsType = 'auto' | 'android' | 'macosx' | 'arb' | 'csv' | 'json' | 'xliff' | 'xliff_two' | 'xlsx';\n    interface UploadStringsStatus {\n        branchId: number;\n        storageId: number;\n        fileType: UploadStringsType;\n        parserVersion: number;\n        labelIds: number[];\n        importOptions: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateStrings: boolean;\n        cleanupMode: boolean;\n        updateOption: UpdateOption;\n    }\n    interface UploadStringsRequest {\n        branchId: number;\n        storageId: number;\n        type?: UploadStringsType;\n        parserVersion?: number;\n        labelIds?: number[];\n        updateStrings?: boolean;\n        cleanupMode?: boolean;\n        importOptions?: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateOption?: UpdateOption;\n    }\n    interface ListProjectStringsOptions extends PaginationOptions {\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n        labelIds?: string;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        taskId?: number;\n        croql?: string;\n        filter?: string;\n        scope?: SourceStringsModel.Scope;\n    }\n    interface String {\n        id: number;\n        projectId: number;\n        branchId: number;\n        identifier: string;\n        text: string | PluralText;\n        type: Type;\n        context: string;\n        maxLength: number;\n        isHidden: boolean;\n        isDuplicate: boolean;\n        masterStringId: boolean;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        labelIds: number[];\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        fileId: number;\n        directoryId: number;\n        revision: number;\n        fields: Record<string, any>;\n    }\n    interface CreateStringRequest {\n        text: string | PluralText;\n        identifier?: string;\n        fileId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface CreateStringStringsBasedRequest {\n        text: string | PluralText;\n        identifier: string;\n        branchId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface PluralText {\n        zero?: string;\n        one?: string;\n        two?: string;\n        few?: string;\n        many?: string;\n        other?: string;\n    }\n    enum Type {\n        TEXT = 0,\n        ASSET = 1,\n        ICU = 2\n    }\n    type Scope = 'identifier' | 'text' | 'context';\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n}\n```\n\n##### stringComments/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringComments extends CrowdinApi {\n    listStringComments(projectId: number, options?: StringCommentsModel.ListStringCommentsOptions): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    listStringComments(projectId: number, stringId?: number, type?: StringCommentsModel.Type, targetLanguageId?: string, issueType?: StringCommentsModel.IssueType, issueStatus?: StringCommentsModel.IssueStatus): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    addStringComment(projectId: number, request: StringCommentsModel.AddStringCommentRequest): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    getStringComment(projectId: number, stringCommentId: number): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    deleteStringComment(projectId: number, stringCommentId: number): Promise<void>;\n    editStringComment(projectId: number, stringCommentId: number, request: PatchRequest[]): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    stringCommentBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringCommentsModel.StringComment>>;\n}\nexport declare namespace StringCommentsModel {\n    interface ListStringCommentsOptions extends PaginationOptions {\n        stringId?: number;\n        type?: Type;\n        targetLanguageId?: string;\n        issueType?: IssueType;\n        issueStatus?: IssueStatus;\n        orderBy?: string;\n    }\n    interface StringComment {\n        id: number;\n        isShared?: boolean;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: StringModel;\n        projectId: number;\n        languageId: string;\n        type: Type;\n        issueType: IssueType;\n        issueStatus: IssueStatus;\n        resolverId: number;\n        senderOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolverOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolver: User;\n        resolvedAt: string;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface StringModel {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface AddStringCommentRequest {\n        stringId: number;\n        text: string;\n        targetLanguageId: string;\n        type: Type;\n        isShared?: boolean;\n        issueType?: IssueType;\n    }\n    type Type = 'comment' | 'issue';\n    type IssueType = 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type IssueStatus = 'unresolved' | 'resolved';\n}\n```\n\n##### stringCorrections/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class StringCorrections extends CrowdinApi {\n    listStringCorrections(projectId: number, options: StringCorrectionsModel.ListStringCorrectionsParams): Promise<ResponseList<StringCorrectionsModel.StringCorrection>>;\n    addStringCorrection(projectId: number, request: StringCorrectionsModel.AddStringCorrectionRequest): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrections(projectId: number, stringId: number): Promise<void>;\n    getStringCorrection(projectId: number, correctionId: number, params?: {\n        denormalizePlaceholders?: BooleanInt;\n    }): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    restoreStringCorrection(projectId: number, correctionId: number): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrection(projectId: number, correctionId: number): Promise<void>;\n}\nexport declare namespace StringCorrectionsModel {\n    interface ListStringCorrectionsParams extends PaginationOptions {\n        stringId: number;\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n    }\n    interface StringCorrection {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: {\n            id: number;\n            username: string;\n            fullName: string;\n            avatarUrl: string;\n        };\n        createdAt: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n    interface AddStringCorrectionRequest {\n        stringId: number;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n    }\n}\n```\n\n##### stringTranslations/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringTranslations extends CrowdinApi {\n    listTranslationApprovals(projectId: number, options?: StringTranslationsModel.ListTranslationApprovalsOptions): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    listTranslationApprovals(projectId: number, stringId?: number, languageId?: string, translationId?: number, limit?: number, offset?: number, fileId?: number, labelIds?: string, excludeLabelIds?: string): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    addApproval(projectId: number, request: StringTranslationsModel.AddApprovalRequest): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    removeStringApprovals(projectId: number, stringId: number): Promise<void>;\n    approvalInfo(projectId: number, approvalId: number): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    approvalBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    removeApproval(projectId: number, approvalId: number): Promise<void>;\n    listLanguageTranslations(projectId: number, languageId: string, options?: StringTranslationsModel.ListLanguageTranslationsOptions): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    listLanguageTranslations(projectId: number, languageId: string, stringIds?: string, fileId?: number, limit?: number, offset?: number, labelIds?: string, denormalizePlaceholders?: BooleanInt, croql?: string): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    translationAlignment(projectId: number, request: StringTranslationsModel.TranslationAlignmentRequest): Promise<ResponseObject<StringTranslationsModel.TranslationAlignmentResponse>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, options?: StringTranslationsModel.ListStringTranslationsOptions): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, limit?: number, offset?: number, denormalizePlaceholders?: BooleanInt): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    addTranslation(projectId: number, request: StringTranslationsModel.AddStringTranslationRequest): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    deleteAllTranslations(projectId: number, stringId: number, languageId?: string): Promise<void>;\n    translationInfo(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    restoreTranslation(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    translationBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    deleteTranslation(projectId: number, translationId: number): Promise<void>;\n    listTranslationVotes(projectId: number, options?: StringTranslationsModel.ListTranslationVotesOptions): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    listTranslationVotes(projectId: number, stringId?: number, languageId?: string, translationId?: number, labelIds?: string, excludeLabelIds?: string, limit?: number, offset?: number): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    addVote(projectId: number, request: StringTranslationsModel.AddVoteRequest): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    voteInfo(projectId: number, voteId: number): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    cancelVote(projectId: number, voteId: number): Promise<void>;\n}\nexport declare namespace StringTranslationsModel {\n    interface ListTranslationApprovalsOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Approval {\n        id: number;\n        user: User;\n        translationId: number;\n        stringId: number;\n        languageId: string;\n        createdAt: string;\n    }\n    interface AddApprovalRequest {\n        translationId: number;\n    }\n    interface StringTranslation {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: User;\n        rating: number;\n        provider: string;\n        isPreTranslated: boolean;\n        createdAt: string;\n    }\n    interface ListLanguageTranslationsOptions extends PaginationOptions {\n        stringIds?: string;\n        fileId?: number;\n        labelIds?: string;\n        denormalizePlaceholders?: BooleanInt;\n        croql?: string;\n        approvedOnly?: BooleanInt;\n        passedWorkflow?: BooleanInt;\n        orderBy?: string;\n        branchId?: number;\n        minApprovalCount?: number;\n        directoryId?: number;\n    }\n    interface PlainLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface PluralLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        plurals: Plural[];\n    }\n    interface IcuLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface Plural {\n        translationId: number;\n        text: string;\n        pluralForm: string;\n        user: User;\n        createdAt: string;\n    }\n    interface TranslationAlignmentRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        text: string;\n    }\n    interface TranslationAlignmentResponse {\n        words: {\n            text: string;\n            alignments: {\n                sourceWord: string;\n                sourceLemma: string;\n                targetWord: string;\n                targetLemma: string;\n                match: number;\n                probability: number;\n            }[];\n        }[];\n    }\n    interface AddStringTranslationRequest {\n        stringId: number;\n        languageId: string;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n        addToTm?: boolean;\n    }\n    interface ListTranslationVotesOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n    }\n    interface Vote {\n        id: number;\n        user: User;\n        translationId: number;\n        votedAt: string;\n        mark: Mark;\n    }\n    interface AddVoteRequest {\n        mark: Mark;\n        translationId: number;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    type Mark = 'up' | 'down';\n    interface ListStringTranslationsOptions extends PaginationOptions {\n        denormalizePlaceholders?: BooleanInt;\n        orderBy?: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n}\n```\n\n##### tasks/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class Tasks extends CrowdinApi {\n    listTasks(projectId: number, options?: TasksModel.ListTasksOptions): Promise<ResponseList<TasksModel.Task>>;\n    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;\n    addTask(projectId: number, request: TasksModel.CreateTaskRequest): Promise<ResponseObject<TasksModel.Task>>;\n    exportTaskStrings(projectId: number, taskId: number): Promise<ResponseObject<DownloadLink>>;\n    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;\n    deleteTask(projectId: number, taskId: number): Promise<void>;\n    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;\n    listTasksComments(projectId: number, taskId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskComment>>;\n    addTaskComment(projectId: number, taskId: number, request: TasksModel.CreateTaskCommentRequest): Promise<ResponseObject<TasksModel.TaskComment>>;\n    getTaskComment(projectId: number, taskId: number, commentId: number): Promise<ResponseObject<TasksModel.TaskComment>>;\n    deleteTaskComment(projectId: number, taskId: number, commentId: number): Promise<void>;\n    editTaskComment(projectId: number, taskId: number, commentId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskComment>>;\n    listUserTasks(options?: TasksModel.ListUserTasksOptions): Promise<ResponseList<TasksModel.UserTask>>;\n    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;\n    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;\n    listTaskSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskSettingsTemplate>>;\n    addTaskSettingsTemplate(projectId: number, request: TasksModel.AddTaskSettingsTemplate): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    getTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    deleteTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<void>;\n    editTaskSettingsTemplate(projectId: number, taskSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n}\nexport declare namespace TasksModel {\n    interface Task {\n        id: number;\n        projectId: number;\n        creatorId: number;\n        type: Type | TypeVendor;\n        status: Status;\n        title: string;\n        assignees: Assignee[];\n        assignedTeams: AssignedTeam[];\n        progress: Progress;\n        translateProgress: Progress;\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        description: string;\n        translationUrl: string;\n        webUrl: string;\n        wordsCount: number;\n        commentsCount: number;\n        deadline: string;\n        startedAt: string;\n        resolvedAt: string;\n        timeRange: string;\n        workflowStepId: number;\n        buyUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        labelIds: number[];\n        excludeLabelIds: number[];\n        precedingTaskId: number;\n        filesCount: number;\n        fileIds: number[];\n        branchIds: number[];\n        vendor: string;\n        fields: Record<string, any>;\n    }\n    interface ListUserTasksOptions extends PaginationOptions {\n        status?: Status;\n        isArchived?: BooleanInt;\n        orderBy?: string;\n    }\n    interface UserTask extends Task {\n        isArchived: boolean;\n    }\n    type CreateTaskRequest = CreateTaskEnterpriseByBranchIds | CreateTaskEnterpriseByFileIds | CreateTaskEnterpriseByStringIds | CreateTaskEnterpriseVendorByBranchIds | CreateTaskEnterpriseVendorByFileIds | CreateTaskEnterpriseVendorByStringIds | CreateTaskEnterprisePendingTask | CreateTaskByFileIds | CreateTaskByStringIds | CreateTaskByBranchIds | CreateTaskByFileIdsLanguageService | CreateTaskByStringIdsLanguageService | CreateTaskByBranchIdsLanguageService | CreateTaskVendorOhtByFileIds | CreateTaskVendorOhtByStringIds | CreateTaskVendorOhtByBranchIds | CreateTaskVendorGengoByFileIds | CreateTaskVendorGengoByStringIds | CreateTaskVendorGengoByBranchIds | CreateTaskVendorManualByFileIds | CreateTaskVendorManualByStringIds | CreateTaskVendorManualByBranchIds | CreateTaskPendingTask | CreateTaskPendingTaskLanguageService | CreateTaskPendingTaskVendorManual;\n    interface CreateTaskEnterpriseByBranchIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        branchIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    interface CreateTaskEnterpriseByStringIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        stringIds: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    type CreateTaskEnterpriseVendorByStringIds = Omit<CreateTaskEnterpriseByStringIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseVendorByBranchIds = Omit<CreateTaskEnterpriseByBranchIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseByFileIds = Omit<CreateTaskEnterpriseByBranchIds, 'branchIds'> & {\n        fileIds: number[];\n    };\n    type CreateTaskEnterpriseVendorByFileIds = Omit<CreateTaskEnterpriseByFileIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    interface CreateTaskEnterprisePendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        deadline?: string;\n    }\n    interface CreateTaskByFileIds {\n        title: string;\n        languageId: string;\n        type: Type;\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIds = Omit<CreateTaskByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number;\n    };\n    type CreateTaskByBranchIds = Omit<CreateTaskByFileIds, 'fileIds'> & {\n        branchIds: number;\n    };\n    interface CreateTaskByFileIdsLanguageService {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'crowdin_language_service';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskByBranchIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorOhtByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'oht';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: Expertise;\n        editService?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorOhtByStringIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorOhtByBranchIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorGengoByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor.TRANSLATE_BY_VENDOR;\n        vendor: 'gengo';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: 'standard' | 'pro';\n        tone?: Tone;\n        purpose?: Purpose;\n        customerMessage?: string;\n        usePreferred?: boolean;\n        editService?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorGengoByStringIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorGengoByBranchIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorManualByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'alconost' | 'babbleon' | 'tomedes' | 'e2f' | 'write_path_admin' | 'inlingo' | 'acclaro' | 'translate_by_humans' | 'lingo24' | 'assertio_language_services' | 'gte_localize' | 'kettu_solutions' | 'languageline_solutions';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorManualByStringIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorManualByBranchIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskPendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskLanguageService {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: 'crowdin_language_service';\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskVendorManual {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: CreateTaskVendorManualByFileIds['vendor'];\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskAssignee {\n        id: number;\n        wordsCount?: number;\n    }\n    type Status = 'todo' | 'in_progress' | 'done' | 'closed';\n    type RequestStatus = Extract<Status, 'todo' | 'in_progress'>;\n    enum Type {\n        TRANSLATE = 0,\n        PROOFREAD = 1\n    }\n    enum TypeVendor {\n        TRANSLATE_BY_VENDOR = 2,\n        PROOFREAD_BY_VENDOR = 3\n    }\n    interface Assignee {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n        wordsCount: number;\n        wordsLeft: number;\n    }\n    interface AssignedTeam {\n        id: number;\n        wordsCount: number;\n    }\n    interface Progress {\n        total: number;\n        done: number;\n        percent: number;\n    }\n    type Expertise = 'standard' | 'mobile-applications' | 'software-it' | 'gaming-video-games' | 'technical-engineering' | 'marketing-consumer-media' | 'business-finance' | 'legal-certificate' | 'medical' | 'ad-words-banners' | 'automotive-aerospace' | 'scientific' | 'scientific-academic' | 'tourism' | 'training-employee-handbooks' | 'forex-crypto';\n    enum TranslatedExpertise {\n        ECONOMY = \"P\",\n        PROFESSIONAL = \"T\",\n        PREMIUM = \"R\"\n    }\n    type Tone = '' | 'Informal' | 'Friendly' | 'Business' | 'Formal' | 'other';\n    type Purpose = 'standard' | 'Personal use' | 'Business' | 'Online content' | 'App/Web localization' | 'Media content' | 'Semi-technical' | 'other';\n    type Subject = 'general' | 'accounting_finance' | 'aerospace_defence' | 'architecture' | 'art' | 'automotive' | 'certificates_diplomas_licences_cv_etc' | 'chemical' | 'civil_engineering_construction' | 'corporate_social_responsibility' | 'cosmetics' | 'culinary' | 'electronics_electrical_engineering' | 'energy_power_generation_oil_gas' | 'environment' | 'fashion' | 'games_viseogames_casino' | 'general_business_commerce' | 'history_archaeology' | 'information_technology' | 'insurance' | 'internet_e-commerce' | 'legal_documents_contracts' | 'literary_translations' | 'marketing_advertising_material_public_relations' | 'matematics_and_physics' | 'mechanical_manufacturing' | 'media_journalism_publishing' | 'medical_pharmaceutical' | 'music' | 'private_correspondence_letters' | 'religion' | 'science' | 'shipping_sailing_maritime' | 'social_science' | 'telecommunications' | 'travel_tourism';\n    interface ListTasksOptions extends PaginationOptions {\n        status?: TasksModel.Status;\n        assigneeId?: number;\n        orderBy?: string;\n    }\n    interface TaskSettingsTemplate {\n        id: number;\n        name: string;\n        config: TaskSettingsTemplateConfig;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTaskSettingsTemplate {\n        name: string;\n        config: TaskSettingsTemplateConfig;\n    }\n    interface TaskSettingsTemplateConfig {\n        languages: {\n            languageId?: string;\n            userIds?: number[];\n            teamIds?: number[];\n        }[];\n    }\n    interface TaskComment {\n        id: number;\n        userId: number;\n        taskId: number;\n        text: string;\n        timeSpent: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTaskCommentRequest {\n        text?: string;\n        timeSpent?: number;\n    }\n}\n```\n\n##### teams/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Teams extends CrowdinApi {\n    listTeamProjectPermissions(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    editTeamProjectPermissions(teamId: number, request: PatchRequest[]): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    addTeamToProject(projectId: number, request: TeamsModel.AddTeamToProjectRequest): Promise<TeamsModel.ProjectTeamResources>;\n    listTeams(options?: TeamsModel.ListTeamsOptions): Promise<ResponseList<TeamsModel.Team>>;\n    listTeams(limit?: number, offset?: number): Promise<ResponseList<TeamsModel.Team>>;\n    addTeam(request: TeamsModel.AddTeamRequest): Promise<ResponseObject<TeamsModel.Team>>;\n    getTeam(teamId: number): Promise<ResponseObject<TeamsModel.Team>>;\n    deleteTeam(teamId: number): Promise<void>;\n    editTeam(teamId: number, request: PatchRequest[]): Promise<ResponseObject<TeamsModel.Team>>;\n    teamMembersList(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.TeamMember>>;\n    teamMembersList(teamId: number, limit?: number, offset?: number): Promise<ResponseList<TeamsModel.TeamMember>>;\n    addTeamMembers(teamId: number, request: TeamsModel.AddTeamMembersRequest): Promise<TeamsModel.AddTeamMembersResponse>;\n    deleteAllTeamMembers(teamId: number): Promise<void>;\n    deleteTeamMember(teamId: number, memberId: number): Promise<void>;\n}\nexport declare namespace TeamsModel {\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface AddTeamToProjectRequest {\n        teamId: number;\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ListTeamsOptions extends PaginationOptions {\n        search?: string;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        orderBy?: string;\n    }\n    interface ProjectTeamResources {\n        skipped: ProjectTeamResource;\n        added: ProjectTeamResource;\n    }\n    interface ProjectTeamResource {\n        id: number;\n        hasManagerAccess: boolean;\n        hasDeveloperAccess: boolean;\n        hasAccessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        roles: ProjectRole[];\n    }\n    interface Permissions {\n        [lang: string]: {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n    interface Team {\n        id: number;\n        name: string;\n        totalMembers: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTeamRequest {\n        name: string;\n    }\n    interface TeamMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        avatarUrl: string;\n        addedAt: string;\n    }\n    interface AddTeamMembersRequest {\n        userIds: number[];\n    }\n    interface AddTeamMembersResponse {\n        skipped: ResponseObject<TeamMember>[];\n        added: ResponseObject<TeamMember>[];\n        pagination: Pagination;\n    }\n}\n```\n\n##### translationMemory/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class TranslationMemory extends CrowdinApi {\n    listTm(options?: TranslationMemoryModel.ListTMsOptions): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    listTm(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    addTm(request: TranslationMemoryModel.AddTranslationMemoryRequest): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    getTm(tmId: number): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    deleteTm(tmId: number): Promise<void>;\n    editTm(tmId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    listTmSegments(tmId: number, options?: TranslationMemoryModel.ListSegmentsOptions): Promise<ResponseList<TranslationMemoryModel.TMSegment>>;\n    addTmSegment(tmId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    clearTm(tmId: number): Promise<void>;\n    exportTm(tmId: number, request?: TranslationMemoryModel.ExportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    checkExportStatus(tmId: number, exportId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    downloadTm(tmId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    concordanceSearch(projectId: number, request: TranslationMemoryModel.ConcordanceSearchRequest): Promise<ResponseList<TranslationMemoryModel.ConcordanceSearchResponse>>;\n    importTm(tmId: number, request: TranslationMemoryModel.ImportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    checkImportStatus(tmId: number, importId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    getTmSegment(tmId: number, segmentId: number): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegment(tmId: number, segmentId: number): Promise<void>;\n    editTmSegment(tmId: number, segmentId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegmentRecord(tmId: number, segmentId: number, recordId: number): Promise<void>;\n    editTmSegmentRecord(tmId: number, segmentId: number, recordId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    addTmSegmentRecords(tmId: number, segmentId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n}\nexport declare namespace TranslationMemoryModel {\n    interface TranslationMemory {\n        id: number;\n        groupId: number;\n        userId: number;\n        name: string;\n        languageId: string;\n        languageIds: string[];\n        segmentsCount: number;\n        defaultProjectIds: number[];\n        projectIds: number[];\n        createdAt: string;\n        webUrl: string;\n    }\n    interface AddTranslationMemoryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    interface ConcordanceSearchRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        autoSubstitution: boolean;\n        minRelevant: number;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        tm: TranslationMemory;\n        recordId: number;\n        source: string;\n        target: string;\n        relevant: number;\n        substituted: string;\n        updatedAt: string;\n    }\n    interface ExportTranslationMemoryRequest {\n        sourceLanguageId?: number;\n        targetLanguageId?: number;\n        format?: Format;\n    }\n    interface ImportTranslationMemoryRequest {\n        storageId: number;\n        firstLineContainsHeader?: boolean;\n        scheme?: Scheme;\n    }\n    interface ExportTranslationMemoryAttribute {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        format: string;\n    }\n    interface ImportTranslationMemoryAttribute {\n        tmId: number;\n        storageId: number;\n        firstLineContainsHeader: number;\n        scheme: Scheme;\n    }\n    type Format = 'tmx' | 'csv' | 'xlsx';\n    interface Scheme {\n        [key: string]: number;\n    }\n    interface ListTMsOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListSegmentsOptions extends PaginationOptions {\n        croql?: string;\n        orderBy?: string;\n    }\n    interface TMSegment {\n        id: number;\n        records: TMSegmentRecord[];\n    }\n    interface TMSegmentRecord {\n        id: number;\n        languageId: string;\n        text: string;\n        usageCount: number;\n        createdBy: number;\n        updatedBy: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTMSegment {\n        records: AddTMSegmentRecord[];\n    }\n    interface AddTMSegmentRecord {\n        languageId: string;\n        text: string;\n    }\n}\n```\n\n##### translationStatus/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class TranslationStatus extends CrowdinApi {\n    getBranchProgress(projectId: number, branchId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getBranchProgress(projectId: number, branchId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getProjectProgress(projectId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getProjectProgress(projectId: number, limit?: number, offset?: number, languageIds?: string): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    listQaCheckIssues(projectId: number, options?: TranslationStatusModel.ListQaCheckIssuesOptions): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n    listQaCheckIssues(projectId: number, limit?: number, offset?: number, category?: TranslationStatusModel.Category, validation?: TranslationStatusModel.Validation, languageIds?: string): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n}\nexport declare namespace TranslationStatusModel {\n    interface LanguageProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        eTag: string;\n        languageId: string;\n        language: LanguagesModel.Language;\n    }\n    interface FileProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        branchId: number;\n        fileId: number;\n        eTag: string;\n    }\n    interface Words {\n        total: number;\n        translated: number;\n        approved: number;\n        preTranslateAppliedTo: number;\n    }\n    type Category = 'empty' | 'variables' | 'tags' | 'punctuation' | 'symbol_register' | 'spaces' | 'size' | 'special_symbols' | 'wrong_translation' | 'spellcheck' | 'icu';\n    type Validation = 'empty_string_check' | 'empty_suggestion_check' | 'max_length_check' | 'tags_check' | 'mismatch_ids_check' | 'cdata_check' | 'specials_symbols_check' | 'leading_newlines_check' | 'trailing_newlines_check' | 'leading_spaces_check' | 'trailing_spaces_check' | 'multiple_spaces_check' | 'custom_blocked_variables_check' | 'highest_priority_custom_variables_check' | 'highest_priority_variables_check' | 'c_variables_check' | 'python_variables_check' | 'rails_variables_check' | 'java_variables_check' | 'dot_net_variables_check' | 'twig_variables_check' | 'php_variables_check' | 'freemarker_variables_check' | 'lowest_priority_variable_check' | 'lowest_priority_custom_variables_check' | 'punctuation_check' | 'spaces_before_punctuation_check' | 'spaces_after_punctuation_check' | 'non_breaking_spaces_check' | 'capitalize_check' | 'multiple_uppercase_check' | 'parentheses_check' | 'entities_check' | 'escaped_quotes_check' | 'wrong_translation_issue_check' | 'spellcheck' | 'icu_check';\n    interface ListQaCheckIssuesOptions extends PaginationOptions {\n        category?: Category | Category[];\n        validation?: Validation | Validation[];\n        languageIds?: string;\n    }\n    interface QaCheck {\n        stringId: number;\n        languageId: string;\n        category: Category;\n        categoryDescription: string;\n        validation: Validation;\n        validationDescription: string;\n        pluralId: number;\n        text: string;\n    }\n    interface GetProjectProgressOptions extends PaginationOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### translations/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Translations extends CrowdinApi {\n    listPreTranslations(projectId: number, options?: PaginationOptions): Promise<ResponseList<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    preTranslationStatus(projectId: number, preTranslationId: string): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    applyPreTranslation(projectId: number, request: TranslationsModel.PreTranslateRequest | TranslationsModel.PreTranslateStringsRequest): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    editPreTranslation(projectId: number, preTranslationId: string, request: PatchRequest[]): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    getPreTranslationReport(projectId: number, preTranslationId: string): Promise<ResponseObject<TranslationsModel.PreTranslationReport>>;\n    buildProjectDirectoryTranslation(projectId: number, directoryId: number, request?: TranslationsModel.BuildProjectDirectoryTranslationRequest): Promise<ResponseObject<TranslationsModel.BuildProjectDirectoryTranslationResponse>>;\n    buildProjectFileTranslation(projectId: number, fileId: number, request: TranslationsModel.BuildProjectFileTranslationRequest, eTag?: string): Promise<ResponseObject<TranslationsModel.BuildProjectFileTranslationResponse>>;\n    listProjectBuilds(projectId: number, options?: TranslationsModel.ListProjectBuildsOptions): Promise<ResponseList<TranslationsModel.Build>>;\n    listProjectBuilds(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationsModel.Build>>;\n    buildProject(projectId: number, request?: TranslationsModel.BuildRequest | TranslationsModel.PseudoBuildRequest): Promise<ResponseObject<TranslationsModel.Build>>;\n    uploadTranslation(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationResponse>>;\n    uploadTranslationStrings(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationStringsRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationStringsResponse>>;\n    downloadTranslations(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n    checkBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<TranslationsModel.Build>>;\n    cancelBuild(projectId: number, buildId: number): Promise<void>;\n    exportProjectTranslation(projectId: number, request: TranslationsModel.ExportProjectTranslationRequest): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace TranslationsModel {\n    interface PreTranslateRequest {\n        languageIds: string[];\n        fileIds: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId?: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface PreTranslateStringsRequest {\n        languageIds: string[];\n        branchIds?: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface BuildProjectDirectoryTranslationRequest {\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        preserveFolderHierarchy?: boolean;\n        exportStringsThatPassedWorkflow?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportApprovedOnly?: boolean;\n    }\n    interface BuildProjectDirectoryTranslationResponse {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    type BuildStatus = 'created' | 'inProgress' | 'canceled' | 'failed' | 'finished';\n    interface BuildProjectFileTranslationRequest {\n        targetLanguageId: string;\n        exportAsXliff?: boolean;\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface BuildProjectFileTranslationResponse extends DownloadLink {\n        etag: string;\n    }\n    interface PreTranslationStatusAttributes {\n        languageIds: string[];\n        fileIds: number[];\n        branchIds: number[];\n        method: Method;\n        autoApproveOption: AutoApproveOption;\n        duplicateTranslations: boolean;\n        skipApprovedTranslations: boolean;\n        translateUntranslatedOnly: boolean;\n        translateWithPerfectMatchOnly: boolean;\n    }\n    type Method = 'tm' | 'mt' | 'ai';\n    type AutoApproveOption = 'all' | 'exceptAutoSubstituted' | 'perfectMatchOnly' | 'none';\n    type CharTransformation = 'asian' | 'european' | 'arabic' | 'cyrillic';\n    interface Build {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        attributes: Attribute;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    interface Attribute {\n        branchId: number;\n        directoryId: number;\n        targetLanguageIds: string[];\n        skipUntranslatedStrings: boolean;\n        skipUntranslatedFiles: boolean;\n        exportApprovedOnly: boolean;\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n    }\n    interface BuildRequest {\n        branchId?: number;\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface PseudoBuildRequest {\n        pseudo: boolean;\n        branchId?: number;\n        prefix?: string;\n        suffix?: string;\n        lengthTransformation?: number;\n        charTransformation?: CharTransformation;\n    }\n    interface UploadTranslationRequest {\n        storageId: number;\n        fileId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationStringsRequest {\n        storageId: number;\n        branchId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        fileId: number;\n    }\n    interface UploadTranslationStringsResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        branchId: number;\n    }\n    interface ExportProjectTranslationRequest {\n        targetLanguageId: string;\n        format?: string;\n        labelIds?: number[];\n        branchIds?: number[];\n        directoryIds?: number[];\n        fileIds?: number[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface ListProjectBuildsOptions extends PaginationOptions {\n        branchId?: number;\n    }\n    interface PreTranslationReport {\n        languages: TargetLanguage[];\n        preTranslateType: Method;\n    }\n    interface TargetLanguage {\n        id: string;\n        files: TargetLanguageFile[];\n        skipped: SkippedInfo;\n        skippedQaCheckCategories: ProjectsGroupsModel.CheckCategories;\n    }\n    interface TargetLanguageFile {\n        id: string;\n        statistics: TargetLanguageFileStatistics;\n    }\n    interface TargetLanguageFileStatistics {\n        phrases: number;\n        words: number;\n    }\n    interface SkippedInfo {\n        [key: string]: any;\n    }\n}\n```\n\n##### uploadStorage/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class UploadStorage extends CrowdinApi {\n    listStorages(options?: PaginationOptions): Promise<ResponseList<UploadStorageModel.Storage>>;\n    listStorages(limit?: number, offset?: number): Promise<ResponseList<UploadStorageModel.Storage>>;\n    addStorage(fileName: string, request: any, contentType?: string): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    getStorage(storageId: number): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    deleteStorage(storageId: number): Promise<void>;\n}\nexport declare namespace UploadStorageModel {\n    interface Storage {\n        id: number;\n        fileName: string;\n    }\n}\n```\n\n##### users/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nimport { TeamsModel } from '../teams';\nexport declare class Users extends CrowdinApi {\n    listProjectMembers(projectId: number, options?: UsersModel.ListProjectMembersOptions): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    listProjectMembers(projectId: number, search?: string, role?: UsersModel.Role, languageId?: string, limit?: number, offset?: number): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    addProjectMember(projectId: number, request: UsersModel.AddProjectMemberRequest): Promise<UsersModel.AddProjectMemberResponse>;\n    getProjectMemberPermissions(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    replaceProjectMemberPermissions(projectId: number, memberId: number, request?: UsersModel.ReplaceProjectMemberRequest): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    deleteMemberFromProject(projectId: number, memberId: number): Promise<void>;\n    listUsers(options?: UsersModel.ListUsersOptions): Promise<ResponseList<UsersModel.User>>;\n    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;\n    inviteUser(request: UsersModel.InviteUserRequest): Promise<ResponseObject<UsersModel.User>>;\n    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;\n    deleteUser(userId: number): Promise<void>;\n    editUser(userId: number, request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;\n    editAuthenticatedUser(request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    listUserProjectPermissions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    editUserProjectPermissions(userId: number, request: PatchRequest[]): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    listUserProjectContributions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n}\nexport declare namespace UsersModel {\n    interface ListProjectMembersOptions extends PaginationOptions {\n        search?: string;\n        role?: Role;\n        languageId?: string;\n        workflowStepId?: number;\n        orderBy?: string;\n    }\n    interface ListUsersOptions extends PaginationOptions {\n        status?: Status;\n        search?: string;\n        twoFactor?: TwoFactor;\n        orderBy?: string;\n        organizationRoles?: OrganizationRoles[];\n        teamId?: number;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        lastSeenFrom?: string;\n        lastSeenTo?: string;\n    }\n    interface InviteUserRequest {\n        email: string;\n        firstName?: string;\n        lastName?: string;\n        timezone?: string;\n        adminAccess?: boolean;\n    }\n    interface User {\n        id: number;\n        username: string;\n        email: string;\n        firstName: string;\n        lastName: string;\n        status: Status;\n        avatarUrl: string;\n        fields: Record<string, any>;\n        createdAt: string;\n        lastSeen: string;\n        twoFactor: TwoFactor;\n        isAdmin: boolean;\n        timezone: string;\n        emailVerified: string;\n    }\n    type Status = 'active' | 'pending' | 'blocked';\n    type TwoFactor = 'enabled' | 'disabled';\n    type OrganizationRoles = 'admin' | 'manager' | 'vendor' | 'client';\n    interface ProjectMember {\n        id: number;\n        username: string;\n        fullName: string;\n        role: Role;\n        permissions: Permissions;\n        avatarUrl: string;\n        joinedAt: string;\n        timezone: string;\n        roles: ProjectRole[];\n    }\n    interface EnterpriseProjectMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        isManager: boolean;\n        isDeveloperr: boolean;\n        managerOfGroup: Group;\n        accessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        givenAccessAt: string;\n        roles: ProjectRole[];\n    }\n    interface Group {\n        id: number;\n        name: string;\n    }\n    type Role = 'all' | 'owner' | 'manager' | 'proofreader' | 'translator' | 'blocked';\n    type LanguageRole = 'proofreader' | 'translator' | 'denied';\n    interface AddProjectMemberRequest {\n        userIds?: number[];\n        usernames?: string[];\n        emails?: string[];\n        managerAccess?: boolean;\n        roles?: ProjectRole[];\n        developerAccess?: boolean;\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface AddProjectMemberResponse {\n        skipped: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        added: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        pagination: Pagination;\n    }\n    interface ReplaceProjectMemberRequest {\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n        teams: TeamsModel.Team[];\n    }\n    interface Contributions {\n        id: number;\n        translated: Contribution;\n        approved: Contribution;\n        voted: Contribution;\n        commented: Contribution;\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface Contribution {\n        strings: number;\n        words?: number;\n    }\n    interface Permissions {\n        [lang: string]: string | {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n}\n```\n\n##### vendors/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Vendors extends CrowdinApi {\n    listVendors(options?: PaginationOptions): Promise<ResponseList<VendorsModel.Vendor>>;\n    listVendors(limit?: number, offset?: number): Promise<ResponseList<VendorsModel.Vendor>>;\n}\nexport declare namespace VendorsModel {\n    interface Vendor {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### webhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Webhooks extends CrowdinApi {\n    listWebhooks(projectId: number, options?: PaginationOptions): Promise<ResponseList<WebhooksModel.Webhook>>;\n    listWebhooks(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WebhooksModel.Webhook>>;\n    addWebhook(projectId: number, request: WebhooksModel.AddWebhookRequest): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    getWebhook(projectId: number, webhookId: number): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    deleteWebhook(projectId: number, webhookId: number): Promise<void>;\n    editWebhook(projectId: number, webhookId: number, request: PatchRequest[]): Promise<ResponseObject<WebhooksModel.Webhook>>;\n}\nexport declare namespace WebhooksModel {\n    interface Webhook {\n        id: number;\n        projectId: number;\n        name: string;\n        url: string;\n        events: Event[];\n        headers: Record<string, string>;\n        payload: Record<string, any>;\n        isActive: boolean;\n        batchingEnabled: boolean;\n        requestType: RequestType;\n        contentType: ContentType;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddWebhookRequest {\n        name: string;\n        url: string;\n        events: Event[];\n        requestType: RequestType;\n        isActive?: boolean;\n        batchingEnabled?: boolean;\n        contentType?: ContentType;\n        headers?: Record<string, string>;\n        payload?: Record<string, any>;\n    }\n    type ContentType = 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded';\n    type Event = 'file.added' | 'file.updated' | 'file.reverted' | 'file.deleted' | 'file.translated' | 'file.approved' | 'project.translated' | 'project.approved' | 'project.built' | 'translation.updated' | 'string.added' | 'string.updated' | 'string.deleted' | 'stringComment.created' | 'stringComment.updated' | 'stringComment.deleted' | 'stringComment.restored' | 'suggestion.added' | 'suggestion.updated' | 'suggestion.deleted' | 'suggestion.approved' | 'suggestion.disapproved' | 'task.added' | 'task.statusChanged' | 'task.deleted';\n    type RequestType = 'POST' | 'GET';\n}\n```\n\n##### workflows/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Workflows extends CrowdinApi {\n    listWorkflowSteps(projectId: number, options?: PaginationOptions): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    listWorkflowSteps(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    getWorkflowStep(projectId: number, stepId: number): Promise<ResponseObject<WorkflowModel.WorkflowStep>>;\n    listStringsOnTheWorkflowStep(projectId: number, stepId: number, options?: WorkflowModel.ListStringsOntheWorkflowStepOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listWorkflowTemplates(options?: WorkflowModel.ListWorkflowTemplatesOptions): Promise<ResponseList<WorkflowModel.Workflow>>;\n    listWorkflowTemplates(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.Workflow>>;\n    getWorkflowTemplateInfo(templateId: number): Promise<ResponseObject<WorkflowModel.Workflow>>;\n}\nexport declare namespace WorkflowModel {\n    interface WorkflowStep {\n        id: number;\n        title: string;\n        type: string;\n        languages: string[];\n        config: {\n            assignees: {\n                [language: string]: number[];\n            };\n        };\n    }\n    interface ListWorkflowTemplatesOptions extends PaginationOptions {\n        groupId?: number;\n    }\n    interface ListStringsOntheWorkflowStepOptions extends PaginationOptions {\n        languageIds?: string;\n        orderBy?: string;\n        status?: 'todo' | 'done' | 'pending' | 'incomplete' | 'need_review';\n    }\n    interface Workflow {\n        id: number;\n        title: string;\n        description: string;\n        groupId: number;\n        isDefault: boolean;\n        webUrl: string;\n        steps: {\n            id: number;\n            languages: string[];\n            assignees: number[];\n            vendorId: number;\n            config: {\n                minRelevant: number;\n                autoSubstitution: boolean;\n            };\n            mtId: number;\n        }[];\n    }\n}\n```\n\n<!-- CROWDIN_API_CLIENT_TYPES_END -->\n\n## Frontend Development\n\n### Crowdin Apps JS API\n\n#### Official Documentation\n\nThe `AP` object provides the Crowdin Apps JS API for interacting with the Crowdin application context.\n\n**📚 Complete API Reference:** https://support.crowdin.com/developer/crowdin-apps-js/\n\n**⚠️ CRITICAL**: Only use methods and types from the Crowdin Apps JS API definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n#### Common Examples\n\n**Get Context:**\n```javascript\n// Get application context\nAP.getContext(function(context) {\n    console.log('Project ID:', context.project_id);\n});\n```\n\n**Modify Translations:**\n```javascript\n// Set translation\nAP.editor.setTranslation('New translation');\n\n// Append to translation\nAP.editor.appendTranslation(' - additional text');\n\n// Clear translation\nAP.editor.clearTranslation();\n```\n\n**Event Listeners:**\n```javascript\n// Listen to theme change\nAP.events.on('theme.changed', function(theme) {\n    document.body.className = theme + '-theme';\n});\n```\n\n**UI Messages:**\n```javascript\n// Show messages\nAP.editor.successMessage('Success!');\nAP.editor.errorMessage('Error occurred');\nAP.editor.noticeMessage('Notice');\n```\n\n#### Best Practices\n\n1. **Always check AP availability**\n   ```javascript\n   if (window.AP) {\n       AP.getContext(function(context) {\n           // Your code\n       });\n   }\n   ```\n\n2. **Get JWT token for backend calls**\n   ```javascript\n   AP.getJwtToken(function(token) {\n       fetch('/api/endpoint?jwt=' + token)\n           .then(response => response.json());\n   });\n   ```\n\n3. **Handle errors gracefully**\n   ```javascript\n   try {\n       AP.editor.setTranslation(text);\n       AP.editor.successMessage('Updated!');\n   } catch (error) {\n       AP.editor.errorMessage('Failed to update');\n   }\n   ```\n\n4. **Use event listeners for real-time updates**\n   ```javascript\n   AP.events.on('string.change', function(data) {\n       updateUI(data.string);\n   });\n   ```\n\n#### Complete Type Definitions\n\n##### Global AP Object Structure\n\n```typescript\ndeclare namespace AP {\n    // Global Actions\n    function getContext(callback: (context: Context) => void): void;\n    function getJwtToken(callback: (token: string) => void): void;\n    function getTheme(): 'light' | 'dark';\n    function redirect(path: string): void;\n    \n    // Editor Module\n    namespace editor {\n        // String Operations\n        function getString(callback: (string: StringInfo) => void): void;\n        function getSelectedStrings(callback: (strings: StringInfo[] | null) => void): void;\n        function getTranslations(callback: (translations: Translation[]) => void): void;\n        function getTopTranslation(callback: (translation: Translation | null) => void): void;\n        \n        // Translation Manipulation\n        function setTranslation(text: string): void;\n        function appendTranslation(text: string): void;\n        function clearTranslation(): void;\n        function setFocus(): void;\n        \n        // Messages\n        function noticeMessage(message: string): void;\n        function successMessage(message: string): void;\n        function errorMessage(message: string): void;\n        function setApplicationNotification(count: number): void;\n        function clearApplicationNotification(): void;\n        \n        // Filters\n        function getCustomFilter(callback: (filter: CustomFilter) => void): void;\n        function setCustomFilter(customFilter: CustomFilter): void;\n        function resetCustomFilter(): void;\n        function getFilter(callback: (filter: number) => void): void;\n        function setFilter(filterNumber: number): void;\n        function getFiltersList(callback: (filters: FilterInfo[]) => void): void;\n        \n        // CroQL Filters\n        function getCroqlFilter(callback: (filter: string) => void): void;\n        function setCroqlFilter(query: string): void;\n        function resetCroqlFilter(): void;\n        \n        // Pagination\n        function getPage(callback: (page: number) => void): void;\n        function setPage(pageNumber: number): void;\n        \n        // Language Operations\n        function getProjectTargetLanguages(callback: (languages: Language[]) => void): void;\n        function setTargetLanguage(languageIdOrIds: string | string[], callback?: () => void): void;\n        \n        // Search\n        function search(text: string, options?: SearchOptions): void;\n        \n        // Workflow Step Status Filter\n        function setWorkflowStepStatusFilter(status: WorkflowStepStatus): void;\n        function getWorkflowStepStatusFilter(callback: (status: WorkflowStepStatus) => void): void;\n        \n        // Editor Mode\n        function getMode(callback: (mode: EditorMode) => void): void;\n        function setMode(mode: EditorMode): void;\n        \n        // Context Menu\n        function registerContextMenuAction(action: ContextMenuAction, callback: (action: ContextMenuActionWithId) => void): void;\n        \n        // File Operations\n        function changeFiles(ids: number[]): void;\n        function isMultipleFilesSelected(callback: (isMultiple: boolean) => void): void;\n        function getSelectedFiles(callback: (files: FileData[]) => void): void;\n    }\n    \n    // Events Module\n    namespace events {\n        function once(event: EditorEvent, callback: (data: any) => void): void;\n        function on(event: EditorEvent, callback: (data: any) => void): void;\n        function off(event: EditorEvent, callback?: (data: any) => void): void;\n        function ofAll(event: EditorEvent): void;\n        function onAny(callback: (event: string, data: any) => void): void;\n        function offAny(callback?: (event: string, data: any) => void): void;\n    }\n}\n```\n\n##### Type Definitions\n\n```typescript\n// Context Information\ninterface Context {\n    project_id: number;\n    organization_id: number;\n    editor?: EditorContext;\n}\n\ninterface EditorContext {\n    mode: 'translate' | 'proofread' | 'review' | 'multilingual';\n    theme: 'light' | 'dark';\n    source_language_id: string;\n    target_language_id: string;\n    file: number;\n    fileData?: FileData;\n    workflow_step?: WorkflowStep;\n}\n\ninterface FileData {\n    id: string;\n    is_plain_text: boolean;\n    type: string;\n    status: string;\n    parent_id: string;\n    node_type: string;\n    created: string;\n    extension: string;\n    priority: string;\n    name: string;\n    upload_ready: number;\n    export_ready: number;\n    export_xliff_ready: number;\n    can_change: number;\n    plural_support: number;\n    excluded_languages: string[];\n    html_preview: boolean;\n    identifier_required: number;\n    total: number;\n    translated: number;\n    approved: number;\n    preTranslated: number;\n    translated_percent: number;\n    approved_percent: number;\n    progress: FileProgress;\n}\n\ninterface FileProgress {\n    total: number;\n    translated: number;\n    approved: number;\n    translated_percent: number;\n    approved_percent: number;\n    pre_translated: number;\n    file_id: number;\n    language_id: number;\n    translation_link: string;\n}\n\n// String Information\ninterface StringInfo {\n    id: number;\n    identifier: string;\n    text: string;\n    context: string;\n    max_length: number;\n    file: FileInfo;\n}\n\ninterface FileInfo {\n    id: number;\n    name: string;\n}\n\n// Translation Information\ninterface Translation {\n    id: number;\n    string_id: number;\n    text: string;\n    target_language_id: string;\n    votes_rating: number;\n    approved: boolean;\n    author: User;\n    created_at: string;\n}\n\ninterface User {\n    id: string;\n    login: string;\n    name: string;\n    avatar_url: string;\n}\n\n// Filter Information\ninterface CustomFilter {\n    added_from: string;\n    added_to: string;\n    updated_from: string;\n    updated_to: string;\n    changed_from: string;\n    changed_to: string;\n    verbal_expression: string;\n    verbal_expression_scope: string;\n    translations: string;\n    duplicates: string;\n    tm_and_mt: string;\n    pre_translation: string;\n    approvals: string;\n    comments: string;\n    screenshots: string;\n    visibility: string;\n    qa_issues: string;\n    labels: number[];\n    label_match_rule: string;\n    exclude_labels: number[];\n    exclude_label_match_rule: string;\n    string_type: string;\n    votes: string;\n    approvals_count_select: string;\n    translated_by_user: string;\n    not_translated_by_user: string;\n    approved_by_user: string;\n    not_approved_by_user: string;\n    approved_by_step: number;\n    approved_step: number;\n    sort_method: number;\n    sort_ascending: number;\n    em: number;\n    croql_expression: string;\n    ai_query: string;\n}\n\ninterface FilterInfo {\n    name: string;\n    value: number;\n}\n\n// Language Information\ninterface Language {\n    id: string;\n    name: string;\n    internal_code: string;\n    code: string;\n    preferred: boolean;\n}\n\n// Workflow Information\ninterface WorkflowStep {\n    id: number;\n    title: string;\n    type: string;\n}\n\n// Search Options (for AP.editor.search)\ninterface SearchOptions {\n    searchStrict: boolean;\n    searchFullMatch: boolean;\n    caseSensitive: boolean;\n    search_option: number; // 1 - Strings, 2 - Context, 3 - Translations, 4 - Identifier (Key), 0 - Everything\n}\n\n// Workflow step statuses (for AP.editor.setWorkflowStepStatusFilter)\ntype WorkflowStepStatus =\n    | 'ALL'\n    | 'TODO'\n    | 'DONE'\n    | 'INCOMPLETE';\n\n// Editor mode (for AP.editor.setMode)\ntype EditorMode =\n    | 'translate'\n    | 'proofread'\n    | 'review'\n    | 'multilingual';\n\n// Context Menu Action (for AP.editor.registerContextMenuAction)\ninterface ContextMenuAction {\n    type: 'textarea-context-menu' | 'source-string-context-menu' | 'source-string-selected-text-context-menu';\n    name: string;\n    children?: ContextMenuChild[];\n}\n\ninterface ContextMenuChild {\n    name: string;\n}\n\ninterface ContextMenuActionWithId extends ContextMenuAction {\n    eventSubscriptionId: string;\n    children?: ContextMenuChildWithId[];\n}\n\ninterface ContextMenuChildWithId extends ContextMenuChild {\n    eventSubscriptionId: string;\n}\n\n// Editor Events\ntype EditorEvent = \n    | 'string.change'\n    | 'string.selected'\n    | 'textarea.edited'\n    | 'translation.added'\n    | 'translation.deleted'\n    | 'translation.restored'\n    | 'translation.vote'\n    | 'translation.approve'\n    | 'translation.disapprove'\n    | 'language.change'\n    | 'file.change'\n    | 'theme.changed'\n    | 'asset.source.preview'\n    | 'asset.suggestion.preview';\n```\n\n##### Event Data Structures\n\n```typescript\n// Event: string.change\ninterface StringChangeEvent {\n    id: number;\n    text: string;\n    context: string;\n    max_length: number;\n    file: FileInfo;\n}\n\n// Event: string.selected\ninterface StringSelectedEvent {\n    string: StringInfo;\n    translations: Record<string, Translation[]>;\n}\n\n// Event: textarea.edited\ninterface TextareaEditedEvent {\n    id: number;\n    text: string;\n    context: string;\n    max_length: number;\n    file: FileInfo;\n    oldText: string;\n    newText: string;\n}\n\n// Event: translation.added\ninterface TranslationAddedEvent extends Translation {}\n\n// Event: translation.deleted\ninterface TranslationDeletedEvent {\n    id: number;\n    string_id: number;\n}\n\n// Event: translation.restored\ninterface TranslationRestoredEvent extends Translation {}\n\n// Event: translation.vote\ninterface TranslationVoteEvent extends Translation {}\n\n// Event: translation.approve\ninterface TranslationApproveEvent extends Translation {\n    approver: User;\n    approved_at: string;\n}\n\n// Event: translation.disapprove\ninterface TranslationDisapproveEvent extends Translation {}\n\n// Event: language.change\ninterface LanguageChangeEvent {\n    project_id: number;\n    organization_id: number;\n    editor: EditorContext;\n}\n\n// Event: file.change\ninterface FileChangeEvent {\n    project_id: number;\n    organization_id: number;\n    editor: EditorContext;\n}\n\n// Event: theme.changed\ntype ThemeChangedEvent = 'light' | 'dark';\n\n// Event: asset.source.preview\ninterface AssetSourcePreviewEvent {\n    project_id: number;\n    organization_id: number;\n    editor: EditorContext;\n}\n\n// Event: asset.suggestion.preview\ninterface AssetSuggestionPreviewEvent {\n    project_id: number;\n    organization_id: number;\n    editor: EditorContext;\n    suggestion: any;\n}\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-editor-tool`\n\n### 2. Key Files to Modify\n\n- `worker/app.ts` - Add backend endpoints only if needed\n- `public/editor-panels/index.html` - Modify compact UI\n- `public/editor-panels/app.js` - Add editor interaction logic  \n- `public/editor-panels/styles.css` - Customize compact styles"
    }
  },
  {
    "name": "crowdin-organization-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Organization Menu module.\n\nUse when:\n- Building organization-wide tools and utilities\n- Creating organization management extensions\n- Developing organization-level analytics and reporting tools\n- Building organization-wide integrations with external APIs\n- Creating custom workflows for groups and projects management\n- Managing organization members and permissions\n\nAvoid when:\n- Building project-specific tools (use Project Tools instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Organization Menu module for organization-wide functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Organization Menu (appears in organization navigation)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object for context/events) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the organizationMenu configuration structure\n- **Scopes**: Ensure your app has appropriate organization-level API scopes\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Organization Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/organization-menu/index.html` - Main HTML interface with demo UI\n- `public/organization-menu/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/organization-menu/styles.css` - Responsive CSS with accessibility support\n\n## Backend Development\n\n### App Configuration\n\nConfigure your app identity in `worker/app.ts`:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",                    // Display name shown in Crowdin UI\n    identifier: \"your-unique-app-identifier\", // Unique ID (lowercase, hyphens)\n    description: \"Your app description\",      // Brief description of functionality\n    // ... rest of configuration\n}\n```\n\n**Guidelines:**\n- **identifier**: Must be unique across all Crowdin apps. Format: `company-organization-menu`\n- **name**: User-friendly display name (e.g., \"Organization Manager\")\n- **description**: Brief explanation of what your app does\n\n#### Required Scopes\n\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n### Module Configuration\n\nConfigure the Organization Menu module in `worker/app.ts`:\n\n```typescript\norganizationMenu: {\n  fileName: 'index.html',\n  uiPath: '/organization-menu' // Points to public/organization-menu directory\n}\n```\n\n### Crowdin API Client\n\n#### Official Documentation\n\nThe `connection.client` object is an instance of `@crowdin/crowdin-api-client`.\n\n**📚 Complete API Reference:** https://crowdin.github.io/crowdin-api-client-js/modules.html\n\n**⚠️ CRITICAL**: Only use methods documented in the official API reference. Do NOT invent or assume methods exist.\n\n#### Common Examples\n\n**Standard Endpoint Template:**\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n\n        if (!crowdinApp.establishCrowdinConnection) {\n            return res.status(500).json({ success: false, error: 'Crowdin connection method not available' });\n        }\n\n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n\n        if (!connection.client) {\n            return res.status(500).json({ success: false, error: 'Crowdin API client not available' });\n        }\n\n        const userId = connection.context.jwtPayload.context.user_id;\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n\n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n**Get Project Details:**\n```typescript\nconst response = await connection.client.projectsGroupsApi.getProject(projectId);\n\n// Access project properties\nconst project = response.data;\nconst projectName = project.name;                    // string\nconst sourceLanguageId = project.sourceLanguageId;   // string\nconst targetLanguageIds = project.targetLanguageIds; // string[]\nconst description = project.description;             // string | null\n```\n\n**List All Projects (with pagination):**\n```typescript\nconst response = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n\n// Iterate through all projects\nresponse.data.forEach((projectItem: ResponseObject<ProjectsGroupsModel.Project>) => {\n  const projectId = projectItem.data.id;\n  const projectName = projectItem.data.name;\n  const groupId = projectItem.data.groupId; // number | null\n});\n```\n\n**Get Supported Languages:**\n```typescript\nconst response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n\n// Filter languages\nconst targetLanguageIds = ['uk', 'pl', 'de'];\nconst projectLanguages = response.data.filter(\n  (lang: ResponseObject<LanguagesModel.Language>) => targetLanguageIds.includes(lang.data.id)\n);\n\n// Map to simpler structure\nconst languages = projectLanguages.map((lang: ResponseObject<LanguagesModel.Language>) => ({\n  id: lang.data.id,           // string: \"uk\"\n  name: lang.data.name,       // string: \"Ukrainian\"\n  locale: lang.data.locale,   // string: \"uk-UA\"\n  osxLocale: lang.data.osxLocale // string\n}));\n```\n\n**List Source Files:**\n```typescript\nconst response = await connection.client.sourceFilesApi.withFetchAll().listProjectFiles(projectId);\n\nresponse.data.forEach((fileItem: ResponseObject<SourceFilesModel.File>) => {\n  const file = fileItem.data;\n  const fileId = file.id;             // number\n  const fileName = file.name;         // string\n  const branchId = file.branchId;     // number | null\n  const directoryId = file.directoryId; // number | null\n});\n```\n\n#### Best Practices\n\n1. **Always access data via `.data` property**\n   ```typescript\n   // ✅ CORRECT\n   const project = response.data;\n   const projectName = response.data.name;\n   \n   // ❌ WRONG - will be undefined\n   const projectName = response.name;\n   ```\n\n2. **Use withFetchAll() for complete data**\n   ```typescript\n   // ✅ CORRECT - gets all items\n   const response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n   \n   // ⚠️ PARTIAL - only first page (25 items)\n   const response = await connection.client.languagesApi.listSupportedLanguages();\n   ```\n\n3. **Handle nullable properties**\n   ```typescript\n   const description = response.data.description || 'No description';\n   const groupId = response.data.groupId ?? null;\n   ```\n\n4. **Handle errors properly**\n   ```typescript\n   try {\n     const response = await connection.client.projectsGroupsApi.getProject(projectId);\n     const project = response.data;\n     // Use project data\n   } catch (error: any) {\n     console.error('Crowdin API Error:', error);\n\n     // API errors have specific structure\n     if (error.code === 404) {\n       return res.status(404).json({ error: 'Project not found' });\n     }\n     \n     return res.status(500).json({\n       error: 'API request failed',\n       details: error.message\n     });\n   }\n   ```\n\n5. **Use TypeScript types**\n   ```typescript\n   import { ResponseObject, ProjectsGroupsModel } from '@crowdin/crowdin-api-client';\n   \n   // Use in your code\n   const response: ResponseObject<ProjectsGroupsModel.Project> = await connection.client.projectsGroupsApi.getProject(projectId);\n   const project: ProjectsGroupsModel.Project = response.data;\n   ```\n\n#### Complete Type Definitions\n\n**⚠️ CRITICAL**: Only use methods and types from `@crowdin/crowdin-api-client` definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n<!-- CROWDIN_API_CLIENT_TYPES_START -->\n\n##### ai/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, PlainObject, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Ai extends CrowdinApi {\n    listAiOrganizationCustomPlaceholders(options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiOrganizationCustomPlaceholder(request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<void>;\n    editAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiOrganizationPromptFineTuningDataset(aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiOrganizationPromptFineTuningDatasetStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiOrganizationPromptFineTuningEvents(aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiOrganizationPromptFineTuningJobs(options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiOrganizationPromptFineTuningJob(aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiOrganizationPromptFineTuningJobStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiOrganizationPromptFineTuningDataset(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiOrganizationPrompt(aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationPrompts(options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiOrganizationPrompt(request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiOrganizationPromptCompletion(aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiOrganizationPromptCompletionStatus(aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationPrompt(aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiOrganizationPrompt(aiPromptId: number): Promise<void>;\n    editAiOrganizationPrompt(aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationProviders(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiOrganizationProvider(request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiOrganizationProvider(aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiOrganizationProvider(aiProviderId: number): Promise<void>;\n    editAiOrganizationProvider(aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiOrganizationProviderModels(aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiOrganizationAllProviderModels(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiOrganizationProxyChatCompletion(aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiOrganizationReport(request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiOrganizationReportStatus(aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiOrganizationReport(aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationSettings(): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiOrganizationSettings(request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n    listAiUserCustomPlaceholders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiUserCustomPlaceholder(userId: number, request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<void>;\n    editAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiUserPromptFineTuningDatasetStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiUserPromptFineTuningEvents(userId: number, aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiUserPromptFineTuningJobs(userId: number, options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiUserPromptFineTuningJob(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiUserPromptFineTuningJobStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiUserPrompt(userId: number, aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserPrompts(userId: number, options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiUserPrompt(userId: number, request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiUserPromptCompletion(userId: number, aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiUserPromptCompletionStatus(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUserPrompt(userId: number, aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiUserPrompt(userId: number, aiPromptId: number): Promise<void>;\n    editAiUserPrompt(userId: number, aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserProviders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiUserProvider(userId: number, request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiUserProvider(userId: number, aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiUserProvider(userId: number, aiProviderId: number): Promise<void>;\n    editAiUserProvider(userId: number, aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiUserProviderModels(userId: number, aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiUserAllProviderModels(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiUserProxyChatCompletion(userId: number, aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiUserReport(userId: number, request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiUserReportStatus(userId: number, aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiUserReport(userId: number, aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUsertSettings(userId: number): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiUserSettings(userId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n}\nexport declare namespace AiModel {\n    interface CustomPlaceholder {\n        id: number;\n        description: string;\n        placeholder: string;\n        value: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddCustomPlaceholderRequest {\n        description: string;\n        placeholder: string;\n        value: string;\n    }\n    interface FineTuningDataset {\n        projectIds: number[];\n        tmIds: number[];\n        purpose: 'training' | 'validation';\n        dateFrom: string;\n        dateTo: string;\n        maxFileSize: number;\n        minExamplesCount: number;\n        maxExamplesCount: number;\n    }\n    interface GenerateFineTuningDataset {\n        projectIds?: number[];\n        tmIds?: number[];\n        purpose?: 'training' | 'validation';\n        dateFrom?: string;\n        dateTo?: string;\n        maxFileSize?: number;\n        minExamplesCount?: number;\n        maxExamplesCount?: number;\n    }\n    interface GenerateFineTuningJob {\n        dryRun?: boolean;\n        hyperparameters?: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions?: Omit<GenerateFineTuningDataset, 'purpose'>;\n    }\n    interface FineTuningJob {\n        dryRun: boolean;\n        aiPromptId: number;\n        hyperparameters: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        baseModel: string;\n        fineTunedModel: string;\n        trainedTokensCount: number;\n        trainingDatasetUrl: string;\n        validationDatasetUrl: string;\n        metadata: PlainObject;\n    }\n    interface PromptFineTuningEvent {\n        id: string;\n        type: string;\n        message: string;\n        data: {\n            step: number;\n            totalSteps: number;\n            trainingLoss: number;\n            validationLoss: number;\n            fullValidationLoss: number;\n        };\n        createdAt: string;\n    }\n    interface ListPromptFineTuningJobsOptions extends PaginationOptions {\n        statuses: string;\n        orderBy: string;\n    }\n    interface ListAiPromptsOptions extends PaginationOptions {\n        projectId?: number;\n        action?: Action;\n    }\n    interface AiPromptResponse {\n        id: number;\n        name: string;\n        action: Action;\n        aiProviderId: number;\n        aiModelId: string;\n        isEnabled: boolean;\n        enabledProjectIds: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiModel.AiPromptConfigExternal;\n        promptPreview: string;\n        isFineTuningAvailable: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AiPromptConfigBasicOtherLanguageTranslations {\n        isEnabled?: boolean;\n        languageIds?: string[];\n    }\n    interface AiPromptConfigBasicPreTranslate {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        customPlaceholders?: string[];\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContent?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAssistAction {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n        filteredStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAligmentAction {\n        mode: 'basic';\n        customPlaceholders?: string[];\n        publicProjectDescription?: boolean;\n    }\n    interface AiPromptConfigAdvanced {\n        mode: 'advanced';\n        screenshots?: boolean;\n        prompt: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n    }\n    interface AiPromptConfigExternal {\n        mode: 'external';\n        identifier: string;\n        key: string;\n        options?: any;\n    }\n    interface AddAiPromptRequest {\n        name: string;\n        action: Action;\n        aiProviderId?: number;\n        aiModelId?: string;\n        isEnabled?: boolean;\n        enabledProjectIds?: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiPromptConfigExternal;\n    }\n    interface GenerateAiPromptCompletionRequest {\n        resources: AiModel.AiPromptResourceWithPreTranslate | AiModel.AiPromptResourceWithAssist | AiModel.AiPromptResourceWithAlignment | AiModel.AiPromptResourceWithCustom;\n        tools?: {\n            tool: {\n                type: 'function';\n                function: {\n                    description?: string;\n                    name: string;\n                    parameters?: PlainObject;\n                };\n            };\n        }[];\n        tool_choice?: string | PlainObject;\n    }\n    interface AiPromptCompletionAttribute {\n        aiPromptId: number;\n    }\n    interface AiPromptResourceWithPreTranslate {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAlignment {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAssist {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        filteredStringsIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithCustom {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n        customInstruction?: string;\n    }\n    interface OverridePromptValues {\n        [key: string]: any;\n    }\n    interface AiProviderResponse {\n        id: number;\n        name: string;\n        type: ProviderType;\n        credentials: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsCustom;\n        config: AiModel.AiProviderConfig;\n        isEnabled: boolean;\n        useSystemCredentials: boolean;\n        createdAt: string;\n        updatedAt: string;\n        promptsCount: string;\n    }\n    interface AiProviderCredentialsBasic {\n        apiKey: string;\n    }\n    interface AiProviderCredentialsAzureOpenAi extends AiProviderCredentialsBasic {\n        resourceName: string;\n        deploymentName: string;\n        apiVersion: string;\n    }\n    interface AiProviderCredentialsGoogleGemini {\n        project: string;\n        region: string;\n        serviceAccountKey: string;\n    }\n    interface AiProviderCredentialsWatsonx {\n        apiKey: string;\n        projectId: string;\n        region: string;\n    }\n    interface AiProviderCredentialsCustom {\n        identifier: string;\n        key: string;\n    }\n    interface AiProviderConfig {\n        actionRules?: AiModel.AiProviderConfigActionRule[];\n    }\n    interface AiProviderConfigActionRule {\n        action?: 'pre_translate' | 'assist';\n        availableAiModelIds?: string[];\n    }\n    interface AddAiProviderRequest {\n        name: string;\n        type: ProviderType;\n        credentials?: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsWatsonx | AiProviderCredentialsCustom;\n        config?: AiModel.AiProviderConfig;\n        isEnabled?: boolean;\n        useSystemCredentials?: boolean;\n    }\n    interface AiProviderModelResponse {\n        id: string;\n    }\n    interface AiProviderProxyResponseData {\n        data: object;\n    }\n    interface OtherChatCompletionRequest {\n        stream?: boolean;\n        [key: string]: any;\n    }\n    interface GoogleGeminiChatCompletionRequest extends OtherChatCompletionRequest {\n        model: string;\n    }\n    type AiReport = AiReportTokenUsage;\n    interface AiReportTokenUsage {\n        type: 'tokens-usage-raw-data';\n        schema: AiReportGeneralSchema;\n    }\n    interface AiReportGeneralSchema {\n        dateFrom: string;\n        dateTo: string;\n        format?: 'json' | 'csv';\n        projectIds?: number[];\n        promptIds?: number[];\n        userIds?: number[];\n    }\n    interface AiSettings {\n        assistActionAiPromptId: number;\n        showSuggestion: boolean;\n        shortcuts: {\n            name: string;\n            prompt: string;\n            enabled: boolean;\n        }[];\n    }\n    type Action = 'pre_translate' | 'assist';\n    type ProviderType = 'open_ai' | 'azure_open_ai' | 'google_gemini' | 'mistral_ai' | 'anthropic' | 'custom_ai' | 'x_ai' | 'deepseek' | 'watsonx';\n}\n```\n\n##### applications/index.d.ts\n\n```typescript\nimport { CrowdinApi, ResponseObject, PatchRequest, Pagination, ResponseList } from '../core';\nexport declare class Applications extends CrowdinApi {\n    listApplicationInstallations(options?: Pagination): Promise<ResponseList<ApplicationsModel.Application>>;\n    installApplication(request: ApplicationsModel.InstallApplication): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationInstallation(applicationId: string): Promise<ResponseObject<ApplicationsModel.Application>>;\n    deleteApplicationInstallation(applicationId: string, force?: boolean): Promise<ResponseObject<ApplicationsModel.Application>>;\n    editApplicationInstallation(applicationId: string, request: PatchRequest[]): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationData(applicationId: string, path: string): Promise<ResponseObject<any>>;\n    updateOrRestoreApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    addApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    deleteApplicationData(applicationId: string, path: string): Promise<void>;\n    editApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n}\nexport declare namespace ApplicationsModel {\n    interface Application {\n        identifier: string;\n        name: string;\n        description: string;\n        logo: string;\n        baseUrl: string;\n        manifestUrl: string;\n        createdAt: string;\n        modules: ApplicationModule[];\n        scopes: string[];\n        permissions: ApplicationPermissions;\n        defaultPermissions: any;\n        limitReached: boolean;\n    }\n    interface InstallApplication {\n        url: string;\n        permissions?: ApplicationPermissions;\n        modules?: ApplicationModule[];\n    }\n    interface ApplicationPermissions {\n        user: {\n            value: 'all' | 'owner' | 'managers' | 'guests' | 'restricted';\n            ids: number[];\n        };\n        project: {\n            value: 'own' | 'restricted';\n            ids: number[];\n        };\n    }\n    interface ApplicationModule {\n        key: string;\n        type?: string;\n        data?: any;\n        authenticationType?: string;\n        permissions: Omit<ApplicationPermissions, 'project'>;\n    }\n}\n```\n\n##### bundles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class Bundles extends CrowdinApi {\n    listBundles(projectId: number, options?: PaginationOptions): Promise<ResponseList<BundlesModel.Bundle>>;\n    addBundle(projectId: number, request: BundlesModel.CreateBundleRequest): Promise<ResponseObject<BundlesModel.Bundle>>;\n    getBundle(projectId: number, bundleId: number): Promise<ResponseObject<BundlesModel.Bundle>>;\n    deleteBundle(projectId: number, bundleId: number): Promise<void>;\n    editBundle(projectId: number, bundleId: number, request: PatchRequest[]): Promise<ResponseObject<BundlesModel.Bundle>>;\n    downloadBundle(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    exportBundle(projectId: number, bundleId: number): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    checkBundleExportStatus(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    listBundleFiles(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listBundleBranches(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n}\nexport declare namespace BundlesModel {\n    interface Bundle {\n        id: number;\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns: string[];\n        exportPattern: string;\n        isMultilingual: boolean;\n        includeProjectSourceLanguage: boolean;\n        labelIds: number[];\n        excludeLabelIds: number[];\n        createdAt: string;\n        webUrl: string;\n        updatedAt: string;\n    }\n    interface CreateBundleRequest {\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns?: string[];\n        exportPattern: string;\n        isMultilingual?: boolean;\n        includeProjectSourceLanguage?: boolean;\n        includeInContextPseudoLanguage?: boolean;\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface ExportAttributes {\n        bundleId: number;\n    }\n}\n```\n\n##### clients/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Clients extends CrowdinApi {\n    listClients(options?: PaginationOptions): Promise<ResponseList<ClientsModel.Client>>;\n}\nexport declare namespace ClientsModel {\n    interface Client {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### core/http-client-error.d.ts\n\n```typescript\nimport { AxiosError } from 'axios';\nimport { FetchClientJsonPayloadError } from './internal/fetch/fetchClientError';\nexport type HttpClientError = AxiosError | FetchClientJsonPayloadError | Error;\nexport declare const toHttpClientError: (error?: unknown) => HttpClientError;\n```\n\n##### core/index.d.ts\n\n```typescript\nimport { HttpClientError } from './http-client-error';\nimport { RetryConfig, RetryService } from './internal/retry';\nexport interface HttpClient {\n    get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport type HttpClientType = 'axios' | 'fetch';\nexport interface Credentials {\n    token: string;\n    organization?: string;\n    baseUrl?: string;\n}\nexport interface ClientConfig {\n    httpClientType?: HttpClientType;\n    httpClient?: HttpClient;\n    userAgent?: string;\n    integrationUserAgent?: string;\n    retryConfig?: RetryConfig;\n    httpRequestTimeout?: number;\n}\nexport interface ResponseList<T> {\n    data: ResponseObject<T>[];\n    pagination: Pagination;\n}\nexport interface ResponseObject<T> {\n    data: T;\n}\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\nexport type PaginationOptions = Partial<Pagination>;\nexport interface PatchRequest {\n    value?: any;\n    op: PatchOperation;\n    path: string;\n}\nexport type PatchOperation = 'add' | 'remove' | 'replace' | 'move' | 'copy' | 'test';\nexport type ProjectRoles = 'manager' | 'developer' | 'translator' | 'proofreader' | 'language_coordinator' | 'member';\nexport interface DownloadLink {\n    url: string;\n    expireIn: string;\n}\nexport declare enum BooleanInt {\n    TRUE = 1,\n    FALSE = 0\n}\nexport interface Status<T> {\n    identifier: string;\n    status: string;\n    progress: number;\n    attributes: T;\n    createdAt: string;\n    updatedAt: string;\n    startedAt: string;\n    finishedAt: string;\n    eta: string;\n}\nexport interface Attribute {\n    [key: string]: string;\n}\nexport type PlainObject = Record<string, any>;\nexport declare class CrowdinError extends Error {\n    apiError: any;\n    code: number;\n    constructor(message: string, code: number, apiError: any);\n}\nexport declare class CrowdinValidationError extends CrowdinError {\n    validationCodes: {\n        key: string;\n        codes: string[];\n    }[];\n    constructor(message: string, validationCodes: {\n        key: string;\n        codes: string[];\n    }[], apiError: any);\n}\nexport declare function handleHttpClientError(error: HttpClientError): never;\nexport declare abstract class CrowdinApi {\n    private static readonly CROWDIN_URL_SUFFIX;\n    private static readonly AXIOS_INSTANCE;\n    private static readonly FETCH_INSTANCE;\n    readonly token: string;\n    readonly organization?: string;\n    readonly url: string;\n    readonly config: ClientConfig | undefined;\n    readonly retryService: RetryService;\n    protected fetchAllFlag: boolean;\n    protected maxLimit: number | undefined;\n    constructor(credentials: Credentials, config?: ClientConfig);\n    graphql<T>(req: {\n        query: string;\n        operationName?: string;\n        variables?: any;\n    }, config?: {\n        url?: string;\n    }): Promise<ResponseObject<T>>;\n    protected addQueryParam(url: string, name: string, value?: string | number): string;\n    protected defaultConfig(): {\n        headers: Record<string, string>;\n    };\n    get httpClient(): HttpClient;\n    withFetchAll(maxLimit?: number): this;\n    protected getList<T = any>(url: string, limit?: number, offset?: number, config?: {\n        headers: Record<string, string>;\n    }): Promise<ResponseList<T>>;\n    protected fetchAll<T>(url: string, config: {\n        headers: Record<string, string>;\n    }, maxAmount?: number): Promise<ResponseList<T>>;\n    protected encodeUrlParam(param: string | number | boolean): string;\n    protected get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport declare function isOptionalString(parameter: string | unknown, parameterInArgs: boolean): parameter is string | undefined;\nexport declare function isOptionalNumber(parameter: number | unknown, parameterInArgs: boolean): parameter is number | undefined;\nexport interface ProjectRole {\n    name: string;\n    permissions: ProjectRolePermissions;\n}\nexport interface ProjectRolePermissions {\n    allLanguages: boolean;\n    languagesAccess: {\n        [lang: string]: {\n            allContent: boolean;\n            workflowStepIds: number[];\n        };\n    };\n}\n```\n\n##### dictionaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Dictionaries extends CrowdinApi {\n    listDictionaries(projectId: number, options?: DictionariesModel.ListDictionariesOptions): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    listDictionaries(projectId: number, languageIds?: string): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    editDictionary(projectId: number, languageId: string, request: PatchRequest[]): Promise<ResponseObject<DictionariesModel.Dictionary>>;\n}\nexport declare namespace DictionariesModel {\n    interface Dictionary {\n        languageId: string;\n        words: string[];\n    }\n    interface ListDictionariesOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### distributions/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Distributions extends CrowdinApi {\n    listDistributions(projectId: number, options?: PaginationOptions): Promise<ResponseList<DistributionsModel.Distribution>>;\n    listDistributions(projectId: number, limit?: number, offset?: number): Promise<ResponseList<DistributionsModel.Distribution>>;\n    createDistribution(projectId: number, request: DistributionsModel.CreateDistributionRequest | DistributionsModel.CreateDistributionStringsBasedRequest): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistribution(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    deleteDistribution(projectId: number, hash: string): Promise<void>;\n    editDistribution(projectId: number, hash: string, request: PatchRequest[]): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n    createDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n}\nexport declare namespace DistributionsModel {\n    interface Distribution {\n        hash: string;\n        manifestUrl: string;\n        name: string;\n        bundleIds: number[];\n        createdAt: string;\n        updatedAt: string;\n        exportMode: ExportMode;\n        fileIds: number[];\n    }\n    interface CreateDistributionRequest {\n        exportMode?: ExportMode;\n        name: string;\n        fileIds?: number[];\n        bundleIds?: number[];\n    }\n    interface CreateDistributionStringsBasedRequest {\n        name: string;\n        bundleIds: number[];\n    }\n    interface DistributionRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentFileId: number;\n        date: string;\n    }\n    interface DistributionStringsBasedRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentBranchId: number;\n        date: string;\n    }\n    type ExportMode = 'default' | 'bundle';\n}\n```\n\n##### fields/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Fields extends CrowdinApi {\n    listFields(options?: FieldsModel.ListFieldsParams): Promise<ResponseList<FieldsModel.Field>>;\n    addField(request: FieldsModel.AddFieldRequest): Promise<ResponseObject<FieldsModel.Field>>;\n    getField(fieldId: number): Promise<ResponseObject<FieldsModel.Field>>;\n    deleteField(fieldId: number): Promise<void>;\n    editField(fieldId: number, request: PatchRequest[]): Promise<ResponseObject<FieldsModel.Field>>;\n}\nexport declare namespace FieldsModel {\n    type Entity = 'project' | 'user' | 'task' | 'file' | 'translation' | 'string';\n    type Type = 'checkbox' | 'radiobuttons' | 'date' | 'datetime' | 'number' | 'labels' | 'select' | 'multiselect' | 'text' | 'textarea' | 'url';\n    type Place = 'projectCreateModal' | 'projectHeader' | 'projectDetails' | 'projectCrowdsourceDetails' | 'projectSettings' | 'projectTaskEditCreate' | 'projectTaskDetails' | 'projectTaskBoardCard' | 'fileDetails' | 'fileSettings' | 'userEditModal' | 'userDetails' | 'userPopover' | 'stringEditModal' | 'stringDetails' | 'translationUnderContent';\n    interface Location {\n        place: Place;\n    }\n    interface Option {\n        label: string;\n        value: string;\n    }\n    interface OtherFieldConfig {\n        locations: Location[];\n    }\n    interface ListFieldConfig extends OtherFieldConfig {\n        options: Option[];\n    }\n    interface NumberFieldConfig extends OtherFieldConfig {\n        min: number;\n        max: number;\n        units: string;\n    }\n    type Config = ListFieldConfig | NumberFieldConfig | OtherFieldConfig;\n    interface ListFieldsParams extends PaginationOptions {\n        search?: string;\n        entity?: Entity;\n        type?: Type;\n    }\n    interface Field {\n        id: number;\n        name: string;\n        slug: string;\n        type: Type;\n        description: string;\n        entities: Entity[];\n        config: Config;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddFieldRequest {\n        name: string;\n        slug: string;\n        type: Type;\n        description?: string;\n        entities: Entity[];\n        config?: Config;\n    }\n}\n```\n\n##### glossaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Glossaries extends CrowdinApi {\n    listGlossaries(options?: GlossariesModel.ListGlossariesOptions): Promise<ResponseList<GlossariesModel.Glossary>>;\n    listGlossaries(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<GlossariesModel.Glossary>>;\n    addGlossary(request: GlossariesModel.CreateGlossaryRequest): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    getGlossary(glossaryId: number): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    deleteGlossary(glossaryId: number): Promise<void>;\n    editGlossary(glossaryId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    exportGlossary(glossaryId: number, request: GlossariesModel.ExportGlossaryRequest): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    checkGlossaryExportStatus(glossaryId: number, exportId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    downloadGlossary(glossaryId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    importGlossaryFile(glossaryId: number, request: GlossariesModel.GlossaryFile): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    checkGlossaryImportStatus(glossaryId: number, importId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    listTerms(glossaryId: number, options?: GlossariesModel.ListTermsOptions): Promise<ResponseList<GlossariesModel.Term>>;\n    listTerms(glossaryId: number, userId?: number, limit?: number, offset?: number, languageId?: string, translationOfTermId?: number, conceptId?: number): Promise<ResponseList<GlossariesModel.Term>>;\n    addTerm(glossaryId: number, request: GlossariesModel.CreateTermRequest): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, options?: GlossariesModel.ClearGlossaryOptions): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, languageId?: number, translationOfTermId?: number, conceptId?: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    getTerm(glossaryId: number, termId: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    deleteTerm(glossaryId: number, termId: number): Promise<void>;\n    editTerm(glossaryId: number, termId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Term>>;\n    listConcepts(glossaryId: number, options?: {\n        orderBy?: string;\n    } & PaginationOptions): Promise<ResponseList<GlossariesModel.Concept>>;\n    getConcept(glossaryId: number, conceptId: number): Promise<ResponseObject<GlossariesModel.Concept>>;\n    updateConcept(glossaryId: number, conceptId: number, request: GlossariesModel.UpdateConceptRequest): Promise<ResponseObject<GlossariesModel.Concept>>;\n    deleteConcept(glossaryId: number, conceptId: number): Promise<void>;\n    concordanceSearch(projectId: number, request: GlossariesModel.ConcordanceSearchRequest): Promise<ResponseList<GlossariesModel.ConcordanceSearchResponse>>;\n}\nexport declare namespace GlossariesModel {\n    interface Glossary {\n        id: number;\n        name: string;\n        groupId: number;\n        userId: number;\n        terms: number;\n        languageId: string;\n        languageIds: string[];\n        defaultProjectIds: number[];\n        projectIds: number[];\n        webUrl: string;\n        createdAt: string;\n    }\n    interface CreateGlossaryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    type ExportField = 'term' | 'description' | 'partOfSpeech' | 'type' | 'status' | 'gender' | 'note' | 'url' | 'conceptDefinition' | 'conceptSubject' | 'conceptNote' | 'conceptUrl' | 'conceptFigure';\n    interface ExportGlossaryRequest {\n        format?: GlossaryFormat;\n        exportFields?: ExportField[];\n    }\n    interface GlossaryExportStatusAttribute {\n        format: string;\n        exportFields: ExportField[];\n    }\n    interface GlossaryImportStatusAttribute {\n        storageId: number;\n        scheme: unknown;\n        firstLineContainsHeader: boolean;\n    }\n    interface GlossaryFile {\n        storageId: number;\n        scheme?: GlossaryFileScheme;\n        firstLineContainsHeader?: boolean;\n    }\n    interface ListTermsOptions extends PaginationOptions {\n        userId?: number;\n        languageId?: string;\n        conceptId?: number;\n        orderBy?: string;\n        croql?: string;\n        translationOfTermId?: number;\n    }\n    interface Term {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        languageId: string;\n        text: string;\n        description: string;\n        partOfSpeech: PartOfSpeech;\n        status: Status;\n        type: Type;\n        gender: Gender;\n        note: string;\n        url: string;\n        conceptId: number;\n        lemma: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTermRequest {\n        languageId: string;\n        text: string;\n        description?: string;\n        partOfSpeech?: PartOfSpeech;\n        status?: Status;\n        type?: Type;\n        gender?: Gender;\n        note?: string;\n        url?: string;\n        conceptId?: number;\n        translationOfTermId?: number;\n    }\n    interface ConcordanceSearchRequest extends PaginationOptions {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        glossary: Glossary;\n        concept: Concept;\n        sourceTerms: Term[];\n        targetTerms: Term[];\n    }\n    type Status = 'preferred' | 'admitted' | 'not recommended' | 'obsolete';\n    type Type = 'full form' | 'acronym' | 'abbreviation' | 'short form' | 'phrase' | 'variant';\n    type Gender = 'masculine' | 'feminine' | 'neuter' | 'other';\n    type GlossaryFormat = 'tbx' | 'tbx_v3' | 'csv' | 'xlsx';\n    interface GlossaryFileScheme {\n        [key: string]: number;\n    }\n    type PartOfSpeech = 'adjective' | 'adposition' | 'adverb' | 'auxiliary' | 'coordinating conjunction' | 'determiner' | 'interjection' | 'noun' | 'numeral' | 'particle' | 'pronoun' | 'proper noun' | 'subordinating conjunction' | 'verb' | 'other';\n    interface ListGlossariesOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ClearGlossaryOptions {\n        languageId?: number;\n        translationOfTermId?: number;\n        conceptId?: number;\n    }\n    interface Concept {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        subject: string;\n        definition: string;\n        translatable: boolean;\n        note: string;\n        url: string;\n        figure: string;\n        languagesDetails: LanguageDetails[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface LanguageDetails {\n        languageId: string;\n        userId: number;\n        definition: string;\n        note: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface UpdateConceptRequest {\n        subject?: string;\n        definition?: string;\n        translatable?: boolean;\n        note?: string;\n        url?: string;\n        figure?: string;\n        languagesDetails?: {\n            languageId: string;\n            definition: string;\n            note?: string;\n        }[];\n    }\n}\n```\n\n##### index.d.ts\n\n```typescript\nimport { Ai } from './ai';\nimport { Applications } from './applications';\nimport { Bundles } from './bundles';\nimport { Clients } from './clients';\nimport { ClientConfig, Credentials, CrowdinApi } from './core';\nimport { Dictionaries } from './dictionaries';\nimport { Distributions } from './distributions';\nimport { Fields } from './fields';\nimport { Glossaries } from './glossaries';\nimport { Issues } from './issues';\nimport { Labels } from './labels';\nimport { Languages } from './languages';\nimport { MachineTranslation } from './machineTranslation';\nimport { Notifications } from './notifications';\nimport { OrganizationWebhooks } from './organizationWebhooks';\nimport { ProjectsGroups } from './projectsGroups';\nimport { Reports } from './reports';\nimport { Screenshots } from './screenshots';\nimport { SecurityLogs } from './securityLogs';\nimport { SourceFiles } from './sourceFiles';\nimport { SourceStrings } from './sourceStrings';\nimport { StringComments } from './stringComments';\nimport { StringCorrections } from './stringCorrections';\nimport { StringTranslations } from './stringTranslations';\nimport { Tasks } from './tasks';\nimport { Teams } from './teams';\nimport { TranslationMemory } from './translationMemory';\nimport { TranslationStatus } from './translationStatus';\nimport { Translations } from './translations';\nimport { UploadStorage } from './uploadStorage';\nimport { Users } from './users';\nimport { Vendors } from './vendors';\nimport { Webhooks } from './webhooks';\nimport { Workflows } from './workflows';\nexport * from './ai';\nexport * from './applications';\nexport * from './bundles';\nexport * from './clients';\nexport * from './core';\nexport * from './dictionaries';\nexport * from './distributions';\nexport * from './fields';\nexport * from './glossaries';\nexport * from './issues';\nexport * from './labels';\nexport * from './languages';\nexport * from './machineTranslation';\nexport * from './notifications';\nexport * from './organizationWebhooks';\nexport * from './projectsGroups';\nexport * from './reports';\nexport * from './screenshots';\nexport * from './securityLogs';\nexport * from './sourceFiles';\nexport * from './sourceStrings';\nexport * from './stringComments';\nexport * from './stringCorrections';\nexport * from './stringTranslations';\nexport * from './tasks';\nexport * from './teams';\nexport * from './translationMemory';\nexport * from './translationStatus';\nexport * from './translations';\nexport * from './uploadStorage';\nexport * from './users';\nexport * from './vendors';\nexport * from './webhooks';\nexport * from './workflows';\nexport default class Client extends CrowdinApi {\n    readonly aiApi: Ai;\n    readonly applicationsApi: Applications;\n    readonly sourceFilesApi: SourceFiles;\n    readonly glossariesApi: Glossaries;\n    readonly languagesApi: Languages;\n    readonly translationsApi: Translations;\n    readonly translationStatusApi: TranslationStatus;\n    readonly projectsGroupsApi: ProjectsGroups;\n    readonly reportsApi: Reports;\n    readonly screenshotsApi: Screenshots;\n    readonly sourceStringsApi: SourceStrings;\n    readonly uploadStorageApi: UploadStorage;\n    readonly tasksApi: Tasks;\n    readonly translationMemoryApi: TranslationMemory;\n    readonly webhooksApi: Webhooks;\n    readonly organizationWebhooksApi: OrganizationWebhooks;\n    readonly machineTranslationApi: MachineTranslation;\n    readonly stringTranslationsApi: StringTranslations;\n    readonly workflowsApi: Workflows;\n    readonly usersApi: Users;\n    readonly vendorsApi: Vendors;\n    readonly issuesApi: Issues;\n    readonly teamsApi: Teams;\n    readonly distributionsApi: Distributions;\n    readonly dictionariesApi: Dictionaries;\n    readonly labelsApi: Labels;\n    readonly stringCommentsApi: StringComments;\n    readonly bundlesApi: Bundles;\n    readonly notificationsApi: Notifications;\n    readonly clientsApi: Clients;\n    readonly securityLogsApi: SecurityLogs;\n    readonly fieldsApi: Fields;\n    readonly stringCorrectionsApi: StringCorrections;\n    constructor(credentials: Credentials, config?: ClientConfig);\n}\nexport { Client };\n```\n\n##### issues/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Issues extends CrowdinApi {\n    listReportedIssues(projectId: number, options?: IssuesModel.ListReportedIssuesOptions): Promise<ResponseList<IssuesModel.Issue>>;\n    listReportedIssues(projectId: number, limit?: number, offset?: number, type?: IssuesModel.Type, status?: IssuesModel.Status): Promise<ResponseList<IssuesModel.Issue>>;\n    editIssue(projectId: number, issueId: number, request: PatchRequest[]): Promise<ResponseObject<IssuesModel.Issue>>;\n}\nexport declare namespace IssuesModel {\n    type Type = 'all' | 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type Status = 'all' | 'resolved' | 'unresolved';\n    interface Issue {\n        id: number;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: string;\n        languageId: string;\n        type: Type;\n        status: Status;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface String {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface ListReportedIssuesOptions extends PaginationOptions {\n        type?: IssuesModel.Type;\n        status?: IssuesModel.Status;\n    }\n}\n```\n\n##### labels/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { ScreenshotsModel } from '../screenshots';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Labels extends CrowdinApi {\n    listLabels(projectId: number, options?: LabelsModel.ListLabelsParams): Promise<ResponseList<LabelsModel.Label>>;\n    listLabels(projectId: number, limit?: number, offset?: number): Promise<ResponseList<LabelsModel.Label>>;\n    addLabel(projectId: number, request: LabelsModel.AddLabelRequest): Promise<ResponseObject<LabelsModel.Label>>;\n    getLabel(projectId: number, labelId: number): Promise<ResponseObject<LabelsModel.Label>>;\n    deleteLabel(projectId: number, labelId: number): Promise<void>;\n    editLabel(projectId: number, labelId: number, request: PatchRequest[]): Promise<ResponseObject<LabelsModel.Label>>;\n    assignLabelToScreenshots(projectId: number, labelId: number, request: LabelsModel.AssignLabelToScreenshotsRequet): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    unassignLabelFromScreenshots(projectId: number, labelId: number, screenshotIds: string): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    assignLabelToString(projectId: number, labelId: number, request: LabelsModel.AssignLabelToStringsRequet): Promise<ResponseList<SourceStringsModel.String>>;\n    unassignLabelFromString(projectId: number, labelId: number, stringIds: string): Promise<ResponseList<SourceStringsModel.String>>;\n}\nexport declare namespace LabelsModel {\n    interface ListLabelsParams extends PaginationOptions {\n        orderBy?: string;\n    }\n    interface Label {\n        id: number;\n        title: string;\n        isSystem?: boolean;\n    }\n    interface AddLabelRequest {\n        title: string;\n    }\n    interface AssignLabelToStringsRequet {\n        stringIds: number[];\n    }\n    interface AssignLabelToScreenshotsRequet {\n        screenshotIds: number[];\n    }\n}\n```\n\n##### languages/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Languages extends CrowdinApi {\n    listSupportedLanguages(options?: PaginationOptions): Promise<ResponseList<LanguagesModel.Language>>;\n    listSupportedLanguages(limit?: number, offset?: number): Promise<ResponseList<LanguagesModel.Language>>;\n    addCustomLanguage(request: LanguagesModel.AddLanguageRequest): Promise<ResponseObject<LanguagesModel.Language>>;\n    getLanguage(languageId: string): Promise<ResponseObject<LanguagesModel.Language>>;\n    deleteCustomLanguage(languageId: string): Promise<void>;\n    editCustomLanguage(languageId: string, request: PatchRequest[]): Promise<ResponseObject<LanguagesModel.Language>>;\n}\nexport declare namespace LanguagesModel {\n    interface Language {\n        id: string;\n        name: string;\n        editorCode: string;\n        twoLettersCode: string;\n        threeLettersCode: string;\n        locale: string;\n        androidCode: string;\n        osxCode: string;\n        osxLocale: string;\n        pluralCategoryNames: string[];\n        pluralRules: string;\n        pluralExamples: string[];\n        textDirection: TextDirection;\n        dialectOf: string;\n    }\n    interface AddLanguageRequest {\n        name: string;\n        code: string;\n        localeCode: string;\n        textDirection: TextDirection;\n        pluralCategoryNames: string[];\n        threeLettersCode: string;\n        twoLettersCode?: string;\n        dialectOf?: string;\n    }\n    type TextDirection = 'ltr' | 'rtl';\n}\n```\n\n##### machineTranslation/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class MachineTranslation extends CrowdinApi {\n    listMts(options?: MachineTranslationModel.ListMTsOptions): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    listMts(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    createMt(request: MachineTranslationModel.CreateMachineTranslationRequest): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    getMt(mtId: number): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    deleteMt(mtId: number): Promise<void>;\n    updateMt(mtId: number, request: PatchRequest[]): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    translate(mtId: number, request: MachineTranslationModel.TranslateRequest): Promise<ResponseObject<MachineTranslationModel.TranslateResponse>>;\n}\nexport declare namespace MachineTranslationModel {\n    interface MachineTranslation {\n        id: number;\n        groupId: number;\n        name: string;\n        type: number;\n        credentials: Credentials;\n        projectIds: number[];\n        supportedLanguageIds: string[];\n        supportedLanguagePairs: Record<string, string[]>;\n        enabledLanguageIds: string[];\n        enabledProjectIds: number[];\n        isEnabled: boolean;\n    }\n    type Credentials = {\n        apiKey: string;\n    } | {\n        credentials: string;\n    } | {\n        model: string;\n        apiKey: string;\n    } | {\n        isSystemCredentials: boolean;\n        apiKey: string;\n    } | {\n        endpoint: string;\n        apiKey: string;\n    } | {\n        url: string;\n    } | {\n        accessKey: string;\n        secretKey: string;\n    };\n    interface CreateMachineTranslationRequest {\n        name: string;\n        type: string;\n        credentials: Credentials;\n        groupId?: number;\n        enabledLanguageIds?: string[];\n        enabledProjectIds?: number[];\n        isEnabled?: boolean;\n    }\n    interface TranslateRequest {\n        languageRecognitionProvider?: LanguageRecognitionProvider;\n        sourceLanguageId?: string;\n        targetLanguageId: string;\n        strings?: string[];\n    }\n    interface TranslateResponse {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        strings: string[];\n        translations: string[];\n    }\n    type LanguageRecognitionProvider = 'crowdin' | 'engine';\n    interface ListMTsOptions extends PaginationOptions {\n        groupId?: number;\n    }\n}\n```\n\n##### notifications/index.d.ts\n\n```typescript\nimport { CrowdinApi } from '../core';\nexport declare class Notifications extends CrowdinApi {\n    sendNotificationToAuthenticatedUser(request: NotificationsModel.Notification): Promise<void>;\n    sendNotificationToProjectMembers(projectId: number, request: NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n    sendNotificationToOrganizationMembers(request: NotificationsModel.Notification | NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n}\nexport declare namespace NotificationsModel {\n    interface Notification {\n        message: string;\n    }\n    interface NotificationByUsers extends Notification {\n        userIds: number[];\n    }\n    interface NotificationByRole extends Notification {\n        role: 'owner' | 'admin';\n    }\n}\n```\n\n##### organizationWebhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { WebhooksModel } from '../webhooks';\nexport declare class OrganizationWebhooks extends CrowdinApi {\n    listWebhooks(options?: PaginationOptions): Promise<ResponseList<OrganizationWebhooksModel.OrganizationWebhook>>;\n    addWebhook(request: OrganizationWebhooksModel.AddOrganizationWebhookRequest): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    getWebhook(webhookId: number): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    deleteWebhook(webhookId: number): Promise<void>;\n    editWebhook(webhookId: number, request: PatchRequest[]): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n}\nexport declare namespace OrganizationWebhooksModel {\n    type OrganizationWebhook = Omit<WebhooksModel.Webhook, 'projectId' | 'events'> & {\n        events: Event[];\n    };\n    type AddOrganizationWebhookRequest = Omit<WebhooksModel.AddWebhookRequest, 'events'> & {\n        events: Event[];\n    };\n    type Event = 'group.created' | 'group.deleted' | 'project.created' | 'project.deleted';\n}\n```\n\n##### projectsGroups/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class ProjectsGroups extends CrowdinApi {\n    listGroups(options?: ProjectsGroupsModel.ListGroupsOptions): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    listGroups(parentId?: number, offset?: number, userId?: number, limit?: number): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    addGroup(request: ProjectsGroupsModel.AddGroupRequest): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    getGroup(groupId: number): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    deleteGroup(groupId: number): Promise<void>;\n    editGroup(groupId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    listProjects(options?: ProjectsGroupsModel.ListProjectsOptions): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    listProjects(groupId?: number, hasManagerAccess?: BooleanInt, limit?: number, offset?: number): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    addProject(request: ProjectsGroupsModel.CreateProjectEnterpriseRequest | ProjectsGroupsModel.CreateProjectRequest): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    getProject(projectId: number): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    deleteProject(projectId: number): Promise<void>;\n    editProject(projectId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    downloadProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    resetProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    listProjectFileFormatSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    addProjectFileFormatSettings(projectId: number, request: ProjectsGroupsModel.AddProjectFileFormatSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    getProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    deleteProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<void>;\n    editProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    listProjectStringsExporterSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    addProjectStringsExporterSettings(projectId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    getProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    deleteProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<void>;\n    editProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n}\nexport declare namespace ProjectsGroupsModel {\n    interface Group {\n        id: number;\n        name: string;\n        description: string;\n        parentId: number;\n        organizationId: number;\n        userId: number;\n        subgroupsCount: number;\n        projectsCount: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddGroupRequest {\n        name: string;\n        parentId?: number;\n        description?: string;\n    }\n    interface Project {\n        id: number;\n        type: Type;\n        userId: number;\n        sourceLanguageId: string;\n        targetLanguageIds: string[];\n        languageAccessPolicy: LanguageAccessPolicy;\n        name: string;\n        identifier: string;\n        description: string;\n        visibility: string;\n        logo: string;\n        publicDownloads: boolean;\n        createdAt: string;\n        updatedAt: string;\n        lastActivity: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        webUrl: string;\n        savingsReportSettingsTemplateId: number;\n        fields: Record<string, any>;\n        cname: string;\n        groupId: number;\n        background: string;\n        isExternal: boolean;\n        externalType: string;\n        externalProjectId: number;\n        externalOrganizationId: number;\n        workflowId: number;\n        hasCrowdsourcing: boolean;\n        publicUrl: string;\n    }\n    interface CreateProjectRequest {\n        name: string;\n        identifier: string;\n        sourceLanguageId: string;\n        targetLanguageIds?: string[];\n        visibility?: JoinPolicy;\n        languageAccessPolicy?: LanguageAccessPolicy;\n        cname?: string;\n        description?: string;\n        tagDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        autoSubstitution?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        useGlobalTm?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportApprovedOnly?: boolean;\n        qaCheckIsActive?: boolean;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        normalizePlaceholder?: boolean;\n        notificationSettings?: NotificationSettings;\n        tmPreTranslate?: ProjectSettings['tmPreTranslate'];\n        mtPreTranslate?: ProjectSettings['mtPreTranslate'];\n        aiPreTranslate?: ProjectSettings['aiPreTranslate'];\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        savingsReportSettingsTemplateId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    interface CreateProjectEnterpriseRequest {\n        name: string;\n        sourceLanguageId: string;\n        templateId?: number;\n        steps?: WorkflowTemplateStepConfig[];\n        groupId?: number;\n        targetLanguageIds?: string[];\n        vendorId?: number;\n        mtEngineId?: number;\n        description?: string;\n        translateDuplicates?: TranslateDuplicates;\n        tagsDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        taskReviewerIds?: number[];\n        autoSubstitution?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        delayedWorkflowStart?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: number;\n        normalizePlaceholder?: boolean;\n        qaCheckIsActive?: boolean;\n        qaApprovalsCount?: number;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        customQaCheckIds?: number[];\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        notificationSettings?: NotificationSettings;\n        savingsReportSettingsTemplateId?: number;\n        fields?: Record<string, any>;\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        alignmentActionAiPromptId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    type GlossaryAccessOption = 'readOnly' | 'fullAccess' | 'manageDrafts';\n    interface ProjectSettings extends Project {\n        translateDuplicates: TranslateDuplicates;\n        tagsDetection: TagDetection;\n        glossaryAccess: boolean;\n        glossaryAccessOption: GlossaryAccessOption;\n        isMtAllowed: boolean;\n        taskBasedAccessControl: boolean;\n        hiddenStringsProofreadersAccess: boolean;\n        autoSubstitution: boolean;\n        exportTranslatedOnly: boolean;\n        skipUntranslatedStrings: boolean;\n        exportApprovedOnly: boolean;\n        autoTranslateDialects: boolean;\n        useGlobalTm: boolean;\n        showTmSuggestionsDialects: boolean;\n        isSuspended: boolean;\n        qaCheckIsActive: boolean;\n        qaCheckCategories: CheckCategories;\n        qaChecksIgnorableCategories: CheckCategories;\n        languageMapping: LanguageMapping;\n        notificationSettings: NotificationSettings;\n        defaultTmId: number;\n        defaultGlossaryId: number;\n        assignedTms: {\n            [id: string]: {\n                priority: number;\n            };\n        };\n        assignedGlossaries: number[];\n        tmPenalties: {\n            autoSubstitution: number;\n            tmPriority: {\n                priority: number;\n                penalty: number;\n            };\n            multipleTranslations: number;\n            timeSinceLastUsage: {\n                months: number;\n                penalty: number;\n            };\n            timeSinceLastModified: {\n                months: number;\n                penalty: number;\n            };\n        };\n        normalizePlaceholder: boolean;\n        tmPreTranslate: {\n            enabled: boolean;\n            autoApproveOption: 'all' | 'perfectMatchOnly' | 'exceptAutoSubstituted' | 'perfectMatchApprovedOnly' | 'none';\n            minimumMatchRatio: 'perfect' | '100';\n        };\n        mtPreTranslate: {\n            enabled: boolean;\n            mts: {\n                mtId: number;\n                languageIds: string[];\n            }[];\n        };\n        aiPreTranslate: {\n            enabled: boolean;\n            aiPrompts: {\n                aiPromptId: number;\n                languageIds: string[];\n            }[];\n        };\n        assistActionAiPromptId: number;\n        editorSuggestionAiPromptId: number;\n        inContext: boolean;\n        inContextProcessHiddenStrings: string;\n        inContextPseudoLanguageId: string;\n        inContextPseudoLanguage: LanguagesModel.Language;\n        saveMetaInfoInSource: boolean;\n        skipUntranslatedFiles: boolean;\n        tmContextType: TmContextType;\n        clientOrganizationId: number;\n        taskReviewerIds: number[];\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n        qaApprovalsCount: number;\n        customQaCheckIds: number[];\n        externalQaCheckIds: number[];\n        delayedWorkflowStart: boolean;\n        alignmentActionAiPromptId: number;\n    }\n    enum Type {\n        FILES_BASED = 0,\n        STRINGS_BASED = 1\n    }\n    enum TagDetection {\n        AUTO = 0,\n        COUNT_TAGS = 1,\n        SKIP_TAGS = 2\n    }\n    type JoinPolicy = 'open' | 'private';\n    type LanguageAccessPolicy = 'open' | 'moderate';\n    interface CheckCategories {\n        empty: boolean;\n        size: boolean;\n        tags: boolean;\n        spaces: boolean;\n        variables: boolean;\n        punctuation: boolean;\n        symbolRegister: boolean;\n        specialSymbols: boolean;\n        wrongTranslation: boolean;\n        spellcheck: boolean;\n        icu: boolean;\n        terms: boolean;\n        duplicate: boolean;\n        ftl: boolean;\n        android: boolean;\n    }\n    interface LanguageMapping {\n        [key: string]: LanguageMappingEntity;\n    }\n    interface LanguageMappingEntity {\n        name: string;\n        two_letters_code: string;\n        three_letters_code: string;\n        locale: string;\n        locale_with_underscore: string;\n        android_code: string;\n        osx_code: string;\n        osx_locale: string;\n    }\n    enum TranslateDuplicates {\n        SHOW = 0,\n        HIDE_REGULAR_DETECTION = 1,\n        SHOW_AUTO_TRANSLATE = 2,\n        SHOW_WITHIN_VERION_BRANCH_REGULAR_DETECTION = 3,\n        HIDE_STRICT_DETECTION = 4,\n        SHOW_WITHIN_VERION_BRANCH_STRICT_DETECTION = 5\n    }\n    interface NotificationSettings {\n        translatorNewStrings?: boolean;\n        managerNewStrings?: boolean;\n        managerLanguageCompleted?: boolean;\n    }\n    interface ListGroupsOptions extends PaginationOptions {\n        parentId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListProjectsOptions extends PaginationOptions {\n        groupId?: number;\n        hasManagerAccess?: BooleanInt;\n        orderBy?: string;\n        type?: BooleanInt;\n    }\n    type Settings = PropertyFileFormatSettings | CommonFileFormatSettings | XmlFileFormatSettings | MdxV2FormatSettings | FmHtmlFormatSettings | HtmlFormatSettings | JsonFormatSettings | MdxV1FormatSettings | JavaScriptFileFormatSettings | DocxFileFormatSettings;\n    interface ProjectFileFormatSettings {\n        id: number;\n        name: string;\n        format: string;\n        extensions: string[];\n        settings: Settings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddProjectFileFormatSettingsRequest {\n        format: string;\n        settings: Settings;\n    }\n    interface PropertyFileFormatSettings {\n        escapeQuotes?: 0 | 1 | 2 | 3;\n        escapeSpecialCharacters?: 0 | 1;\n        exportPattern?: string;\n    }\n    interface JavaScriptFileFormatSettings {\n        exportPattern?: 'string';\n        exportQuotes?: 'single' | 'double';\n    }\n    interface CommonFileFormatSettings {\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        exportPattern?: string;\n    }\n    interface XmlFileFormatSettings extends CommonFileFormatSettings {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        translatableElements?: string[];\n    }\n    interface JsonFormatSettings extends CommonFileFormatSettings {\n        type?: 'i18next_json' | 'nestjs_i18n';\n    }\n    interface MdxV2FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxV1FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n        type?: 'mdx_v1' | 'mdx_v2';\n    }\n    interface FmHtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface HtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n    }\n    interface DocxFileFormatSettings extends CommonFileFormatSettings {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n    }\n    type TmContextType = 'segmentContext' | 'auto' | 'prevAndNextSegment';\n    type WorkflowTemplateStepConfig = WorkflowTemplateStepConfigTranslateProofread | WorkflowTemplateStepConfigVendor | WorkflowTemplateStepConfigTMPreTranslate | WorkflowTemplateStepConfigMTPreTranslate;\n    interface WorkflowTemplateStepConfigTranslateProofread {\n        id: number;\n        languages?: string[];\n        assignees?: number[];\n        config?: {\n            assignees: {\n                [key: string]: number[];\n            };\n        };\n    }\n    interface WorkflowTemplateStepConfigVendor {\n        id: number;\n        languages?: string[];\n        vendorId?: number;\n    }\n    interface WorkflowTemplateStepConfigTMPreTranslate {\n        id: number;\n        languages?: string[];\n        config?: {\n            minRelevant?: number;\n            autoSubstitution?: boolean;\n        };\n    }\n    interface WorkflowTemplateStepConfigMTPreTranslate {\n        id: number;\n        languages?: string[];\n        mtId?: number;\n    }\n    type StringsExporterSettings = AndroidStringsExporterSettings | MacOSXStringsExporterSettings | XliffStringsExporterSettings;\n    interface ProjectStringsExporterSettings {\n        id: number;\n        format: string;\n        settings: StringsExporterSettings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AndroidStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n        useCdataForStringsWithTags?: boolean;\n    }\n    interface MacOSXStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n    }\n    interface XliffStringsExporterSettings {\n        languagePairMapping?: {\n            [key: string]: {\n                sourceLanguageId: string;\n            };\n        };\n        copySourceToEmptyTarget?: boolean;\n        exportTranslatorsComment?: boolean;\n    }\n    interface AddProjectStringsExporterSettingsRequest {\n        format: string;\n        settings: StringsExporterSettings;\n    }\n}\n```\n\n##### reports/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Reports extends CrowdinApi {\n    listOrganizationReportArchives(options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getOrganizationReportArchive(archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteOrganizationReportArchive(archiveId: number): Promise<void>;\n    exportOrganizationReportArchive(archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkOrganizationReportArchiveStatus(archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadOrganizationReportArchive(archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    listUserReportArchives(userId: number, options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getUserReportArchive(userId: number, archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteUserReportArchive(userId: number, archiveId: number): Promise<void>;\n    exportUserReportArchive(userId: number, archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkUserReportArchiveStatus(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadUserReportArchive(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateGroupReport(groupId: number, request: ReportsModel.GenerateGroupReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    checkGroupReportStatus(groupId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    downloadGroupReport(groupId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listOrganizationReportSettingsTemplates(options?: ReportsModel.ListOrganizationReportSettingsParams): Promise<ResponseList<ReportsModel.OrganizationReportSettings>>;\n    addOrganizationReportSettingsTemplate(request: ReportsModel.AddOrganizationReportSettingsRequest): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    getOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    editOrganizationReportSettingsTemplate(reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    deleteOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<void>;\n    generateOrganizationReport(request: ReportsModel.GenerateOrganizationReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    checkOrganizationReportStatus(reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    downloadOrganizationReport(reportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateReport(projectId: number, request: ReportsModel.GenerateReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    checkReportStatus(projectId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    downloadReport(projectId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listReportSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.ReportSettings>>;\n    addReportSettingsTemplate(projectId: number, request: ReportsModel.AddReportSettingsRequest): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    getReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    editReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    deleteReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<void>;\n    listUserReportSettingsTemplates(userId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.UserReportSettings>>;\n    addUserReportSettingsTemplate(userId: number, request: ReportsModel.AddUserReportSettingsRequest): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    getUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    editUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    deleteUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<void>;\n}\nexport declare namespace ReportsModel {\n    interface ReportArchive {\n        id: number;\n        scopeType: string;\n        scopeId: number;\n        userId: number;\n        name: string;\n        webUrl: string;\n        scheme: any;\n        createdAt: string;\n    }\n    interface ListReportArchiveParams extends PaginationOptions {\n        scopeType: string;\n        scopeId: number;\n    }\n    interface ReportArchiveStatusAttribute {\n        format: Format;\n        reportName: string;\n        schema: any;\n    }\n    type GroupReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    type OrganizationReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    interface GenerateGroupReportRequest {\n        name: string;\n        schema: GroupReportSchema;\n    }\n    interface GenerateOrganizationReportRequest {\n        name: string;\n        schema: OrganizationReportSchema;\n    }\n    interface GroupTranslationCostsPostEditingSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n    }\n    interface GroupTranslationCostsPerEditingByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n    }\n    interface CostsEstimationSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface CostsEstimationByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface GroupTopMembersSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface RawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type GenerateReportRequest = PreTranslateEfficeincy | PreTranslateAccuracy | TranslateAccuracy | CostEstimationPostEnding | TranslationCostsPostEnding | TopMembers | ContributionRawData | SourceContentUpdates | ProjectMembers | EditorIssues | QaCheckIssues | SavingActivity | TranslationActivity;\n    type ReportSchema = Pick<GenerateReportRequest, 'schema'>;\n    interface PreTranslateEfficeincy {\n        name: 'pre-translate-efficiency';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface PreTranslateAccuracy {\n        name: 'pre-translate-accuracy';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface TranslateAccuracy {\n        name: 'translator-accuracy';\n        schema: TranslateAccuracySchema;\n    }\n    interface CostEstimationPostEnding {\n        name: 'costs-estimation-pe';\n        schema: CostEstimationPostEndingSchema | CostEstimationPostEndingSchemaByTask;\n    }\n    interface TranslationCostsPostEnding {\n        name: 'translation-costs-pe';\n        schema: TranslationCostsPostEndingSchema | TranslationCostsPostEndingSchemaByTask;\n    }\n    interface TopMembers {\n        name: 'top-members';\n        schema: TopMembersSchema;\n    }\n    interface ContributionRawData {\n        name: 'contribution-raw-data';\n        schema: ContributionRawDataSchema | ContributionRawDataSchemaByTask;\n    }\n    interface SourceContentUpdates {\n        name: 'source-content-updates';\n        schema: SourceContentUpdatesSchema;\n    }\n    interface ProjectMembers {\n        name: 'project-members';\n        schema: MembersSchema;\n    }\n    interface EditorIssues {\n        name: 'editor-issues';\n        schema: EditorIssuesSchema;\n    }\n    interface QaCheckIssues {\n        name: 'qa-check-issues';\n        schema: ProjectQaCheckIssuesSchema;\n    }\n    interface SavingActivity {\n        name: 'saving-activity';\n        schema: SavingActivitySchema;\n    }\n    interface TranslationActivity {\n        name: 'translation-activity';\n        schema: ProjectConsumptionSchema;\n    }\n    interface ReportStatusAttributes<S> {\n        format: Format;\n        reportName: string;\n        schema: S;\n    }\n    interface PreTranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateAccuracySchemaByTask {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        taskId?: number;\n    }\n    interface TranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        userIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface CostEstimationPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface CostEstimationPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface TranslationCostsPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n    }\n    interface TranslationCostsPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number;\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface TopMembersSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: string;\n        columns?: Column[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchemaByTask {\n        mode: ContributionMode;\n        unit?: Unit;\n        taskId: number;\n        columns?: Column[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateEfficiencySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ListOrganizationReportSettingsParams extends PaginationOptions {\n        projectId?: number;\n        groupId?: number;\n    }\n    interface ReportSettings {\n        id: number;\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic: boolean;\n        isGlobal: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddReportSettingsRequest {\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic?: boolean;\n        isGlobal?: boolean;\n    }\n    type UserReportSettings = Omit<ReportSettings, 'isPublic' | 'isGlobal'>;\n    type AddUserReportSettingsRequest = Omit<AddReportSettingsRequest, 'isPublic' | 'isGlobal'>;\n    type OrganizationReportSettings = Omit<ReportSettings, 'isGlobal'> & {\n        projectId: number;\n        groupId: number;\n    };\n    type AddOrganizationReportSettingsRequest = Omit<AddReportSettingsRequest, 'isGlobal'> & {\n        projectId?: number;\n        groupId?: number;\n    };\n    interface ReportSettinsConfig {\n        baseRates: BaseRate;\n        netRateSchemes: NetRateSchemas[];\n        individualRates: IndividualRate[];\n    }\n    type Unit = 'strings' | 'words' | 'chars' | 'chars_with_spaces';\n    type Currency = 'USD' | 'EUR' | 'JPY' | 'GBP' | 'AUD' | 'CAD' | 'CHF' | 'CNY' | 'SEK' | 'NZD' | 'MXN' | 'SGD' | 'HKD' | 'NOK' | 'KRW' | 'TRY' | 'RUB' | 'INR' | 'BRL' | 'ZAR' | 'GEL' | 'UAH';\n    type Format = 'xlsx' | 'csv' | 'json';\n    interface BaseRate {\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface IndividualRate extends BaseRate {\n        languageIds: string[];\n        userIds: number[];\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface NetRateSchemas {\n        tmMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        mtMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        suggestionMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        aiMatch?: {\n            matchType: Mode;\n            price: number;\n        }[];\n    }\n    type Mode = 'no_match' | 'tm_match' | 'approval' | '99-95' | '94-90' | '89-80' | 'perfect' | '100';\n    type ContributionMode = 'translations' | 'approvals' | 'votes';\n    type GroupBy = 'user' | 'language';\n    type LabelIncludeType = 'strings_with_label' | 'strings_without_label';\n    type Column = 'userId' | 'languageId' | 'stringId' | 'translationId' | 'fileId' | 'filePath' | 'pluralForm' | 'sourceStringTextHash' | 'mtEngine' | 'mtId' | 'tmName' | 'tmId' | 'aiPromptName' | 'aiPromptId' | 'preTranslated' | 'tmMatch' | 'mtMatch' | 'aiMatch' | 'suggestionMatch' | 'sourceUnits' | 'targetUnits' | 'createdAt' | 'updatedAt' | 'mark';\n    interface SourceContentUpdatesSchema {\n        unit?: Unit;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface MembersSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface EditorIssuesSchema {\n        dateFrom?: string;\n        dateTo?: string;\n        format?: Format;\n        languageId?: string;\n        userId?: number;\n    }\n    interface ProjectQaCheckIssuesSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface SavingActivitySchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface ProjectConsumptionSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface GroupTaskUsageSchema {\n        format: Format;\n        type: 'workload' | 'create-vs-resolve' | 'performance' | 'time' | 'cost';\n        projectIds?: number[];\n        assigneeId?: number;\n        creatorId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n        wordsCountFrom?: number;\n        wordsCountTo?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        currency?: Currency;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n    }\n    interface GroupQaCheckIssuesSchema {\n        projectIds?: number[];\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface GroupTranslationActivitySchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n}\n```\n\n##### screenshots/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Screenshots extends CrowdinApi {\n    listScreenshots(projectId: number, options?: ScreenshotsModel.ListScreenshotParams): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    listScreenshots(projectId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    addScreenshot(projectId: number, request: ScreenshotsModel.CreateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    getScreenshot(projectId: number, screenshotId: number): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    updateScreenshot(projectId: number, screenshotId: number, request: ScreenshotsModel.UpdateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    deleteScreenshot(projectId: number, screenshotId: number): Promise<void>;\n    editScreenshot(projectId: number, screenshotId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    listScreenshotTags(projectId: number, screenshotId: number, options?: PaginationOptions): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    listScreenshotTags(projectId: number, screenshotId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    replaceTags(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[] | ScreenshotsModel.AutoTagRequest): Promise<void>;\n    addTag(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[]): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    clearTags(projectId: number, screenshotId: number): Promise<void>;\n    getTag(projectId: number, screenshotId: number, tagId: number): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    deleteTag(projectId: number, screenshotId: number, tagId: number): Promise<void>;\n    updateTag(projectId: number, screenshotId: number, tagId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n}\nexport declare namespace ScreenshotsModel {\n    interface ListScreenshotParams extends PaginationOptions {\n        stringIds?: number[];\n        stringId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Screenshot {\n        id: number;\n        userId: number;\n        url: string;\n        webUrl: string;\n        name: string;\n        size: Size;\n        tagsCount: number;\n        tags: Tag[];\n        labels: number[];\n        labelIds: number[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateScreenshotRequest {\n        storageId: number;\n        name: string;\n        autoTag?: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        labelIds?: number[];\n    }\n    interface UpdateScreenshotRequest {\n        storageId: number;\n        name: string;\n    }\n    interface Tag {\n        id: number;\n        screenshotId: number;\n        stringId: number;\n        position: Position;\n        createdAt: string;\n    }\n    interface ReplaceTagRequest {\n        stringId: number;\n        position?: Position;\n    }\n    interface AutoTagRequest {\n        autoTag: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n    }\n    interface Size {\n        width: number;\n        height: number;\n    }\n    interface Position {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n    }\n}\n```\n\n##### securityLogs/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class SecurityLogs extends CrowdinApi {\n    listOrganizationSecurityLogs(options?: SecurityLogsModel.ListOrganizationSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getOrganizationSecurityLog(securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n    listUserSecurityLogs(userId: number, options?: SecurityLogsModel.ListUserSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getUserSecurityLog(userId: number, securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n}\nexport declare namespace SecurityLogsModel {\n    type Event = 'login' | 'password.set' | 'password.change' | 'email.change' | 'login.change' | 'personal_token.issued' | 'personal_token.revoked' | 'mfa.enabled' | 'mfa.disabled' | 'session.revoke' | 'session.revoke_all' | 'sso.connect' | 'sso.disconnect' | 'user.remove' | 'application.connected' | 'application.disconnected' | 'webauthn.created' | 'webauthn.deleted' | 'trusted_device.remove' | 'trusted_device.remove_all' | 'device_verification.enabled' | 'device_verification.disabled';\n    interface ListOrganizationSecurityLogsParams extends PaginationOptions {\n        event?: Event;\n        createdAfter?: string;\n        createdBefore?: string;\n        ipAddress?: string;\n        userId?: number;\n    }\n    type ListUserSecurityLogsParams = Omit<ListOrganizationSecurityLogsParams, 'userId'>;\n    interface SecurityLog {\n        id: number;\n        event: string;\n        info: string;\n        userId: number;\n        location: string;\n        ipAddress: string;\n        deviceName: string;\n        createdAt: string;\n    }\n}\n```\n\n##### sourceFiles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class SourceFiles extends CrowdinApi {\n    getClonedBranch(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    clonedBranch(projectId: number, branchId: number, request: SourceFilesModel.CloneBranchRequest): Promise<ResponseObject<Status<object>>>;\n    checkBranchClonedStatus(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<Status<object>>>;\n    listProjectBranches(projectId: number, options?: SourceFilesModel.ListProjectBranchesOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n    listProjectBranches(projectId: number, name?: string, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.Branch>>;\n    createBranch(projectId: number, request: SourceFilesModel.CreateBranchRequest): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    getBranch(projectId: number, branchId: number): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    deleteBranch(projectId: number, branchId: number): Promise<void>;\n    editBranch(projectId: number, branchId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    mergeBranch(projectId: number, branchId: number, request: SourceFilesModel.MergeBranchRequest): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    checkBranchMergeStatus(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    getBranchMergeSummary(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<SourceFilesModel.MergeBranchSummary>>;\n    listProjectDirectories(projectId: number, options?: SourceFilesModel.ListProjectDirectoriesOptions): Promise<ResponseList<SourceFilesModel.Directory>>;\n    listProjectDirectories(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, filter?: string, recursion?: string): Promise<ResponseList<SourceFilesModel.Directory>>;\n    createDirectory(projectId: number, request: SourceFilesModel.CreateDirectoryRequest): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    getDirectory(projectId: number, directoryId: number): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    deleteDirectory(projectId: number, directoryId: number): Promise<void>;\n    editDirectory(projectId: number, directoryId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    listProjectFiles(projectId: number, options?: SourceFilesModel.ListProjectFilesOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listProjectFiles(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, recursion?: any, filter?: string): Promise<ResponseList<SourceFilesModel.File>>;\n    createFile(projectId: number, request: SourceFilesModel.CreateFileRequest): Promise<ResponseObject<SourceFilesModel.File>>;\n    getFile(projectId: number, fileId: number): Promise<ResponseObject<SourceFilesModel.File>>;\n    updateOrRestoreFile(projectId: number, fileId: number, request: SourceFilesModel.ReplaceFileFromStorageRequest | SourceFilesModel.RestoreFile): Promise<ResponseObject<SourceFilesModel.File>>;\n    deleteFile(projectId: number, fileId: number): Promise<void>;\n    editFile(projectId: number, fileId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.File>>;\n    downloadFilePreview(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    downloadFile(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    listFileRevisions(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    listFileRevisions(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    getFileRevision(projectId: number, fileId: number, revisionId: number): Promise<ResponseObject<SourceFilesModel.FileRevision>>;\n    listReviewedSourceFilesBuild(projectId: number, options?: SourceFilesModel.ListReviewedSourceFilesBuildOptions): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    listReviewedSourceFilesBuild(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    buildReviewedSourceFiles(projectId: number, request?: SourceFilesModel.BuildReviewedSourceFilesRequest): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    checkReviewedSourceFilesBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    downloadReviewedSourceFiles(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace SourceFilesModel {\n    interface Branch {\n        id: number;\n        projectId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateBranchRequest {\n        name: string;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface CloneBranchRequest {\n        name: string;\n        title?: string;\n    }\n    interface MergeBranchRequest {\n        deleteAfterMerge?: boolean;\n        sourceBranchId: number;\n        dryRun?: boolean;\n    }\n    interface MergeBranchAttributes {\n        sourceBranchId: number;\n        deleteAfterMerge: boolean;\n    }\n    interface MergeBranchSummary {\n        status: string;\n        sourceBranchId: number;\n        targetBranchId: number;\n        dryRun: boolean;\n        details: {\n            added: number;\n            deleted: number;\n            updated: number;\n            conflicted: number;\n        };\n    }\n    type Priority = 'low' | 'normal' | 'high';\n    interface ListProjectDirectoriesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        filter?: string;\n        recursion?: string;\n        orderBy?: string;\n    }\n    interface Directory {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        path: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateDirectoryRequest {\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface ListProjectFilesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        recursion?: any;\n        filter?: string;\n        orderBy?: string;\n    }\n    interface File {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        context: string;\n        type: string;\n        path: string;\n        status: string;\n        revisionId: number;\n        priority: Priority;\n        importOptions: ImportOptions;\n        exportOptions: GeneralExportOptions | PropertyExportOptions;\n        excludedTargetLanguages: string[];\n        parserVersion: number;\n        createdAt: string;\n        updatedAt: string;\n        fields: Record<string, any>;\n    }\n    interface CreateFileRequest {\n        storageId: number;\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        context?: string;\n        type?: FileType;\n        parserVersion?: number;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        excludedTargetLanguages?: string[];\n        attachLabelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface ReplaceFileFromStorageRequest {\n        storageId: number;\n        name?: string;\n        updateOption?: UpdateOption;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        attachLabelIds?: number[];\n        detachLabelIds?: number[];\n        replaceModifiedContext?: boolean;\n    }\n    type ExportOptions = GeneralExportOptions | PropertyExportOptions | JavaScriptExportOptions | MdExportOptions;\n    type ImportOptions = SpreadsheetImportOptions | XmlImportOptions | WebXmlImportOptions | DocxFileImportOptions | HtmlFileImportOptions | HtmlFrontMatterFileImportOptions | MdxFileImportOptions | MdFileImportOptions | StringCatalogFileImportOptions | AdocFileImportOptions | OtherImportOptions;\n    interface RestoreFile {\n        revisionId: number;\n    }\n    interface FileRevision {\n        id: number;\n        projectId: number;\n        fileId: number;\n        restoreToRevision: number;\n        info: FileRevisionInfo;\n        date: string;\n    }\n    interface FileRevisionInfo {\n        added: FileRevisionInfoAttribute;\n        deleted: FileRevisionInfoAttribute;\n        updated: FileRevisionInfoAttribute;\n    }\n    interface FileRevisionInfoAttribute {\n        strings: number;\n        words: number;\n    }\n    type FileType = 'auto' | 'android' | 'macosx' | 'resx' | 'properties' | 'gettext' | 'yaml' | 'php' | 'json' | 'xml' | 'ini' | 'rc' | 'resw' | 'resjson' | 'qtts' | 'joomla' | 'chrome' | 'dtd' | 'dklang' | 'flex' | 'nsh' | 'wxl' | 'xliff' | 'xliff_two' | 'html' | 'haml' | 'txt' | 'csv' | 'md' | 'flsnp' | 'fm_html' | 'fm_md' | 'mediawiki' | 'docx' | 'xlsx' | 'sbv' | 'properties_play' | 'properties_xml' | 'maxthon' | 'go_json' | 'dita' | 'mif' | 'idml' | 'stringsdict' | 'plist' | 'vtt' | 'vdf' | 'srt' | 'stf' | 'toml' | 'contentful_rt' | 'svg' | 'js' | 'coffee' | 'nestjs_i18n' | 'webxml';\n    interface SpreadsheetImportOptions {\n        firstLineContainsHeader?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        importTranslations?: boolean;\n        scheme?: Scheme;\n    }\n    interface Scheme {\n        none: number;\n        identifier: number;\n        sourcePhrase: number;\n        sourceOrTranslation: number;\n        translation: number;\n        context: number;\n        maxLength: number;\n        labels: number;\n        [key: string]: number;\n    }\n    interface XmlImportOptions {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        translatableElements?: string[];\n        srxStorageId?: number;\n    }\n    interface WebXmlImportOptions {\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface DocxFileImportOptions {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFileImportOptions {\n        excludedElements?: string[];\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFrontMatterFileImportOptions extends HtmlFileImportOptions {\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface MdFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface StringCatalogFileImportOptions {\n        importKeyAsSource?: boolean;\n    }\n    interface AdocFileImportOptions {\n        excludeIncludeDirectives?: boolean;\n    }\n    interface OtherImportOptions {\n        contentSegmentation: boolean;\n        srxStorageId: number;\n    }\n    interface GeneralExportOptions {\n        exportPattern?: string;\n    }\n    interface PropertyExportOptions {\n        escapeQuotes?: EscapeQuotes;\n        exportPattern?: string;\n        escapeSpecialCharacters?: 0 | 1;\n    }\n    interface JavaScriptExportOptions {\n        exportPattern?: string;\n        exportQuotes?: ExportQuotes;\n    }\n    interface MdExportOptions {\n        exportPattern?: string;\n        strongMarker?: 'asterisk' | 'underscore';\n        emphasisMarker?: 'asterisk' | 'underscore';\n        unorderedListBullet?: 'asterisks' | 'plus' | 'plus';\n        tableColumnWidth?: 'consolidate' | 'evenly_distribute_cells';\n    }\n    enum EscapeQuotes {\n        ZERO = 0,\n        ONE = 1,\n        TWO = 2,\n        THREE = 3\n    }\n    enum ExportQuotes {\n        SINGLE = \"single\",\n        DOUBLE = \"double\"\n    }\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n    interface ReviewedSourceFilesBuild {\n        id: number;\n        projectId: number;\n        status: string;\n        progress: number;\n        attributes: ReviewedSourceFilesBuildAttributes;\n    }\n    interface ReviewedSourceFilesBuildAttributes {\n        branchId: number;\n        targetLanguageId: string;\n    }\n    interface BuildReviewedSourceFilesRequest {\n        branchId?: number;\n    }\n    interface ListProjectBranchesOptions extends PaginationOptions {\n        name?: string;\n        orderBy?: string;\n    }\n    interface ListReviewedSourceFilesBuildOptions extends PaginationOptions {\n        branchId?: number;\n    }\n}\n```\n\n##### sourceStrings/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class SourceStrings extends CrowdinApi {\n    uploadStringsStatus(projectId: number, uploadId: string): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    uploadStrings(projectId: number, request: SourceStringsModel.UploadStringsRequest): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    listProjectStrings(projectId: number, options?: SourceStringsModel.ListProjectStringsOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listProjectStrings(projectId: number, fileId?: number, limit?: number, offset?: number, filter?: string, denormalizePlaceholders?: BooleanInt, labelIds?: string, scope?: SourceStringsModel.Scope, croql?: string, branchId?: number, directoryId?: number): Promise<ResponseList<SourceStringsModel.String>>;\n    addString(projectId: number, request: SourceStringsModel.CreateStringRequest | SourceStringsModel.CreateStringStringsBasedRequest): Promise<ResponseObject<SourceStringsModel.String>>;\n    stringBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<SourceStringsModel.String>>;\n    getString(projectId: number, stringId: number, query?: {\n        denormalizePlaceholders: BooleanInt;\n    }): Promise<ResponseObject<SourceStringsModel.String>>;\n    deleteString(projectId: number, stringId: number): Promise<void>;\n    editString(projectId: number, stringId: number, request: PatchRequest[]): Promise<ResponseObject<SourceStringsModel.String>>;\n}\nexport declare namespace SourceStringsModel {\n    type UploadStringsType = 'auto' | 'android' | 'macosx' | 'arb' | 'csv' | 'json' | 'xliff' | 'xliff_two' | 'xlsx';\n    interface UploadStringsStatus {\n        branchId: number;\n        storageId: number;\n        fileType: UploadStringsType;\n        parserVersion: number;\n        labelIds: number[];\n        importOptions: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateStrings: boolean;\n        cleanupMode: boolean;\n        updateOption: UpdateOption;\n    }\n    interface UploadStringsRequest {\n        branchId: number;\n        storageId: number;\n        type?: UploadStringsType;\n        parserVersion?: number;\n        labelIds?: number[];\n        updateStrings?: boolean;\n        cleanupMode?: boolean;\n        importOptions?: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateOption?: UpdateOption;\n    }\n    interface ListProjectStringsOptions extends PaginationOptions {\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n        labelIds?: string;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        taskId?: number;\n        croql?: string;\n        filter?: string;\n        scope?: SourceStringsModel.Scope;\n    }\n    interface String {\n        id: number;\n        projectId: number;\n        branchId: number;\n        identifier: string;\n        text: string | PluralText;\n        type: Type;\n        context: string;\n        maxLength: number;\n        isHidden: boolean;\n        isDuplicate: boolean;\n        masterStringId: boolean;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        labelIds: number[];\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        fileId: number;\n        directoryId: number;\n        revision: number;\n        fields: Record<string, any>;\n    }\n    interface CreateStringRequest {\n        text: string | PluralText;\n        identifier?: string;\n        fileId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface CreateStringStringsBasedRequest {\n        text: string | PluralText;\n        identifier: string;\n        branchId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface PluralText {\n        zero?: string;\n        one?: string;\n        two?: string;\n        few?: string;\n        many?: string;\n        other?: string;\n    }\n    enum Type {\n        TEXT = 0,\n        ASSET = 1,\n        ICU = 2\n    }\n    type Scope = 'identifier' | 'text' | 'context';\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n}\n```\n\n##### stringComments/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringComments extends CrowdinApi {\n    listStringComments(projectId: number, options?: StringCommentsModel.ListStringCommentsOptions): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    listStringComments(projectId: number, stringId?: number, type?: StringCommentsModel.Type, targetLanguageId?: string, issueType?: StringCommentsModel.IssueType, issueStatus?: StringCommentsModel.IssueStatus): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    addStringComment(projectId: number, request: StringCommentsModel.AddStringCommentRequest): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    getStringComment(projectId: number, stringCommentId: number): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    deleteStringComment(projectId: number, stringCommentId: number): Promise<void>;\n    editStringComment(projectId: number, stringCommentId: number, request: PatchRequest[]): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    stringCommentBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringCommentsModel.StringComment>>;\n}\nexport declare namespace StringCommentsModel {\n    interface ListStringCommentsOptions extends PaginationOptions {\n        stringId?: number;\n        type?: Type;\n        targetLanguageId?: string;\n        issueType?: IssueType;\n        issueStatus?: IssueStatus;\n        orderBy?: string;\n    }\n    interface StringComment {\n        id: number;\n        isShared?: boolean;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: StringModel;\n        projectId: number;\n        languageId: string;\n        type: Type;\n        issueType: IssueType;\n        issueStatus: IssueStatus;\n        resolverId: number;\n        senderOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolverOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolver: User;\n        resolvedAt: string;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface StringModel {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface AddStringCommentRequest {\n        stringId: number;\n        text: string;\n        targetLanguageId: string;\n        type: Type;\n        isShared?: boolean;\n        issueType?: IssueType;\n    }\n    type Type = 'comment' | 'issue';\n    type IssueType = 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type IssueStatus = 'unresolved' | 'resolved';\n}\n```\n\n##### stringCorrections/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class StringCorrections extends CrowdinApi {\n    listStringCorrections(projectId: number, options: StringCorrectionsModel.ListStringCorrectionsParams): Promise<ResponseList<StringCorrectionsModel.StringCorrection>>;\n    addStringCorrection(projectId: number, request: StringCorrectionsModel.AddStringCorrectionRequest): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrections(projectId: number, stringId: number): Promise<void>;\n    getStringCorrection(projectId: number, correctionId: number, params?: {\n        denormalizePlaceholders?: BooleanInt;\n    }): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    restoreStringCorrection(projectId: number, correctionId: number): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrection(projectId: number, correctionId: number): Promise<void>;\n}\nexport declare namespace StringCorrectionsModel {\n    interface ListStringCorrectionsParams extends PaginationOptions {\n        stringId: number;\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n    }\n    interface StringCorrection {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: {\n            id: number;\n            username: string;\n            fullName: string;\n            avatarUrl: string;\n        };\n        createdAt: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n    interface AddStringCorrectionRequest {\n        stringId: number;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n    }\n}\n```\n\n##### stringTranslations/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringTranslations extends CrowdinApi {\n    listTranslationApprovals(projectId: number, options?: StringTranslationsModel.ListTranslationApprovalsOptions): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    listTranslationApprovals(projectId: number, stringId?: number, languageId?: string, translationId?: number, limit?: number, offset?: number, fileId?: number, labelIds?: string, excludeLabelIds?: string): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    addApproval(projectId: number, request: StringTranslationsModel.AddApprovalRequest): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    removeStringApprovals(projectId: number, stringId: number): Promise<void>;\n    approvalInfo(projectId: number, approvalId: number): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    approvalBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    removeApproval(projectId: number, approvalId: number): Promise<void>;\n    listLanguageTranslations(projectId: number, languageId: string, options?: StringTranslationsModel.ListLanguageTranslationsOptions): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    listLanguageTranslations(projectId: number, languageId: string, stringIds?: string, fileId?: number, limit?: number, offset?: number, labelIds?: string, denormalizePlaceholders?: BooleanInt, croql?: string): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    translationAlignment(projectId: number, request: StringTranslationsModel.TranslationAlignmentRequest): Promise<ResponseObject<StringTranslationsModel.TranslationAlignmentResponse>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, options?: StringTranslationsModel.ListStringTranslationsOptions): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, limit?: number, offset?: number, denormalizePlaceholders?: BooleanInt): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    addTranslation(projectId: number, request: StringTranslationsModel.AddStringTranslationRequest): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    deleteAllTranslations(projectId: number, stringId: number, languageId?: string): Promise<void>;\n    translationInfo(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    restoreTranslation(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    translationBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    deleteTranslation(projectId: number, translationId: number): Promise<void>;\n    listTranslationVotes(projectId: number, options?: StringTranslationsModel.ListTranslationVotesOptions): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    listTranslationVotes(projectId: number, stringId?: number, languageId?: string, translationId?: number, labelIds?: string, excludeLabelIds?: string, limit?: number, offset?: number): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    addVote(projectId: number, request: StringTranslationsModel.AddVoteRequest): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    voteInfo(projectId: number, voteId: number): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    cancelVote(projectId: number, voteId: number): Promise<void>;\n}\nexport declare namespace StringTranslationsModel {\n    interface ListTranslationApprovalsOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Approval {\n        id: number;\n        user: User;\n        translationId: number;\n        stringId: number;\n        languageId: string;\n        createdAt: string;\n    }\n    interface AddApprovalRequest {\n        translationId: number;\n    }\n    interface StringTranslation {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: User;\n        rating: number;\n        provider: string;\n        isPreTranslated: boolean;\n        createdAt: string;\n    }\n    interface ListLanguageTranslationsOptions extends PaginationOptions {\n        stringIds?: string;\n        fileId?: number;\n        labelIds?: string;\n        denormalizePlaceholders?: BooleanInt;\n        croql?: string;\n        approvedOnly?: BooleanInt;\n        passedWorkflow?: BooleanInt;\n        orderBy?: string;\n        branchId?: number;\n        minApprovalCount?: number;\n        directoryId?: number;\n    }\n    interface PlainLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface PluralLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        plurals: Plural[];\n    }\n    interface IcuLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface Plural {\n        translationId: number;\n        text: string;\n        pluralForm: string;\n        user: User;\n        createdAt: string;\n    }\n    interface TranslationAlignmentRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        text: string;\n    }\n    interface TranslationAlignmentResponse {\n        words: {\n            text: string;\n            alignments: {\n                sourceWord: string;\n                sourceLemma: string;\n                targetWord: string;\n                targetLemma: string;\n                match: number;\n                probability: number;\n            }[];\n        }[];\n    }\n    interface AddStringTranslationRequest {\n        stringId: number;\n        languageId: string;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n        addToTm?: boolean;\n    }\n    interface ListTranslationVotesOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n    }\n    interface Vote {\n        id: number;\n        user: User;\n        translationId: number;\n        votedAt: string;\n        mark: Mark;\n    }\n    interface AddVoteRequest {\n        mark: Mark;\n        translationId: number;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    type Mark = 'up' | 'down';\n    interface ListStringTranslationsOptions extends PaginationOptions {\n        denormalizePlaceholders?: BooleanInt;\n        orderBy?: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n}\n```\n\n##### tasks/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class Tasks extends CrowdinApi {\n    listTasks(projectId: number, options?: TasksModel.ListTasksOptions): Promise<ResponseList<TasksModel.Task>>;\n    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;\n    addTask(projectId: number, request: TasksModel.CreateTaskRequest): Promise<ResponseObject<TasksModel.Task>>;\n    exportTaskStrings(projectId: number, taskId: number): Promise<ResponseObject<DownloadLink>>;\n    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;\n    deleteTask(projectId: number, taskId: number): Promise<void>;\n    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;\n    listTasksComments(projectId: number, taskId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskComment>>;\n    addTaskComment(projectId: number, taskId: number, request: TasksModel.CreateTaskCommentRequest): Promise<ResponseObject<TasksModel.TaskComment>>;\n    getTaskComment(projectId: number, taskId: number, commentId: number): Promise<ResponseObject<TasksModel.TaskComment>>;\n    deleteTaskComment(projectId: number, taskId: number, commentId: number): Promise<void>;\n    editTaskComment(projectId: number, taskId: number, commentId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskComment>>;\n    listUserTasks(options?: TasksModel.ListUserTasksOptions): Promise<ResponseList<TasksModel.UserTask>>;\n    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;\n    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;\n    listTaskSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskSettingsTemplate>>;\n    addTaskSettingsTemplate(projectId: number, request: TasksModel.AddTaskSettingsTemplate): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    getTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    deleteTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<void>;\n    editTaskSettingsTemplate(projectId: number, taskSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n}\nexport declare namespace TasksModel {\n    interface Task {\n        id: number;\n        projectId: number;\n        creatorId: number;\n        type: Type | TypeVendor;\n        status: Status;\n        title: string;\n        assignees: Assignee[];\n        assignedTeams: AssignedTeam[];\n        progress: Progress;\n        translateProgress: Progress;\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        description: string;\n        translationUrl: string;\n        webUrl: string;\n        wordsCount: number;\n        commentsCount: number;\n        deadline: string;\n        startedAt: string;\n        resolvedAt: string;\n        timeRange: string;\n        workflowStepId: number;\n        buyUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        labelIds: number[];\n        excludeLabelIds: number[];\n        precedingTaskId: number;\n        filesCount: number;\n        fileIds: number[];\n        branchIds: number[];\n        vendor: string;\n        fields: Record<string, any>;\n    }\n    interface ListUserTasksOptions extends PaginationOptions {\n        status?: Status;\n        isArchived?: BooleanInt;\n        orderBy?: string;\n    }\n    interface UserTask extends Task {\n        isArchived: boolean;\n    }\n    type CreateTaskRequest = CreateTaskEnterpriseByBranchIds | CreateTaskEnterpriseByFileIds | CreateTaskEnterpriseByStringIds | CreateTaskEnterpriseVendorByBranchIds | CreateTaskEnterpriseVendorByFileIds | CreateTaskEnterpriseVendorByStringIds | CreateTaskEnterprisePendingTask | CreateTaskByFileIds | CreateTaskByStringIds | CreateTaskByBranchIds | CreateTaskByFileIdsLanguageService | CreateTaskByStringIdsLanguageService | CreateTaskByBranchIdsLanguageService | CreateTaskVendorOhtByFileIds | CreateTaskVendorOhtByStringIds | CreateTaskVendorOhtByBranchIds | CreateTaskVendorGengoByFileIds | CreateTaskVendorGengoByStringIds | CreateTaskVendorGengoByBranchIds | CreateTaskVendorManualByFileIds | CreateTaskVendorManualByStringIds | CreateTaskVendorManualByBranchIds | CreateTaskPendingTask | CreateTaskPendingTaskLanguageService | CreateTaskPendingTaskVendorManual;\n    interface CreateTaskEnterpriseByBranchIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        branchIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    interface CreateTaskEnterpriseByStringIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        stringIds: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    type CreateTaskEnterpriseVendorByStringIds = Omit<CreateTaskEnterpriseByStringIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseVendorByBranchIds = Omit<CreateTaskEnterpriseByBranchIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseByFileIds = Omit<CreateTaskEnterpriseByBranchIds, 'branchIds'> & {\n        fileIds: number[];\n    };\n    type CreateTaskEnterpriseVendorByFileIds = Omit<CreateTaskEnterpriseByFileIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    interface CreateTaskEnterprisePendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        deadline?: string;\n    }\n    interface CreateTaskByFileIds {\n        title: string;\n        languageId: string;\n        type: Type;\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIds = Omit<CreateTaskByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number;\n    };\n    type CreateTaskByBranchIds = Omit<CreateTaskByFileIds, 'fileIds'> & {\n        branchIds: number;\n    };\n    interface CreateTaskByFileIdsLanguageService {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'crowdin_language_service';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskByBranchIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorOhtByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'oht';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: Expertise;\n        editService?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorOhtByStringIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorOhtByBranchIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorGengoByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor.TRANSLATE_BY_VENDOR;\n        vendor: 'gengo';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: 'standard' | 'pro';\n        tone?: Tone;\n        purpose?: Purpose;\n        customerMessage?: string;\n        usePreferred?: boolean;\n        editService?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorGengoByStringIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorGengoByBranchIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorManualByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'alconost' | 'babbleon' | 'tomedes' | 'e2f' | 'write_path_admin' | 'inlingo' | 'acclaro' | 'translate_by_humans' | 'lingo24' | 'assertio_language_services' | 'gte_localize' | 'kettu_solutions' | 'languageline_solutions';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorManualByStringIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorManualByBranchIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskPendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskLanguageService {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: 'crowdin_language_service';\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskVendorManual {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: CreateTaskVendorManualByFileIds['vendor'];\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskAssignee {\n        id: number;\n        wordsCount?: number;\n    }\n    type Status = 'todo' | 'in_progress' | 'done' | 'closed';\n    type RequestStatus = Extract<Status, 'todo' | 'in_progress'>;\n    enum Type {\n        TRANSLATE = 0,\n        PROOFREAD = 1\n    }\n    enum TypeVendor {\n        TRANSLATE_BY_VENDOR = 2,\n        PROOFREAD_BY_VENDOR = 3\n    }\n    interface Assignee {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n        wordsCount: number;\n        wordsLeft: number;\n    }\n    interface AssignedTeam {\n        id: number;\n        wordsCount: number;\n    }\n    interface Progress {\n        total: number;\n        done: number;\n        percent: number;\n    }\n    type Expertise = 'standard' | 'mobile-applications' | 'software-it' | 'gaming-video-games' | 'technical-engineering' | 'marketing-consumer-media' | 'business-finance' | 'legal-certificate' | 'medical' | 'ad-words-banners' | 'automotive-aerospace' | 'scientific' | 'scientific-academic' | 'tourism' | 'training-employee-handbooks' | 'forex-crypto';\n    enum TranslatedExpertise {\n        ECONOMY = \"P\",\n        PROFESSIONAL = \"T\",\n        PREMIUM = \"R\"\n    }\n    type Tone = '' | 'Informal' | 'Friendly' | 'Business' | 'Formal' | 'other';\n    type Purpose = 'standard' | 'Personal use' | 'Business' | 'Online content' | 'App/Web localization' | 'Media content' | 'Semi-technical' | 'other';\n    type Subject = 'general' | 'accounting_finance' | 'aerospace_defence' | 'architecture' | 'art' | 'automotive' | 'certificates_diplomas_licences_cv_etc' | 'chemical' | 'civil_engineering_construction' | 'corporate_social_responsibility' | 'cosmetics' | 'culinary' | 'electronics_electrical_engineering' | 'energy_power_generation_oil_gas' | 'environment' | 'fashion' | 'games_viseogames_casino' | 'general_business_commerce' | 'history_archaeology' | 'information_technology' | 'insurance' | 'internet_e-commerce' | 'legal_documents_contracts' | 'literary_translations' | 'marketing_advertising_material_public_relations' | 'matematics_and_physics' | 'mechanical_manufacturing' | 'media_journalism_publishing' | 'medical_pharmaceutical' | 'music' | 'private_correspondence_letters' | 'religion' | 'science' | 'shipping_sailing_maritime' | 'social_science' | 'telecommunications' | 'travel_tourism';\n    interface ListTasksOptions extends PaginationOptions {\n        status?: TasksModel.Status;\n        assigneeId?: number;\n        orderBy?: string;\n    }\n    interface TaskSettingsTemplate {\n        id: number;\n        name: string;\n        config: TaskSettingsTemplateConfig;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTaskSettingsTemplate {\n        name: string;\n        config: TaskSettingsTemplateConfig;\n    }\n    interface TaskSettingsTemplateConfig {\n        languages: {\n            languageId?: string;\n            userIds?: number[];\n            teamIds?: number[];\n        }[];\n    }\n    interface TaskComment {\n        id: number;\n        userId: number;\n        taskId: number;\n        text: string;\n        timeSpent: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTaskCommentRequest {\n        text?: string;\n        timeSpent?: number;\n    }\n}\n```\n\n##### teams/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Teams extends CrowdinApi {\n    listTeamProjectPermissions(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    editTeamProjectPermissions(teamId: number, request: PatchRequest[]): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    addTeamToProject(projectId: number, request: TeamsModel.AddTeamToProjectRequest): Promise<TeamsModel.ProjectTeamResources>;\n    listTeams(options?: TeamsModel.ListTeamsOptions): Promise<ResponseList<TeamsModel.Team>>;\n    listTeams(limit?: number, offset?: number): Promise<ResponseList<TeamsModel.Team>>;\n    addTeam(request: TeamsModel.AddTeamRequest): Promise<ResponseObject<TeamsModel.Team>>;\n    getTeam(teamId: number): Promise<ResponseObject<TeamsModel.Team>>;\n    deleteTeam(teamId: number): Promise<void>;\n    editTeam(teamId: number, request: PatchRequest[]): Promise<ResponseObject<TeamsModel.Team>>;\n    teamMembersList(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.TeamMember>>;\n    teamMembersList(teamId: number, limit?: number, offset?: number): Promise<ResponseList<TeamsModel.TeamMember>>;\n    addTeamMembers(teamId: number, request: TeamsModel.AddTeamMembersRequest): Promise<TeamsModel.AddTeamMembersResponse>;\n    deleteAllTeamMembers(teamId: number): Promise<void>;\n    deleteTeamMember(teamId: number, memberId: number): Promise<void>;\n}\nexport declare namespace TeamsModel {\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface AddTeamToProjectRequest {\n        teamId: number;\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ListTeamsOptions extends PaginationOptions {\n        search?: string;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        orderBy?: string;\n    }\n    interface ProjectTeamResources {\n        skipped: ProjectTeamResource;\n        added: ProjectTeamResource;\n    }\n    interface ProjectTeamResource {\n        id: number;\n        hasManagerAccess: boolean;\n        hasDeveloperAccess: boolean;\n        hasAccessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        roles: ProjectRole[];\n    }\n    interface Permissions {\n        [lang: string]: {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n    interface Team {\n        id: number;\n        name: string;\n        totalMembers: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTeamRequest {\n        name: string;\n    }\n    interface TeamMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        avatarUrl: string;\n        addedAt: string;\n    }\n    interface AddTeamMembersRequest {\n        userIds: number[];\n    }\n    interface AddTeamMembersResponse {\n        skipped: ResponseObject<TeamMember>[];\n        added: ResponseObject<TeamMember>[];\n        pagination: Pagination;\n    }\n}\n```\n\n##### translationMemory/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class TranslationMemory extends CrowdinApi {\n    listTm(options?: TranslationMemoryModel.ListTMsOptions): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    listTm(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    addTm(request: TranslationMemoryModel.AddTranslationMemoryRequest): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    getTm(tmId: number): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    deleteTm(tmId: number): Promise<void>;\n    editTm(tmId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    listTmSegments(tmId: number, options?: TranslationMemoryModel.ListSegmentsOptions): Promise<ResponseList<TranslationMemoryModel.TMSegment>>;\n    addTmSegment(tmId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    clearTm(tmId: number): Promise<void>;\n    exportTm(tmId: number, request?: TranslationMemoryModel.ExportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    checkExportStatus(tmId: number, exportId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    downloadTm(tmId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    concordanceSearch(projectId: number, request: TranslationMemoryModel.ConcordanceSearchRequest): Promise<ResponseList<TranslationMemoryModel.ConcordanceSearchResponse>>;\n    importTm(tmId: number, request: TranslationMemoryModel.ImportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    checkImportStatus(tmId: number, importId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    getTmSegment(tmId: number, segmentId: number): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegment(tmId: number, segmentId: number): Promise<void>;\n    editTmSegment(tmId: number, segmentId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegmentRecord(tmId: number, segmentId: number, recordId: number): Promise<void>;\n    editTmSegmentRecord(tmId: number, segmentId: number, recordId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    addTmSegmentRecords(tmId: number, segmentId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n}\nexport declare namespace TranslationMemoryModel {\n    interface TranslationMemory {\n        id: number;\n        groupId: number;\n        userId: number;\n        name: string;\n        languageId: string;\n        languageIds: string[];\n        segmentsCount: number;\n        defaultProjectIds: number[];\n        projectIds: number[];\n        createdAt: string;\n        webUrl: string;\n    }\n    interface AddTranslationMemoryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    interface ConcordanceSearchRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        autoSubstitution: boolean;\n        minRelevant: number;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        tm: TranslationMemory;\n        recordId: number;\n        source: string;\n        target: string;\n        relevant: number;\n        substituted: string;\n        updatedAt: string;\n    }\n    interface ExportTranslationMemoryRequest {\n        sourceLanguageId?: number;\n        targetLanguageId?: number;\n        format?: Format;\n    }\n    interface ImportTranslationMemoryRequest {\n        storageId: number;\n        firstLineContainsHeader?: boolean;\n        scheme?: Scheme;\n    }\n    interface ExportTranslationMemoryAttribute {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        format: string;\n    }\n    interface ImportTranslationMemoryAttribute {\n        tmId: number;\n        storageId: number;\n        firstLineContainsHeader: number;\n        scheme: Scheme;\n    }\n    type Format = 'tmx' | 'csv' | 'xlsx';\n    interface Scheme {\n        [key: string]: number;\n    }\n    interface ListTMsOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListSegmentsOptions extends PaginationOptions {\n        croql?: string;\n        orderBy?: string;\n    }\n    interface TMSegment {\n        id: number;\n        records: TMSegmentRecord[];\n    }\n    interface TMSegmentRecord {\n        id: number;\n        languageId: string;\n        text: string;\n        usageCount: number;\n        createdBy: number;\n        updatedBy: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTMSegment {\n        records: AddTMSegmentRecord[];\n    }\n    interface AddTMSegmentRecord {\n        languageId: string;\n        text: string;\n    }\n}\n```\n\n##### translationStatus/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class TranslationStatus extends CrowdinApi {\n    getBranchProgress(projectId: number, branchId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getBranchProgress(projectId: number, branchId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getProjectProgress(projectId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getProjectProgress(projectId: number, limit?: number, offset?: number, languageIds?: string): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    listQaCheckIssues(projectId: number, options?: TranslationStatusModel.ListQaCheckIssuesOptions): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n    listQaCheckIssues(projectId: number, limit?: number, offset?: number, category?: TranslationStatusModel.Category, validation?: TranslationStatusModel.Validation, languageIds?: string): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n}\nexport declare namespace TranslationStatusModel {\n    interface LanguageProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        eTag: string;\n        languageId: string;\n        language: LanguagesModel.Language;\n    }\n    interface FileProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        branchId: number;\n        fileId: number;\n        eTag: string;\n    }\n    interface Words {\n        total: number;\n        translated: number;\n        approved: number;\n        preTranslateAppliedTo: number;\n    }\n    type Category = 'empty' | 'variables' | 'tags' | 'punctuation' | 'symbol_register' | 'spaces' | 'size' | 'special_symbols' | 'wrong_translation' | 'spellcheck' | 'icu';\n    type Validation = 'empty_string_check' | 'empty_suggestion_check' | 'max_length_check' | 'tags_check' | 'mismatch_ids_check' | 'cdata_check' | 'specials_symbols_check' | 'leading_newlines_check' | 'trailing_newlines_check' | 'leading_spaces_check' | 'trailing_spaces_check' | 'multiple_spaces_check' | 'custom_blocked_variables_check' | 'highest_priority_custom_variables_check' | 'highest_priority_variables_check' | 'c_variables_check' | 'python_variables_check' | 'rails_variables_check' | 'java_variables_check' | 'dot_net_variables_check' | 'twig_variables_check' | 'php_variables_check' | 'freemarker_variables_check' | 'lowest_priority_variable_check' | 'lowest_priority_custom_variables_check' | 'punctuation_check' | 'spaces_before_punctuation_check' | 'spaces_after_punctuation_check' | 'non_breaking_spaces_check' | 'capitalize_check' | 'multiple_uppercase_check' | 'parentheses_check' | 'entities_check' | 'escaped_quotes_check' | 'wrong_translation_issue_check' | 'spellcheck' | 'icu_check';\n    interface ListQaCheckIssuesOptions extends PaginationOptions {\n        category?: Category | Category[];\n        validation?: Validation | Validation[];\n        languageIds?: string;\n    }\n    interface QaCheck {\n        stringId: number;\n        languageId: string;\n        category: Category;\n        categoryDescription: string;\n        validation: Validation;\n        validationDescription: string;\n        pluralId: number;\n        text: string;\n    }\n    interface GetProjectProgressOptions extends PaginationOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### translations/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Translations extends CrowdinApi {\n    listPreTranslations(projectId: number, options?: PaginationOptions): Promise<ResponseList<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    preTranslationStatus(projectId: number, preTranslationId: string): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    applyPreTranslation(projectId: number, request: TranslationsModel.PreTranslateRequest | TranslationsModel.PreTranslateStringsRequest): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    editPreTranslation(projectId: number, preTranslationId: string, request: PatchRequest[]): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    getPreTranslationReport(projectId: number, preTranslationId: string): Promise<ResponseObject<TranslationsModel.PreTranslationReport>>;\n    buildProjectDirectoryTranslation(projectId: number, directoryId: number, request?: TranslationsModel.BuildProjectDirectoryTranslationRequest): Promise<ResponseObject<TranslationsModel.BuildProjectDirectoryTranslationResponse>>;\n    buildProjectFileTranslation(projectId: number, fileId: number, request: TranslationsModel.BuildProjectFileTranslationRequest, eTag?: string): Promise<ResponseObject<TranslationsModel.BuildProjectFileTranslationResponse>>;\n    listProjectBuilds(projectId: number, options?: TranslationsModel.ListProjectBuildsOptions): Promise<ResponseList<TranslationsModel.Build>>;\n    listProjectBuilds(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationsModel.Build>>;\n    buildProject(projectId: number, request?: TranslationsModel.BuildRequest | TranslationsModel.PseudoBuildRequest): Promise<ResponseObject<TranslationsModel.Build>>;\n    uploadTranslation(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationResponse>>;\n    uploadTranslationStrings(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationStringsRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationStringsResponse>>;\n    downloadTranslations(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n    checkBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<TranslationsModel.Build>>;\n    cancelBuild(projectId: number, buildId: number): Promise<void>;\n    exportProjectTranslation(projectId: number, request: TranslationsModel.ExportProjectTranslationRequest): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace TranslationsModel {\n    interface PreTranslateRequest {\n        languageIds: string[];\n        fileIds: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId?: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface PreTranslateStringsRequest {\n        languageIds: string[];\n        branchIds?: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface BuildProjectDirectoryTranslationRequest {\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        preserveFolderHierarchy?: boolean;\n        exportStringsThatPassedWorkflow?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportApprovedOnly?: boolean;\n    }\n    interface BuildProjectDirectoryTranslationResponse {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    type BuildStatus = 'created' | 'inProgress' | 'canceled' | 'failed' | 'finished';\n    interface BuildProjectFileTranslationRequest {\n        targetLanguageId: string;\n        exportAsXliff?: boolean;\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface BuildProjectFileTranslationResponse extends DownloadLink {\n        etag: string;\n    }\n    interface PreTranslationStatusAttributes {\n        languageIds: string[];\n        fileIds: number[];\n        branchIds: number[];\n        method: Method;\n        autoApproveOption: AutoApproveOption;\n        duplicateTranslations: boolean;\n        skipApprovedTranslations: boolean;\n        translateUntranslatedOnly: boolean;\n        translateWithPerfectMatchOnly: boolean;\n    }\n    type Method = 'tm' | 'mt' | 'ai';\n    type AutoApproveOption = 'all' | 'exceptAutoSubstituted' | 'perfectMatchOnly' | 'none';\n    type CharTransformation = 'asian' | 'european' | 'arabic' | 'cyrillic';\n    interface Build {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        attributes: Attribute;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    interface Attribute {\n        branchId: number;\n        directoryId: number;\n        targetLanguageIds: string[];\n        skipUntranslatedStrings: boolean;\n        skipUntranslatedFiles: boolean;\n        exportApprovedOnly: boolean;\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n    }\n    interface BuildRequest {\n        branchId?: number;\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface PseudoBuildRequest {\n        pseudo: boolean;\n        branchId?: number;\n        prefix?: string;\n        suffix?: string;\n        lengthTransformation?: number;\n        charTransformation?: CharTransformation;\n    }\n    interface UploadTranslationRequest {\n        storageId: number;\n        fileId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationStringsRequest {\n        storageId: number;\n        branchId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        fileId: number;\n    }\n    interface UploadTranslationStringsResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        branchId: number;\n    }\n    interface ExportProjectTranslationRequest {\n        targetLanguageId: string;\n        format?: string;\n        labelIds?: number[];\n        branchIds?: number[];\n        directoryIds?: number[];\n        fileIds?: number[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface ListProjectBuildsOptions extends PaginationOptions {\n        branchId?: number;\n    }\n    interface PreTranslationReport {\n        languages: TargetLanguage[];\n        preTranslateType: Method;\n    }\n    interface TargetLanguage {\n        id: string;\n        files: TargetLanguageFile[];\n        skipped: SkippedInfo;\n        skippedQaCheckCategories: ProjectsGroupsModel.CheckCategories;\n    }\n    interface TargetLanguageFile {\n        id: string;\n        statistics: TargetLanguageFileStatistics;\n    }\n    interface TargetLanguageFileStatistics {\n        phrases: number;\n        words: number;\n    }\n    interface SkippedInfo {\n        [key: string]: any;\n    }\n}\n```\n\n##### uploadStorage/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class UploadStorage extends CrowdinApi {\n    listStorages(options?: PaginationOptions): Promise<ResponseList<UploadStorageModel.Storage>>;\n    listStorages(limit?: number, offset?: number): Promise<ResponseList<UploadStorageModel.Storage>>;\n    addStorage(fileName: string, request: any, contentType?: string): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    getStorage(storageId: number): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    deleteStorage(storageId: number): Promise<void>;\n}\nexport declare namespace UploadStorageModel {\n    interface Storage {\n        id: number;\n        fileName: string;\n    }\n}\n```\n\n##### users/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nimport { TeamsModel } from '../teams';\nexport declare class Users extends CrowdinApi {\n    listProjectMembers(projectId: number, options?: UsersModel.ListProjectMembersOptions): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    listProjectMembers(projectId: number, search?: string, role?: UsersModel.Role, languageId?: string, limit?: number, offset?: number): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    addProjectMember(projectId: number, request: UsersModel.AddProjectMemberRequest): Promise<UsersModel.AddProjectMemberResponse>;\n    getProjectMemberPermissions(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    replaceProjectMemberPermissions(projectId: number, memberId: number, request?: UsersModel.ReplaceProjectMemberRequest): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    deleteMemberFromProject(projectId: number, memberId: number): Promise<void>;\n    listUsers(options?: UsersModel.ListUsersOptions): Promise<ResponseList<UsersModel.User>>;\n    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;\n    inviteUser(request: UsersModel.InviteUserRequest): Promise<ResponseObject<UsersModel.User>>;\n    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;\n    deleteUser(userId: number): Promise<void>;\n    editUser(userId: number, request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;\n    editAuthenticatedUser(request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    listUserProjectPermissions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    editUserProjectPermissions(userId: number, request: PatchRequest[]): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    listUserProjectContributions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n}\nexport declare namespace UsersModel {\n    interface ListProjectMembersOptions extends PaginationOptions {\n        search?: string;\n        role?: Role;\n        languageId?: string;\n        workflowStepId?: number;\n        orderBy?: string;\n    }\n    interface ListUsersOptions extends PaginationOptions {\n        status?: Status;\n        search?: string;\n        twoFactor?: TwoFactor;\n        orderBy?: string;\n        organizationRoles?: OrganizationRoles[];\n        teamId?: number;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        lastSeenFrom?: string;\n        lastSeenTo?: string;\n    }\n    interface InviteUserRequest {\n        email: string;\n        firstName?: string;\n        lastName?: string;\n        timezone?: string;\n        adminAccess?: boolean;\n    }\n    interface User {\n        id: number;\n        username: string;\n        email: string;\n        firstName: string;\n        lastName: string;\n        status: Status;\n        avatarUrl: string;\n        fields: Record<string, any>;\n        createdAt: string;\n        lastSeen: string;\n        twoFactor: TwoFactor;\n        isAdmin: boolean;\n        timezone: string;\n        emailVerified: string;\n    }\n    type Status = 'active' | 'pending' | 'blocked';\n    type TwoFactor = 'enabled' | 'disabled';\n    type OrganizationRoles = 'admin' | 'manager' | 'vendor' | 'client';\n    interface ProjectMember {\n        id: number;\n        username: string;\n        fullName: string;\n        role: Role;\n        permissions: Permissions;\n        avatarUrl: string;\n        joinedAt: string;\n        timezone: string;\n        roles: ProjectRole[];\n    }\n    interface EnterpriseProjectMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        isManager: boolean;\n        isDeveloperr: boolean;\n        managerOfGroup: Group;\n        accessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        givenAccessAt: string;\n        roles: ProjectRole[];\n    }\n    interface Group {\n        id: number;\n        name: string;\n    }\n    type Role = 'all' | 'owner' | 'manager' | 'proofreader' | 'translator' | 'blocked';\n    type LanguageRole = 'proofreader' | 'translator' | 'denied';\n    interface AddProjectMemberRequest {\n        userIds?: number[];\n        usernames?: string[];\n        emails?: string[];\n        managerAccess?: boolean;\n        roles?: ProjectRole[];\n        developerAccess?: boolean;\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface AddProjectMemberResponse {\n        skipped: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        added: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        pagination: Pagination;\n    }\n    interface ReplaceProjectMemberRequest {\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n        teams: TeamsModel.Team[];\n    }\n    interface Contributions {\n        id: number;\n        translated: Contribution;\n        approved: Contribution;\n        voted: Contribution;\n        commented: Contribution;\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface Contribution {\n        strings: number;\n        words?: number;\n    }\n    interface Permissions {\n        [lang: string]: string | {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n}\n```\n\n##### vendors/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Vendors extends CrowdinApi {\n    listVendors(options?: PaginationOptions): Promise<ResponseList<VendorsModel.Vendor>>;\n    listVendors(limit?: number, offset?: number): Promise<ResponseList<VendorsModel.Vendor>>;\n}\nexport declare namespace VendorsModel {\n    interface Vendor {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### webhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Webhooks extends CrowdinApi {\n    listWebhooks(projectId: number, options?: PaginationOptions): Promise<ResponseList<WebhooksModel.Webhook>>;\n    listWebhooks(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WebhooksModel.Webhook>>;\n    addWebhook(projectId: number, request: WebhooksModel.AddWebhookRequest): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    getWebhook(projectId: number, webhookId: number): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    deleteWebhook(projectId: number, webhookId: number): Promise<void>;\n    editWebhook(projectId: number, webhookId: number, request: PatchRequest[]): Promise<ResponseObject<WebhooksModel.Webhook>>;\n}\nexport declare namespace WebhooksModel {\n    interface Webhook {\n        id: number;\n        projectId: number;\n        name: string;\n        url: string;\n        events: Event[];\n        headers: Record<string, string>;\n        payload: Record<string, any>;\n        isActive: boolean;\n        batchingEnabled: boolean;\n        requestType: RequestType;\n        contentType: ContentType;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddWebhookRequest {\n        name: string;\n        url: string;\n        events: Event[];\n        requestType: RequestType;\n        isActive?: boolean;\n        batchingEnabled?: boolean;\n        contentType?: ContentType;\n        headers?: Record<string, string>;\n        payload?: Record<string, any>;\n    }\n    type ContentType = 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded';\n    type Event = 'file.added' | 'file.updated' | 'file.reverted' | 'file.deleted' | 'file.translated' | 'file.approved' | 'project.translated' | 'project.approved' | 'project.built' | 'translation.updated' | 'string.added' | 'string.updated' | 'string.deleted' | 'stringComment.created' | 'stringComment.updated' | 'stringComment.deleted' | 'stringComment.restored' | 'suggestion.added' | 'suggestion.updated' | 'suggestion.deleted' | 'suggestion.approved' | 'suggestion.disapproved' | 'task.added' | 'task.statusChanged' | 'task.deleted';\n    type RequestType = 'POST' | 'GET';\n}\n```\n\n##### workflows/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Workflows extends CrowdinApi {\n    listWorkflowSteps(projectId: number, options?: PaginationOptions): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    listWorkflowSteps(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    getWorkflowStep(projectId: number, stepId: number): Promise<ResponseObject<WorkflowModel.WorkflowStep>>;\n    listStringsOnTheWorkflowStep(projectId: number, stepId: number, options?: WorkflowModel.ListStringsOntheWorkflowStepOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listWorkflowTemplates(options?: WorkflowModel.ListWorkflowTemplatesOptions): Promise<ResponseList<WorkflowModel.Workflow>>;\n    listWorkflowTemplates(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.Workflow>>;\n    getWorkflowTemplateInfo(templateId: number): Promise<ResponseObject<WorkflowModel.Workflow>>;\n}\nexport declare namespace WorkflowModel {\n    interface WorkflowStep {\n        id: number;\n        title: string;\n        type: string;\n        languages: string[];\n        config: {\n            assignees: {\n                [language: string]: number[];\n            };\n        };\n    }\n    interface ListWorkflowTemplatesOptions extends PaginationOptions {\n        groupId?: number;\n    }\n    interface ListStringsOntheWorkflowStepOptions extends PaginationOptions {\n        languageIds?: string;\n        orderBy?: string;\n        status?: 'todo' | 'done' | 'pending' | 'incomplete' | 'need_review';\n    }\n    interface Workflow {\n        id: number;\n        title: string;\n        description: string;\n        groupId: number;\n        isDefault: boolean;\n        webUrl: string;\n        steps: {\n            id: number;\n            languages: string[];\n            assignees: number[];\n            vendorId: number;\n            config: {\n                minRelevant: number;\n                autoSubstitution: boolean;\n            };\n            mtId: number;\n        }[];\n    }\n}\n```\n\n<!-- CROWDIN_API_CLIENT_TYPES_END -->\n\n## Frontend Development\n\n### Crowdin Apps JS API\n\n#### Official Documentation\n\nThe `AP` object provides the Crowdin Apps JS API for interacting with the Crowdin application context.\n\n**📚 Complete API Reference:** https://support.crowdin.com/developer/crowdin-apps-js/\n\n**⚠️ CRITICAL**: Only use methods and types from the Crowdin Apps JS API definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n#### Common Examples\n\n**Get Context:**\n```javascript\n// Get application context\nAP.getContext(function(context) {\n    console.log('Project ID:', context.project_id);\n});\n```\n\n#### Best Practices\n\n1. **Always check AP availability**\n   ```javascript\n   if (window.AP) {\n       AP.getContext(function(context) {\n           // Your code\n       });\n   }\n   ```\n\n2. **Get JWT token for backend calls**\n   ```javascript\n   AP.getJwtToken(function(token) {\n       fetch('/api/endpoint?jwt=' + token)\n           .then(response => response.json());\n   });\n   ```\n\n3. **Handle errors gracefully**\n   ```javascript\n   try {\n       AP.getContext(function(context) {\n           if (!context.organization_id) {\n               console.error('Organization ID not found');\n           }\n       });\n   } catch (error) {\n       console.error('Failed to get context:', error);\n   }\n   ```\n\n#### Complete Type Definitions\n\n##### Global AP Object Structure\n\n```typescript\ndeclare namespace AP {\n    // Global Actions\n    function getContext(callback: (context: Context) => void): void;\n    function getJwtToken(callback: (token: string) => void): void;\n    function getTheme(): 'light' | 'dark';\n    function redirect(path: string): void;\n}\n```\n\n##### Type Definitions\n\n```typescript\n// Context Information\ninterface Context {\n    project_id: number;\n    organization_id: number;\n}\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-organization-menu`\n\n### 2. Key Files to Modify\n\n- `worker/app.ts` - Add new API endpoints here\n- `public/organization-menu/index.html` - Modify UI structure\n- `public/organization-menu/app.js` - Add frontend logic  \n- `public/organization-menu/styles.css` - Customize styles"
    }
  },
  {
    "name": "crowdin-profile-resources-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Profile Resources Menu module.\n\nUse when:\n- Building user-specific tools and preferences\n- Creating personal dashboards and settings\n- Developing user profile extensions\n- Building user-level integrations and configurations\n- Managing user preferences and settings\n- Creating personal analytics and statistics tools\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating project-specific tools (use Project Tools instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Profile Resources Menu module for user-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Profile Resources Menu (appears in user profile menu)\n- Storage: Built-in metadata storage for user preferences (saveMetadata, getMetadata, deleteMetadata)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object for context/events) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **Metadata Storage** - Built-in key-value storage for user data\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the profileResourcesMenu configuration structure\n- **Scopes**: Ensure your app has appropriate user-level API scopes\n- **Storage Keys**: Always include organizationId in metadata keys to isolate data per organization\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Profile Resources Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/profile-resources/index.html` - Main HTML interface with demo UI\n- `public/profile-resources/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/profile-resources/styles.css` - Responsive CSS with accessibility support\n\n## Backend Development\n\n### App Configuration\n\nConfigure your app identity in `worker/app.ts`:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",                    // Display name shown in Crowdin UI\n    identifier: \"your-unique-app-identifier\", // Unique ID (lowercase, hyphens)\n    description: \"Your app description\",      // Brief description of functionality\n    // ... rest of configuration\n}\n```\n\n**Guidelines:**\n- **identifier**: Must be unique across all Crowdin apps. Format: `company-profile-menu`\n- **name**: User-friendly display name (e.g., \"User Preferences\")\n- **description**: Brief explanation of what your app does\n\n#### Required Scopes\n\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n### Module Configuration\n\nConfigure the Profile Resources Menu module in `worker/app.ts`:\n\n```typescript\nprofileResourcesMenu: {\n  fileName: 'index.html',\n  uiPath: '/profile-resources' // Points to public/profile-resources directory\n}\n```\n\n### Crowdin API Client\n\n#### Official Documentation\n\nThe `connection.client` object is an instance of `@crowdin/crowdin-api-client`.\n\n**📚 Complete API Reference:** https://crowdin.github.io/crowdin-api-client-js/modules.html\n\n**⚠️ CRITICAL**: Only use methods documented in the official API reference. Do NOT invent or assume methods exist.\n\n#### Common Examples\n\n**Standard Endpoint Template:**\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n\n        if (!crowdinApp.establishCrowdinConnection) {\n            return res.status(500).json({ success: false, error: 'Crowdin connection method not available' });\n        }\n\n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n\n        if (!connection.client) {\n            return res.status(500).json({ success: false, error: 'Crowdin API client not available' });\n        }\n\n        const userId = connection.context.jwtPayload.context.user_id;\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n\n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n**Get Project Details:**\n```typescript\nconst response = await connection.client.projectsGroupsApi.getProject(projectId);\n\n// Access project properties\nconst project = response.data;\nconst projectName = project.name;                    // string\nconst sourceLanguageId = project.sourceLanguageId;   // string\nconst targetLanguageIds = project.targetLanguageIds; // string[]\nconst description = project.description;             // string | null\n```\n\n**List All Projects (with pagination):**\n```typescript\nconst response = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n\n// Iterate through all projects\nresponse.data.forEach((projectItem: ResponseObject<ProjectsGroupsModel.Project>) => {\n  const projectId = projectItem.data.id;\n  const projectName = projectItem.data.name;\n  const groupId = projectItem.data.groupId; // number | null\n});\n```\n\n**Get Supported Languages:**\n```typescript\nconst response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n\n// Filter languages\nconst targetLanguageIds = ['uk', 'pl', 'de'];\nconst projectLanguages = response.data.filter(\n  (lang: ResponseObject<LanguagesModel.Language>) => targetLanguageIds.includes(lang.data.id)\n);\n\n// Map to simpler structure\nconst languages = projectLanguages.map((lang: ResponseObject<LanguagesModel.Language>) => ({\n  id: lang.data.id,           // string: \"uk\"\n  name: lang.data.name,       // string: \"Ukrainian\"\n  locale: lang.data.locale,   // string: \"uk-UA\"\n  osxLocale: lang.data.osxLocale // string\n}));\n```\n\n**List Source Files:**\n```typescript\nconst response = await connection.client.sourceFilesApi.withFetchAll().listProjectFiles(projectId);\n\nresponse.data.forEach((fileItem: ResponseObject<SourceFilesModel.File>) => {\n  const file = fileItem.data;\n  const fileId = file.id;             // number\n  const fileName = file.name;         // string\n  const branchId = file.branchId;     // number | null\n  const directoryId = file.directoryId; // number | null\n});\n```\n\n#### Best Practices\n\n1. **Always access data via `.data` property**\n   ```typescript\n   // ✅ CORRECT\n   const project = response.data;\n   const projectName = response.data.name;\n   \n   // ❌ WRONG - will be undefined\n   const projectName = response.name;\n   ```\n\n2. **Use withFetchAll() for complete data**\n   ```typescript\n   // ✅ CORRECT - gets all items\n   const response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n   \n   // ⚠️ PARTIAL - only first page (25 items)\n   const response = await connection.client.languagesApi.listSupportedLanguages();\n   ```\n\n3. **Handle nullable properties**\n   ```typescript\n   const description = response.data.description || 'No description';\n   const groupId = response.data.groupId ?? null;\n   ```\n\n4. **Handle errors properly**\n   ```typescript\n   try {\n     const response = await connection.client.projectsGroupsApi.getProject(projectId);\n     const project = response.data;\n     // Use project data\n   } catch (error: any) {\n     console.error('Crowdin API Error:', error);\n\n     // API errors have specific structure\n     if (error.code === 404) {\n       return res.status(404).json({ error: 'Project not found' });\n     }\n     \n     return res.status(500).json({\n       error: 'API request failed',\n       details: error.message\n     });\n   }\n   ```\n\n5. **Use TypeScript types**\n   ```typescript\n   import { ResponseObject, ProjectsGroupsModel } from '@crowdin/crowdin-api-client';\n   \n   // Use in your code\n   const response: ResponseObject<ProjectsGroupsModel.Project> = await connection.client.projectsGroupsApi.getProject(projectId);\n   const project: ProjectsGroupsModel.Project = response.data;\n   ```\n\n#### Complete Type Definitions\n\n**⚠️ CRITICAL**: Only use methods and types from `@crowdin/crowdin-api-client` definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n<!-- CROWDIN_API_CLIENT_TYPES_START -->\n\n##### ai/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, PlainObject, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Ai extends CrowdinApi {\n    listAiOrganizationCustomPlaceholders(options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiOrganizationCustomPlaceholder(request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<void>;\n    editAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiOrganizationPromptFineTuningDataset(aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiOrganizationPromptFineTuningDatasetStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiOrganizationPromptFineTuningEvents(aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiOrganizationPromptFineTuningJobs(options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiOrganizationPromptFineTuningJob(aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiOrganizationPromptFineTuningJobStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiOrganizationPromptFineTuningDataset(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiOrganizationPrompt(aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationPrompts(options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiOrganizationPrompt(request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiOrganizationPromptCompletion(aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiOrganizationPromptCompletionStatus(aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationPrompt(aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiOrganizationPrompt(aiPromptId: number): Promise<void>;\n    editAiOrganizationPrompt(aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationProviders(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiOrganizationProvider(request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiOrganizationProvider(aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiOrganizationProvider(aiProviderId: number): Promise<void>;\n    editAiOrganizationProvider(aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiOrganizationProviderModels(aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiOrganizationAllProviderModels(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiOrganizationProxyChatCompletion(aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiOrganizationReport(request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiOrganizationReportStatus(aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiOrganizationReport(aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationSettings(): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiOrganizationSettings(request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n    listAiUserCustomPlaceholders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiUserCustomPlaceholder(userId: number, request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<void>;\n    editAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiUserPromptFineTuningDatasetStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiUserPromptFineTuningEvents(userId: number, aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiUserPromptFineTuningJobs(userId: number, options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiUserPromptFineTuningJob(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiUserPromptFineTuningJobStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiUserPrompt(userId: number, aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserPrompts(userId: number, options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiUserPrompt(userId: number, request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiUserPromptCompletion(userId: number, aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiUserPromptCompletionStatus(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUserPrompt(userId: number, aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiUserPrompt(userId: number, aiPromptId: number): Promise<void>;\n    editAiUserPrompt(userId: number, aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserProviders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiUserProvider(userId: number, request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiUserProvider(userId: number, aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiUserProvider(userId: number, aiProviderId: number): Promise<void>;\n    editAiUserProvider(userId: number, aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiUserProviderModels(userId: number, aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiUserAllProviderModels(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiUserProxyChatCompletion(userId: number, aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiUserReport(userId: number, request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiUserReportStatus(userId: number, aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiUserReport(userId: number, aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUsertSettings(userId: number): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiUserSettings(userId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n}\nexport declare namespace AiModel {\n    interface CustomPlaceholder {\n        id: number;\n        description: string;\n        placeholder: string;\n        value: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddCustomPlaceholderRequest {\n        description: string;\n        placeholder: string;\n        value: string;\n    }\n    interface FineTuningDataset {\n        projectIds: number[];\n        tmIds: number[];\n        purpose: 'training' | 'validation';\n        dateFrom: string;\n        dateTo: string;\n        maxFileSize: number;\n        minExamplesCount: number;\n        maxExamplesCount: number;\n    }\n    interface GenerateFineTuningDataset {\n        projectIds?: number[];\n        tmIds?: number[];\n        purpose?: 'training' | 'validation';\n        dateFrom?: string;\n        dateTo?: string;\n        maxFileSize?: number;\n        minExamplesCount?: number;\n        maxExamplesCount?: number;\n    }\n    interface GenerateFineTuningJob {\n        dryRun?: boolean;\n        hyperparameters?: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions?: Omit<GenerateFineTuningDataset, 'purpose'>;\n    }\n    interface FineTuningJob {\n        dryRun: boolean;\n        aiPromptId: number;\n        hyperparameters: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        baseModel: string;\n        fineTunedModel: string;\n        trainedTokensCount: number;\n        trainingDatasetUrl: string;\n        validationDatasetUrl: string;\n        metadata: PlainObject;\n    }\n    interface PromptFineTuningEvent {\n        id: string;\n        type: string;\n        message: string;\n        data: {\n            step: number;\n            totalSteps: number;\n            trainingLoss: number;\n            validationLoss: number;\n            fullValidationLoss: number;\n        };\n        createdAt: string;\n    }\n    interface ListPromptFineTuningJobsOptions extends PaginationOptions {\n        statuses: string;\n        orderBy: string;\n    }\n    interface ListAiPromptsOptions extends PaginationOptions {\n        projectId?: number;\n        action?: Action;\n    }\n    interface AiPromptResponse {\n        id: number;\n        name: string;\n        action: Action;\n        aiProviderId: number;\n        aiModelId: string;\n        isEnabled: boolean;\n        enabledProjectIds: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiModel.AiPromptConfigExternal;\n        promptPreview: string;\n        isFineTuningAvailable: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AiPromptConfigBasicOtherLanguageTranslations {\n        isEnabled?: boolean;\n        languageIds?: string[];\n    }\n    interface AiPromptConfigBasicPreTranslate {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        customPlaceholders?: string[];\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContent?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAssistAction {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n        filteredStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAligmentAction {\n        mode: 'basic';\n        customPlaceholders?: string[];\n        publicProjectDescription?: boolean;\n    }\n    interface AiPromptConfigAdvanced {\n        mode: 'advanced';\n        screenshots?: boolean;\n        prompt: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n    }\n    interface AiPromptConfigExternal {\n        mode: 'external';\n        identifier: string;\n        key: string;\n        options?: any;\n    }\n    interface AddAiPromptRequest {\n        name: string;\n        action: Action;\n        aiProviderId?: number;\n        aiModelId?: string;\n        isEnabled?: boolean;\n        enabledProjectIds?: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiPromptConfigExternal;\n    }\n    interface GenerateAiPromptCompletionRequest {\n        resources: AiModel.AiPromptResourceWithPreTranslate | AiModel.AiPromptResourceWithAssist | AiModel.AiPromptResourceWithAlignment | AiModel.AiPromptResourceWithCustom;\n        tools?: {\n            tool: {\n                type: 'function';\n                function: {\n                    description?: string;\n                    name: string;\n                    parameters?: PlainObject;\n                };\n            };\n        }[];\n        tool_choice?: string | PlainObject;\n    }\n    interface AiPromptCompletionAttribute {\n        aiPromptId: number;\n    }\n    interface AiPromptResourceWithPreTranslate {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAlignment {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAssist {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        filteredStringsIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithCustom {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n        customInstruction?: string;\n    }\n    interface OverridePromptValues {\n        [key: string]: any;\n    }\n    interface AiProviderResponse {\n        id: number;\n        name: string;\n        type: ProviderType;\n        credentials: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsCustom;\n        config: AiModel.AiProviderConfig;\n        isEnabled: boolean;\n        useSystemCredentials: boolean;\n        createdAt: string;\n        updatedAt: string;\n        promptsCount: string;\n    }\n    interface AiProviderCredentialsBasic {\n        apiKey: string;\n    }\n    interface AiProviderCredentialsAzureOpenAi extends AiProviderCredentialsBasic {\n        resourceName: string;\n        deploymentName: string;\n        apiVersion: string;\n    }\n    interface AiProviderCredentialsGoogleGemini {\n        project: string;\n        region: string;\n        serviceAccountKey: string;\n    }\n    interface AiProviderCredentialsWatsonx {\n        apiKey: string;\n        projectId: string;\n        region: string;\n    }\n    interface AiProviderCredentialsCustom {\n        identifier: string;\n        key: string;\n    }\n    interface AiProviderConfig {\n        actionRules?: AiModel.AiProviderConfigActionRule[];\n    }\n    interface AiProviderConfigActionRule {\n        action?: 'pre_translate' | 'assist';\n        availableAiModelIds?: string[];\n    }\n    interface AddAiProviderRequest {\n        name: string;\n        type: ProviderType;\n        credentials?: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsWatsonx | AiProviderCredentialsCustom;\n        config?: AiModel.AiProviderConfig;\n        isEnabled?: boolean;\n        useSystemCredentials?: boolean;\n    }\n    interface AiProviderModelResponse {\n        id: string;\n    }\n    interface AiProviderProxyResponseData {\n        data: object;\n    }\n    interface OtherChatCompletionRequest {\n        stream?: boolean;\n        [key: string]: any;\n    }\n    interface GoogleGeminiChatCompletionRequest extends OtherChatCompletionRequest {\n        model: string;\n    }\n    type AiReport = AiReportTokenUsage;\n    interface AiReportTokenUsage {\n        type: 'tokens-usage-raw-data';\n        schema: AiReportGeneralSchema;\n    }\n    interface AiReportGeneralSchema {\n        dateFrom: string;\n        dateTo: string;\n        format?: 'json' | 'csv';\n        projectIds?: number[];\n        promptIds?: number[];\n        userIds?: number[];\n    }\n    interface AiSettings {\n        assistActionAiPromptId: number;\n        showSuggestion: boolean;\n        shortcuts: {\n            name: string;\n            prompt: string;\n            enabled: boolean;\n        }[];\n    }\n    type Action = 'pre_translate' | 'assist';\n    type ProviderType = 'open_ai' | 'azure_open_ai' | 'google_gemini' | 'mistral_ai' | 'anthropic' | 'custom_ai' | 'x_ai' | 'deepseek' | 'watsonx';\n}\n```\n\n##### applications/index.d.ts\n\n```typescript\nimport { CrowdinApi, ResponseObject, PatchRequest, Pagination, ResponseList } from '../core';\nexport declare class Applications extends CrowdinApi {\n    listApplicationInstallations(options?: Pagination): Promise<ResponseList<ApplicationsModel.Application>>;\n    installApplication(request: ApplicationsModel.InstallApplication): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationInstallation(applicationId: string): Promise<ResponseObject<ApplicationsModel.Application>>;\n    deleteApplicationInstallation(applicationId: string, force?: boolean): Promise<ResponseObject<ApplicationsModel.Application>>;\n    editApplicationInstallation(applicationId: string, request: PatchRequest[]): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationData(applicationId: string, path: string): Promise<ResponseObject<any>>;\n    updateOrRestoreApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    addApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    deleteApplicationData(applicationId: string, path: string): Promise<void>;\n    editApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n}\nexport declare namespace ApplicationsModel {\n    interface Application {\n        identifier: string;\n        name: string;\n        description: string;\n        logo: string;\n        baseUrl: string;\n        manifestUrl: string;\n        createdAt: string;\n        modules: ApplicationModule[];\n        scopes: string[];\n        permissions: ApplicationPermissions;\n        defaultPermissions: any;\n        limitReached: boolean;\n    }\n    interface InstallApplication {\n        url: string;\n        permissions?: ApplicationPermissions;\n        modules?: ApplicationModule[];\n    }\n    interface ApplicationPermissions {\n        user: {\n            value: 'all' | 'owner' | 'managers' | 'guests' | 'restricted';\n            ids: number[];\n        };\n        project: {\n            value: 'own' | 'restricted';\n            ids: number[];\n        };\n    }\n    interface ApplicationModule {\n        key: string;\n        type?: string;\n        data?: any;\n        authenticationType?: string;\n        permissions: Omit<ApplicationPermissions, 'project'>;\n    }\n}\n```\n\n##### bundles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class Bundles extends CrowdinApi {\n    listBundles(projectId: number, options?: PaginationOptions): Promise<ResponseList<BundlesModel.Bundle>>;\n    addBundle(projectId: number, request: BundlesModel.CreateBundleRequest): Promise<ResponseObject<BundlesModel.Bundle>>;\n    getBundle(projectId: number, bundleId: number): Promise<ResponseObject<BundlesModel.Bundle>>;\n    deleteBundle(projectId: number, bundleId: number): Promise<void>;\n    editBundle(projectId: number, bundleId: number, request: PatchRequest[]): Promise<ResponseObject<BundlesModel.Bundle>>;\n    downloadBundle(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    exportBundle(projectId: number, bundleId: number): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    checkBundleExportStatus(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    listBundleFiles(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listBundleBranches(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n}\nexport declare namespace BundlesModel {\n    interface Bundle {\n        id: number;\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns: string[];\n        exportPattern: string;\n        isMultilingual: boolean;\n        includeProjectSourceLanguage: boolean;\n        labelIds: number[];\n        excludeLabelIds: number[];\n        createdAt: string;\n        webUrl: string;\n        updatedAt: string;\n    }\n    interface CreateBundleRequest {\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns?: string[];\n        exportPattern: string;\n        isMultilingual?: boolean;\n        includeProjectSourceLanguage?: boolean;\n        includeInContextPseudoLanguage?: boolean;\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface ExportAttributes {\n        bundleId: number;\n    }\n}\n```\n\n##### clients/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Clients extends CrowdinApi {\n    listClients(options?: PaginationOptions): Promise<ResponseList<ClientsModel.Client>>;\n}\nexport declare namespace ClientsModel {\n    interface Client {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### core/http-client-error.d.ts\n\n```typescript\nimport { AxiosError } from 'axios';\nimport { FetchClientJsonPayloadError } from './internal/fetch/fetchClientError';\nexport type HttpClientError = AxiosError | FetchClientJsonPayloadError | Error;\nexport declare const toHttpClientError: (error?: unknown) => HttpClientError;\n```\n\n##### core/index.d.ts\n\n```typescript\nimport { HttpClientError } from './http-client-error';\nimport { RetryConfig, RetryService } from './internal/retry';\nexport interface HttpClient {\n    get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport type HttpClientType = 'axios' | 'fetch';\nexport interface Credentials {\n    token: string;\n    organization?: string;\n    baseUrl?: string;\n}\nexport interface ClientConfig {\n    httpClientType?: HttpClientType;\n    httpClient?: HttpClient;\n    userAgent?: string;\n    integrationUserAgent?: string;\n    retryConfig?: RetryConfig;\n    httpRequestTimeout?: number;\n}\nexport interface ResponseList<T> {\n    data: ResponseObject<T>[];\n    pagination: Pagination;\n}\nexport interface ResponseObject<T> {\n    data: T;\n}\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\nexport type PaginationOptions = Partial<Pagination>;\nexport interface PatchRequest {\n    value?: any;\n    op: PatchOperation;\n    path: string;\n}\nexport type PatchOperation = 'add' | 'remove' | 'replace' | 'move' | 'copy' | 'test';\nexport type ProjectRoles = 'manager' | 'developer' | 'translator' | 'proofreader' | 'language_coordinator' | 'member';\nexport interface DownloadLink {\n    url: string;\n    expireIn: string;\n}\nexport declare enum BooleanInt {\n    TRUE = 1,\n    FALSE = 0\n}\nexport interface Status<T> {\n    identifier: string;\n    status: string;\n    progress: number;\n    attributes: T;\n    createdAt: string;\n    updatedAt: string;\n    startedAt: string;\n    finishedAt: string;\n    eta: string;\n}\nexport interface Attribute {\n    [key: string]: string;\n}\nexport type PlainObject = Record<string, any>;\nexport declare class CrowdinError extends Error {\n    apiError: any;\n    code: number;\n    constructor(message: string, code: number, apiError: any);\n}\nexport declare class CrowdinValidationError extends CrowdinError {\n    validationCodes: {\n        key: string;\n        codes: string[];\n    }[];\n    constructor(message: string, validationCodes: {\n        key: string;\n        codes: string[];\n    }[], apiError: any);\n}\nexport declare function handleHttpClientError(error: HttpClientError): never;\nexport declare abstract class CrowdinApi {\n    private static readonly CROWDIN_URL_SUFFIX;\n    private static readonly AXIOS_INSTANCE;\n    private static readonly FETCH_INSTANCE;\n    readonly token: string;\n    readonly organization?: string;\n    readonly url: string;\n    readonly config: ClientConfig | undefined;\n    readonly retryService: RetryService;\n    protected fetchAllFlag: boolean;\n    protected maxLimit: number | undefined;\n    constructor(credentials: Credentials, config?: ClientConfig);\n    graphql<T>(req: {\n        query: string;\n        operationName?: string;\n        variables?: any;\n    }, config?: {\n        url?: string;\n    }): Promise<ResponseObject<T>>;\n    protected addQueryParam(url: string, name: string, value?: string | number): string;\n    protected defaultConfig(): {\n        headers: Record<string, string>;\n    };\n    get httpClient(): HttpClient;\n    withFetchAll(maxLimit?: number): this;\n    protected getList<T = any>(url: string, limit?: number, offset?: number, config?: {\n        headers: Record<string, string>;\n    }): Promise<ResponseList<T>>;\n    protected fetchAll<T>(url: string, config: {\n        headers: Record<string, string>;\n    }, maxAmount?: number): Promise<ResponseList<T>>;\n    protected encodeUrlParam(param: string | number | boolean): string;\n    protected get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport declare function isOptionalString(parameter: string | unknown, parameterInArgs: boolean): parameter is string | undefined;\nexport declare function isOptionalNumber(parameter: number | unknown, parameterInArgs: boolean): parameter is number | undefined;\nexport interface ProjectRole {\n    name: string;\n    permissions: ProjectRolePermissions;\n}\nexport interface ProjectRolePermissions {\n    allLanguages: boolean;\n    languagesAccess: {\n        [lang: string]: {\n            allContent: boolean;\n            workflowStepIds: number[];\n        };\n    };\n}\n```\n\n##### dictionaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Dictionaries extends CrowdinApi {\n    listDictionaries(projectId: number, options?: DictionariesModel.ListDictionariesOptions): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    listDictionaries(projectId: number, languageIds?: string): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    editDictionary(projectId: number, languageId: string, request: PatchRequest[]): Promise<ResponseObject<DictionariesModel.Dictionary>>;\n}\nexport declare namespace DictionariesModel {\n    interface Dictionary {\n        languageId: string;\n        words: string[];\n    }\n    interface ListDictionariesOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### distributions/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Distributions extends CrowdinApi {\n    listDistributions(projectId: number, options?: PaginationOptions): Promise<ResponseList<DistributionsModel.Distribution>>;\n    listDistributions(projectId: number, limit?: number, offset?: number): Promise<ResponseList<DistributionsModel.Distribution>>;\n    createDistribution(projectId: number, request: DistributionsModel.CreateDistributionRequest | DistributionsModel.CreateDistributionStringsBasedRequest): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistribution(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    deleteDistribution(projectId: number, hash: string): Promise<void>;\n    editDistribution(projectId: number, hash: string, request: PatchRequest[]): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n    createDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n}\nexport declare namespace DistributionsModel {\n    interface Distribution {\n        hash: string;\n        manifestUrl: string;\n        name: string;\n        bundleIds: number[];\n        createdAt: string;\n        updatedAt: string;\n        exportMode: ExportMode;\n        fileIds: number[];\n    }\n    interface CreateDistributionRequest {\n        exportMode?: ExportMode;\n        name: string;\n        fileIds?: number[];\n        bundleIds?: number[];\n    }\n    interface CreateDistributionStringsBasedRequest {\n        name: string;\n        bundleIds: number[];\n    }\n    interface DistributionRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentFileId: number;\n        date: string;\n    }\n    interface DistributionStringsBasedRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentBranchId: number;\n        date: string;\n    }\n    type ExportMode = 'default' | 'bundle';\n}\n```\n\n##### fields/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Fields extends CrowdinApi {\n    listFields(options?: FieldsModel.ListFieldsParams): Promise<ResponseList<FieldsModel.Field>>;\n    addField(request: FieldsModel.AddFieldRequest): Promise<ResponseObject<FieldsModel.Field>>;\n    getField(fieldId: number): Promise<ResponseObject<FieldsModel.Field>>;\n    deleteField(fieldId: number): Promise<void>;\n    editField(fieldId: number, request: PatchRequest[]): Promise<ResponseObject<FieldsModel.Field>>;\n}\nexport declare namespace FieldsModel {\n    type Entity = 'project' | 'user' | 'task' | 'file' | 'translation' | 'string';\n    type Type = 'checkbox' | 'radiobuttons' | 'date' | 'datetime' | 'number' | 'labels' | 'select' | 'multiselect' | 'text' | 'textarea' | 'url';\n    type Place = 'projectCreateModal' | 'projectHeader' | 'projectDetails' | 'projectCrowdsourceDetails' | 'projectSettings' | 'projectTaskEditCreate' | 'projectTaskDetails' | 'projectTaskBoardCard' | 'fileDetails' | 'fileSettings' | 'userEditModal' | 'userDetails' | 'userPopover' | 'stringEditModal' | 'stringDetails' | 'translationUnderContent';\n    interface Location {\n        place: Place;\n    }\n    interface Option {\n        label: string;\n        value: string;\n    }\n    interface OtherFieldConfig {\n        locations: Location[];\n    }\n    interface ListFieldConfig extends OtherFieldConfig {\n        options: Option[];\n    }\n    interface NumberFieldConfig extends OtherFieldConfig {\n        min: number;\n        max: number;\n        units: string;\n    }\n    type Config = ListFieldConfig | NumberFieldConfig | OtherFieldConfig;\n    interface ListFieldsParams extends PaginationOptions {\n        search?: string;\n        entity?: Entity;\n        type?: Type;\n    }\n    interface Field {\n        id: number;\n        name: string;\n        slug: string;\n        type: Type;\n        description: string;\n        entities: Entity[];\n        config: Config;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddFieldRequest {\n        name: string;\n        slug: string;\n        type: Type;\n        description?: string;\n        entities: Entity[];\n        config?: Config;\n    }\n}\n```\n\n##### glossaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Glossaries extends CrowdinApi {\n    listGlossaries(options?: GlossariesModel.ListGlossariesOptions): Promise<ResponseList<GlossariesModel.Glossary>>;\n    listGlossaries(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<GlossariesModel.Glossary>>;\n    addGlossary(request: GlossariesModel.CreateGlossaryRequest): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    getGlossary(glossaryId: number): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    deleteGlossary(glossaryId: number): Promise<void>;\n    editGlossary(glossaryId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    exportGlossary(glossaryId: number, request: GlossariesModel.ExportGlossaryRequest): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    checkGlossaryExportStatus(glossaryId: number, exportId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    downloadGlossary(glossaryId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    importGlossaryFile(glossaryId: number, request: GlossariesModel.GlossaryFile): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    checkGlossaryImportStatus(glossaryId: number, importId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    listTerms(glossaryId: number, options?: GlossariesModel.ListTermsOptions): Promise<ResponseList<GlossariesModel.Term>>;\n    listTerms(glossaryId: number, userId?: number, limit?: number, offset?: number, languageId?: string, translationOfTermId?: number, conceptId?: number): Promise<ResponseList<GlossariesModel.Term>>;\n    addTerm(glossaryId: number, request: GlossariesModel.CreateTermRequest): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, options?: GlossariesModel.ClearGlossaryOptions): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, languageId?: number, translationOfTermId?: number, conceptId?: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    getTerm(glossaryId: number, termId: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    deleteTerm(glossaryId: number, termId: number): Promise<void>;\n    editTerm(glossaryId: number, termId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Term>>;\n    listConcepts(glossaryId: number, options?: {\n        orderBy?: string;\n    } & PaginationOptions): Promise<ResponseList<GlossariesModel.Concept>>;\n    getConcept(glossaryId: number, conceptId: number): Promise<ResponseObject<GlossariesModel.Concept>>;\n    updateConcept(glossaryId: number, conceptId: number, request: GlossariesModel.UpdateConceptRequest): Promise<ResponseObject<GlossariesModel.Concept>>;\n    deleteConcept(glossaryId: number, conceptId: number): Promise<void>;\n    concordanceSearch(projectId: number, request: GlossariesModel.ConcordanceSearchRequest): Promise<ResponseList<GlossariesModel.ConcordanceSearchResponse>>;\n}\nexport declare namespace GlossariesModel {\n    interface Glossary {\n        id: number;\n        name: string;\n        groupId: number;\n        userId: number;\n        terms: number;\n        languageId: string;\n        languageIds: string[];\n        defaultProjectIds: number[];\n        projectIds: number[];\n        webUrl: string;\n        createdAt: string;\n    }\n    interface CreateGlossaryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    type ExportField = 'term' | 'description' | 'partOfSpeech' | 'type' | 'status' | 'gender' | 'note' | 'url' | 'conceptDefinition' | 'conceptSubject' | 'conceptNote' | 'conceptUrl' | 'conceptFigure';\n    interface ExportGlossaryRequest {\n        format?: GlossaryFormat;\n        exportFields?: ExportField[];\n    }\n    interface GlossaryExportStatusAttribute {\n        format: string;\n        exportFields: ExportField[];\n    }\n    interface GlossaryImportStatusAttribute {\n        storageId: number;\n        scheme: unknown;\n        firstLineContainsHeader: boolean;\n    }\n    interface GlossaryFile {\n        storageId: number;\n        scheme?: GlossaryFileScheme;\n        firstLineContainsHeader?: boolean;\n    }\n    interface ListTermsOptions extends PaginationOptions {\n        userId?: number;\n        languageId?: string;\n        conceptId?: number;\n        orderBy?: string;\n        croql?: string;\n        translationOfTermId?: number;\n    }\n    interface Term {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        languageId: string;\n        text: string;\n        description: string;\n        partOfSpeech: PartOfSpeech;\n        status: Status;\n        type: Type;\n        gender: Gender;\n        note: string;\n        url: string;\n        conceptId: number;\n        lemma: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTermRequest {\n        languageId: string;\n        text: string;\n        description?: string;\n        partOfSpeech?: PartOfSpeech;\n        status?: Status;\n        type?: Type;\n        gender?: Gender;\n        note?: string;\n        url?: string;\n        conceptId?: number;\n        translationOfTermId?: number;\n    }\n    interface ConcordanceSearchRequest extends PaginationOptions {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        glossary: Glossary;\n        concept: Concept;\n        sourceTerms: Term[];\n        targetTerms: Term[];\n    }\n    type Status = 'preferred' | 'admitted' | 'not recommended' | 'obsolete';\n    type Type = 'full form' | 'acronym' | 'abbreviation' | 'short form' | 'phrase' | 'variant';\n    type Gender = 'masculine' | 'feminine' | 'neuter' | 'other';\n    type GlossaryFormat = 'tbx' | 'tbx_v3' | 'csv' | 'xlsx';\n    interface GlossaryFileScheme {\n        [key: string]: number;\n    }\n    type PartOfSpeech = 'adjective' | 'adposition' | 'adverb' | 'auxiliary' | 'coordinating conjunction' | 'determiner' | 'interjection' | 'noun' | 'numeral' | 'particle' | 'pronoun' | 'proper noun' | 'subordinating conjunction' | 'verb' | 'other';\n    interface ListGlossariesOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ClearGlossaryOptions {\n        languageId?: number;\n        translationOfTermId?: number;\n        conceptId?: number;\n    }\n    interface Concept {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        subject: string;\n        definition: string;\n        translatable: boolean;\n        note: string;\n        url: string;\n        figure: string;\n        languagesDetails: LanguageDetails[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface LanguageDetails {\n        languageId: string;\n        userId: number;\n        definition: string;\n        note: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface UpdateConceptRequest {\n        subject?: string;\n        definition?: string;\n        translatable?: boolean;\n        note?: string;\n        url?: string;\n        figure?: string;\n        languagesDetails?: {\n            languageId: string;\n            definition: string;\n            note?: string;\n        }[];\n    }\n}\n```\n\n##### index.d.ts\n\n```typescript\nimport { Ai } from './ai';\nimport { Applications } from './applications';\nimport { Bundles } from './bundles';\nimport { Clients } from './clients';\nimport { ClientConfig, Credentials, CrowdinApi } from './core';\nimport { Dictionaries } from './dictionaries';\nimport { Distributions } from './distributions';\nimport { Fields } from './fields';\nimport { Glossaries } from './glossaries';\nimport { Issues } from './issues';\nimport { Labels } from './labels';\nimport { Languages } from './languages';\nimport { MachineTranslation } from './machineTranslation';\nimport { Notifications } from './notifications';\nimport { OrganizationWebhooks } from './organizationWebhooks';\nimport { ProjectsGroups } from './projectsGroups';\nimport { Reports } from './reports';\nimport { Screenshots } from './screenshots';\nimport { SecurityLogs } from './securityLogs';\nimport { SourceFiles } from './sourceFiles';\nimport { SourceStrings } from './sourceStrings';\nimport { StringComments } from './stringComments';\nimport { StringCorrections } from './stringCorrections';\nimport { StringTranslations } from './stringTranslations';\nimport { Tasks } from './tasks';\nimport { Teams } from './teams';\nimport { TranslationMemory } from './translationMemory';\nimport { TranslationStatus } from './translationStatus';\nimport { Translations } from './translations';\nimport { UploadStorage } from './uploadStorage';\nimport { Users } from './users';\nimport { Vendors } from './vendors';\nimport { Webhooks } from './webhooks';\nimport { Workflows } from './workflows';\nexport * from './ai';\nexport * from './applications';\nexport * from './bundles';\nexport * from './clients';\nexport * from './core';\nexport * from './dictionaries';\nexport * from './distributions';\nexport * from './fields';\nexport * from './glossaries';\nexport * from './issues';\nexport * from './labels';\nexport * from './languages';\nexport * from './machineTranslation';\nexport * from './notifications';\nexport * from './organizationWebhooks';\nexport * from './projectsGroups';\nexport * from './reports';\nexport * from './screenshots';\nexport * from './securityLogs';\nexport * from './sourceFiles';\nexport * from './sourceStrings';\nexport * from './stringComments';\nexport * from './stringCorrections';\nexport * from './stringTranslations';\nexport * from './tasks';\nexport * from './teams';\nexport * from './translationMemory';\nexport * from './translationStatus';\nexport * from './translations';\nexport * from './uploadStorage';\nexport * from './users';\nexport * from './vendors';\nexport * from './webhooks';\nexport * from './workflows';\nexport default class Client extends CrowdinApi {\n    readonly aiApi: Ai;\n    readonly applicationsApi: Applications;\n    readonly sourceFilesApi: SourceFiles;\n    readonly glossariesApi: Glossaries;\n    readonly languagesApi: Languages;\n    readonly translationsApi: Translations;\n    readonly translationStatusApi: TranslationStatus;\n    readonly projectsGroupsApi: ProjectsGroups;\n    readonly reportsApi: Reports;\n    readonly screenshotsApi: Screenshots;\n    readonly sourceStringsApi: SourceStrings;\n    readonly uploadStorageApi: UploadStorage;\n    readonly tasksApi: Tasks;\n    readonly translationMemoryApi: TranslationMemory;\n    readonly webhooksApi: Webhooks;\n    readonly organizationWebhooksApi: OrganizationWebhooks;\n    readonly machineTranslationApi: MachineTranslation;\n    readonly stringTranslationsApi: StringTranslations;\n    readonly workflowsApi: Workflows;\n    readonly usersApi: Users;\n    readonly vendorsApi: Vendors;\n    readonly issuesApi: Issues;\n    readonly teamsApi: Teams;\n    readonly distributionsApi: Distributions;\n    readonly dictionariesApi: Dictionaries;\n    readonly labelsApi: Labels;\n    readonly stringCommentsApi: StringComments;\n    readonly bundlesApi: Bundles;\n    readonly notificationsApi: Notifications;\n    readonly clientsApi: Clients;\n    readonly securityLogsApi: SecurityLogs;\n    readonly fieldsApi: Fields;\n    readonly stringCorrectionsApi: StringCorrections;\n    constructor(credentials: Credentials, config?: ClientConfig);\n}\nexport { Client };\n```\n\n##### issues/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Issues extends CrowdinApi {\n    listReportedIssues(projectId: number, options?: IssuesModel.ListReportedIssuesOptions): Promise<ResponseList<IssuesModel.Issue>>;\n    listReportedIssues(projectId: number, limit?: number, offset?: number, type?: IssuesModel.Type, status?: IssuesModel.Status): Promise<ResponseList<IssuesModel.Issue>>;\n    editIssue(projectId: number, issueId: number, request: PatchRequest[]): Promise<ResponseObject<IssuesModel.Issue>>;\n}\nexport declare namespace IssuesModel {\n    type Type = 'all' | 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type Status = 'all' | 'resolved' | 'unresolved';\n    interface Issue {\n        id: number;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: string;\n        languageId: string;\n        type: Type;\n        status: Status;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface String {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface ListReportedIssuesOptions extends PaginationOptions {\n        type?: IssuesModel.Type;\n        status?: IssuesModel.Status;\n    }\n}\n```\n\n##### labels/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { ScreenshotsModel } from '../screenshots';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Labels extends CrowdinApi {\n    listLabels(projectId: number, options?: LabelsModel.ListLabelsParams): Promise<ResponseList<LabelsModel.Label>>;\n    listLabels(projectId: number, limit?: number, offset?: number): Promise<ResponseList<LabelsModel.Label>>;\n    addLabel(projectId: number, request: LabelsModel.AddLabelRequest): Promise<ResponseObject<LabelsModel.Label>>;\n    getLabel(projectId: number, labelId: number): Promise<ResponseObject<LabelsModel.Label>>;\n    deleteLabel(projectId: number, labelId: number): Promise<void>;\n    editLabel(projectId: number, labelId: number, request: PatchRequest[]): Promise<ResponseObject<LabelsModel.Label>>;\n    assignLabelToScreenshots(projectId: number, labelId: number, request: LabelsModel.AssignLabelToScreenshotsRequet): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    unassignLabelFromScreenshots(projectId: number, labelId: number, screenshotIds: string): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    assignLabelToString(projectId: number, labelId: number, request: LabelsModel.AssignLabelToStringsRequet): Promise<ResponseList<SourceStringsModel.String>>;\n    unassignLabelFromString(projectId: number, labelId: number, stringIds: string): Promise<ResponseList<SourceStringsModel.String>>;\n}\nexport declare namespace LabelsModel {\n    interface ListLabelsParams extends PaginationOptions {\n        orderBy?: string;\n    }\n    interface Label {\n        id: number;\n        title: string;\n        isSystem?: boolean;\n    }\n    interface AddLabelRequest {\n        title: string;\n    }\n    interface AssignLabelToStringsRequet {\n        stringIds: number[];\n    }\n    interface AssignLabelToScreenshotsRequet {\n        screenshotIds: number[];\n    }\n}\n```\n\n##### languages/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Languages extends CrowdinApi {\n    listSupportedLanguages(options?: PaginationOptions): Promise<ResponseList<LanguagesModel.Language>>;\n    listSupportedLanguages(limit?: number, offset?: number): Promise<ResponseList<LanguagesModel.Language>>;\n    addCustomLanguage(request: LanguagesModel.AddLanguageRequest): Promise<ResponseObject<LanguagesModel.Language>>;\n    getLanguage(languageId: string): Promise<ResponseObject<LanguagesModel.Language>>;\n    deleteCustomLanguage(languageId: string): Promise<void>;\n    editCustomLanguage(languageId: string, request: PatchRequest[]): Promise<ResponseObject<LanguagesModel.Language>>;\n}\nexport declare namespace LanguagesModel {\n    interface Language {\n        id: string;\n        name: string;\n        editorCode: string;\n        twoLettersCode: string;\n        threeLettersCode: string;\n        locale: string;\n        androidCode: string;\n        osxCode: string;\n        osxLocale: string;\n        pluralCategoryNames: string[];\n        pluralRules: string;\n        pluralExamples: string[];\n        textDirection: TextDirection;\n        dialectOf: string;\n    }\n    interface AddLanguageRequest {\n        name: string;\n        code: string;\n        localeCode: string;\n        textDirection: TextDirection;\n        pluralCategoryNames: string[];\n        threeLettersCode: string;\n        twoLettersCode?: string;\n        dialectOf?: string;\n    }\n    type TextDirection = 'ltr' | 'rtl';\n}\n```\n\n##### machineTranslation/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class MachineTranslation extends CrowdinApi {\n    listMts(options?: MachineTranslationModel.ListMTsOptions): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    listMts(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    createMt(request: MachineTranslationModel.CreateMachineTranslationRequest): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    getMt(mtId: number): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    deleteMt(mtId: number): Promise<void>;\n    updateMt(mtId: number, request: PatchRequest[]): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    translate(mtId: number, request: MachineTranslationModel.TranslateRequest): Promise<ResponseObject<MachineTranslationModel.TranslateResponse>>;\n}\nexport declare namespace MachineTranslationModel {\n    interface MachineTranslation {\n        id: number;\n        groupId: number;\n        name: string;\n        type: number;\n        credentials: Credentials;\n        projectIds: number[];\n        supportedLanguageIds: string[];\n        supportedLanguagePairs: Record<string, string[]>;\n        enabledLanguageIds: string[];\n        enabledProjectIds: number[];\n        isEnabled: boolean;\n    }\n    type Credentials = {\n        apiKey: string;\n    } | {\n        credentials: string;\n    } | {\n        model: string;\n        apiKey: string;\n    } | {\n        isSystemCredentials: boolean;\n        apiKey: string;\n    } | {\n        endpoint: string;\n        apiKey: string;\n    } | {\n        url: string;\n    } | {\n        accessKey: string;\n        secretKey: string;\n    };\n    interface CreateMachineTranslationRequest {\n        name: string;\n        type: string;\n        credentials: Credentials;\n        groupId?: number;\n        enabledLanguageIds?: string[];\n        enabledProjectIds?: number[];\n        isEnabled?: boolean;\n    }\n    interface TranslateRequest {\n        languageRecognitionProvider?: LanguageRecognitionProvider;\n        sourceLanguageId?: string;\n        targetLanguageId: string;\n        strings?: string[];\n    }\n    interface TranslateResponse {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        strings: string[];\n        translations: string[];\n    }\n    type LanguageRecognitionProvider = 'crowdin' | 'engine';\n    interface ListMTsOptions extends PaginationOptions {\n        groupId?: number;\n    }\n}\n```\n\n##### notifications/index.d.ts\n\n```typescript\nimport { CrowdinApi } from '../core';\nexport declare class Notifications extends CrowdinApi {\n    sendNotificationToAuthenticatedUser(request: NotificationsModel.Notification): Promise<void>;\n    sendNotificationToProjectMembers(projectId: number, request: NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n    sendNotificationToOrganizationMembers(request: NotificationsModel.Notification | NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n}\nexport declare namespace NotificationsModel {\n    interface Notification {\n        message: string;\n    }\n    interface NotificationByUsers extends Notification {\n        userIds: number[];\n    }\n    interface NotificationByRole extends Notification {\n        role: 'owner' | 'admin';\n    }\n}\n```\n\n##### organizationWebhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { WebhooksModel } from '../webhooks';\nexport declare class OrganizationWebhooks extends CrowdinApi {\n    listWebhooks(options?: PaginationOptions): Promise<ResponseList<OrganizationWebhooksModel.OrganizationWebhook>>;\n    addWebhook(request: OrganizationWebhooksModel.AddOrganizationWebhookRequest): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    getWebhook(webhookId: number): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    deleteWebhook(webhookId: number): Promise<void>;\n    editWebhook(webhookId: number, request: PatchRequest[]): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n}\nexport declare namespace OrganizationWebhooksModel {\n    type OrganizationWebhook = Omit<WebhooksModel.Webhook, 'projectId' | 'events'> & {\n        events: Event[];\n    };\n    type AddOrganizationWebhookRequest = Omit<WebhooksModel.AddWebhookRequest, 'events'> & {\n        events: Event[];\n    };\n    type Event = 'group.created' | 'group.deleted' | 'project.created' | 'project.deleted';\n}\n```\n\n##### projectsGroups/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class ProjectsGroups extends CrowdinApi {\n    listGroups(options?: ProjectsGroupsModel.ListGroupsOptions): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    listGroups(parentId?: number, offset?: number, userId?: number, limit?: number): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    addGroup(request: ProjectsGroupsModel.AddGroupRequest): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    getGroup(groupId: number): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    deleteGroup(groupId: number): Promise<void>;\n    editGroup(groupId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    listProjects(options?: ProjectsGroupsModel.ListProjectsOptions): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    listProjects(groupId?: number, hasManagerAccess?: BooleanInt, limit?: number, offset?: number): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    addProject(request: ProjectsGroupsModel.CreateProjectEnterpriseRequest | ProjectsGroupsModel.CreateProjectRequest): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    getProject(projectId: number): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    deleteProject(projectId: number): Promise<void>;\n    editProject(projectId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    downloadProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    resetProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    listProjectFileFormatSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    addProjectFileFormatSettings(projectId: number, request: ProjectsGroupsModel.AddProjectFileFormatSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    getProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    deleteProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<void>;\n    editProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    listProjectStringsExporterSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    addProjectStringsExporterSettings(projectId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    getProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    deleteProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<void>;\n    editProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n}\nexport declare namespace ProjectsGroupsModel {\n    interface Group {\n        id: number;\n        name: string;\n        description: string;\n        parentId: number;\n        organizationId: number;\n        userId: number;\n        subgroupsCount: number;\n        projectsCount: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddGroupRequest {\n        name: string;\n        parentId?: number;\n        description?: string;\n    }\n    interface Project {\n        id: number;\n        type: Type;\n        userId: number;\n        sourceLanguageId: string;\n        targetLanguageIds: string[];\n        languageAccessPolicy: LanguageAccessPolicy;\n        name: string;\n        identifier: string;\n        description: string;\n        visibility: string;\n        logo: string;\n        publicDownloads: boolean;\n        createdAt: string;\n        updatedAt: string;\n        lastActivity: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        webUrl: string;\n        savingsReportSettingsTemplateId: number;\n        fields: Record<string, any>;\n        cname: string;\n        groupId: number;\n        background: string;\n        isExternal: boolean;\n        externalType: string;\n        externalProjectId: number;\n        externalOrganizationId: number;\n        workflowId: number;\n        hasCrowdsourcing: boolean;\n        publicUrl: string;\n    }\n    interface CreateProjectRequest {\n        name: string;\n        identifier: string;\n        sourceLanguageId: string;\n        targetLanguageIds?: string[];\n        visibility?: JoinPolicy;\n        languageAccessPolicy?: LanguageAccessPolicy;\n        cname?: string;\n        description?: string;\n        tagDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        autoSubstitution?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        useGlobalTm?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportApprovedOnly?: boolean;\n        qaCheckIsActive?: boolean;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        normalizePlaceholder?: boolean;\n        notificationSettings?: NotificationSettings;\n        tmPreTranslate?: ProjectSettings['tmPreTranslate'];\n        mtPreTranslate?: ProjectSettings['mtPreTranslate'];\n        aiPreTranslate?: ProjectSettings['aiPreTranslate'];\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        savingsReportSettingsTemplateId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    interface CreateProjectEnterpriseRequest {\n        name: string;\n        sourceLanguageId: string;\n        templateId?: number;\n        steps?: WorkflowTemplateStepConfig[];\n        groupId?: number;\n        targetLanguageIds?: string[];\n        vendorId?: number;\n        mtEngineId?: number;\n        description?: string;\n        translateDuplicates?: TranslateDuplicates;\n        tagsDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        taskReviewerIds?: number[];\n        autoSubstitution?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        delayedWorkflowStart?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: number;\n        normalizePlaceholder?: boolean;\n        qaCheckIsActive?: boolean;\n        qaApprovalsCount?: number;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        customQaCheckIds?: number[];\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        notificationSettings?: NotificationSettings;\n        savingsReportSettingsTemplateId?: number;\n        fields?: Record<string, any>;\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        alignmentActionAiPromptId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    type GlossaryAccessOption = 'readOnly' | 'fullAccess' | 'manageDrafts';\n    interface ProjectSettings extends Project {\n        translateDuplicates: TranslateDuplicates;\n        tagsDetection: TagDetection;\n        glossaryAccess: boolean;\n        glossaryAccessOption: GlossaryAccessOption;\n        isMtAllowed: boolean;\n        taskBasedAccessControl: boolean;\n        hiddenStringsProofreadersAccess: boolean;\n        autoSubstitution: boolean;\n        exportTranslatedOnly: boolean;\n        skipUntranslatedStrings: boolean;\n        exportApprovedOnly: boolean;\n        autoTranslateDialects: boolean;\n        useGlobalTm: boolean;\n        showTmSuggestionsDialects: boolean;\n        isSuspended: boolean;\n        qaCheckIsActive: boolean;\n        qaCheckCategories: CheckCategories;\n        qaChecksIgnorableCategories: CheckCategories;\n        languageMapping: LanguageMapping;\n        notificationSettings: NotificationSettings;\n        defaultTmId: number;\n        defaultGlossaryId: number;\n        assignedTms: {\n            [id: string]: {\n                priority: number;\n            };\n        };\n        assignedGlossaries: number[];\n        tmPenalties: {\n            autoSubstitution: number;\n            tmPriority: {\n                priority: number;\n                penalty: number;\n            };\n            multipleTranslations: number;\n            timeSinceLastUsage: {\n                months: number;\n                penalty: number;\n            };\n            timeSinceLastModified: {\n                months: number;\n                penalty: number;\n            };\n        };\n        normalizePlaceholder: boolean;\n        tmPreTranslate: {\n            enabled: boolean;\n            autoApproveOption: 'all' | 'perfectMatchOnly' | 'exceptAutoSubstituted' | 'perfectMatchApprovedOnly' | 'none';\n            minimumMatchRatio: 'perfect' | '100';\n        };\n        mtPreTranslate: {\n            enabled: boolean;\n            mts: {\n                mtId: number;\n                languageIds: string[];\n            }[];\n        };\n        aiPreTranslate: {\n            enabled: boolean;\n            aiPrompts: {\n                aiPromptId: number;\n                languageIds: string[];\n            }[];\n        };\n        assistActionAiPromptId: number;\n        editorSuggestionAiPromptId: number;\n        inContext: boolean;\n        inContextProcessHiddenStrings: string;\n        inContextPseudoLanguageId: string;\n        inContextPseudoLanguage: LanguagesModel.Language;\n        saveMetaInfoInSource: boolean;\n        skipUntranslatedFiles: boolean;\n        tmContextType: TmContextType;\n        clientOrganizationId: number;\n        taskReviewerIds: number[];\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n        qaApprovalsCount: number;\n        customQaCheckIds: number[];\n        externalQaCheckIds: number[];\n        delayedWorkflowStart: boolean;\n        alignmentActionAiPromptId: number;\n    }\n    enum Type {\n        FILES_BASED = 0,\n        STRINGS_BASED = 1\n    }\n    enum TagDetection {\n        AUTO = 0,\n        COUNT_TAGS = 1,\n        SKIP_TAGS = 2\n    }\n    type JoinPolicy = 'open' | 'private';\n    type LanguageAccessPolicy = 'open' | 'moderate';\n    interface CheckCategories {\n        empty: boolean;\n        size: boolean;\n        tags: boolean;\n        spaces: boolean;\n        variables: boolean;\n        punctuation: boolean;\n        symbolRegister: boolean;\n        specialSymbols: boolean;\n        wrongTranslation: boolean;\n        spellcheck: boolean;\n        icu: boolean;\n        terms: boolean;\n        duplicate: boolean;\n        ftl: boolean;\n        android: boolean;\n    }\n    interface LanguageMapping {\n        [key: string]: LanguageMappingEntity;\n    }\n    interface LanguageMappingEntity {\n        name: string;\n        two_letters_code: string;\n        three_letters_code: string;\n        locale: string;\n        locale_with_underscore: string;\n        android_code: string;\n        osx_code: string;\n        osx_locale: string;\n    }\n    enum TranslateDuplicates {\n        SHOW = 0,\n        HIDE_REGULAR_DETECTION = 1,\n        SHOW_AUTO_TRANSLATE = 2,\n        SHOW_WITHIN_VERION_BRANCH_REGULAR_DETECTION = 3,\n        HIDE_STRICT_DETECTION = 4,\n        SHOW_WITHIN_VERION_BRANCH_STRICT_DETECTION = 5\n    }\n    interface NotificationSettings {\n        translatorNewStrings?: boolean;\n        managerNewStrings?: boolean;\n        managerLanguageCompleted?: boolean;\n    }\n    interface ListGroupsOptions extends PaginationOptions {\n        parentId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListProjectsOptions extends PaginationOptions {\n        groupId?: number;\n        hasManagerAccess?: BooleanInt;\n        orderBy?: string;\n        type?: BooleanInt;\n    }\n    type Settings = PropertyFileFormatSettings | CommonFileFormatSettings | XmlFileFormatSettings | MdxV2FormatSettings | FmHtmlFormatSettings | HtmlFormatSettings | JsonFormatSettings | MdxV1FormatSettings | JavaScriptFileFormatSettings | DocxFileFormatSettings;\n    interface ProjectFileFormatSettings {\n        id: number;\n        name: string;\n        format: string;\n        extensions: string[];\n        settings: Settings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddProjectFileFormatSettingsRequest {\n        format: string;\n        settings: Settings;\n    }\n    interface PropertyFileFormatSettings {\n        escapeQuotes?: 0 | 1 | 2 | 3;\n        escapeSpecialCharacters?: 0 | 1;\n        exportPattern?: string;\n    }\n    interface JavaScriptFileFormatSettings {\n        exportPattern?: 'string';\n        exportQuotes?: 'single' | 'double';\n    }\n    interface CommonFileFormatSettings {\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        exportPattern?: string;\n    }\n    interface XmlFileFormatSettings extends CommonFileFormatSettings {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        translatableElements?: string[];\n    }\n    interface JsonFormatSettings extends CommonFileFormatSettings {\n        type?: 'i18next_json' | 'nestjs_i18n';\n    }\n    interface MdxV2FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxV1FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n        type?: 'mdx_v1' | 'mdx_v2';\n    }\n    interface FmHtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface HtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n    }\n    interface DocxFileFormatSettings extends CommonFileFormatSettings {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n    }\n    type TmContextType = 'segmentContext' | 'auto' | 'prevAndNextSegment';\n    type WorkflowTemplateStepConfig = WorkflowTemplateStepConfigTranslateProofread | WorkflowTemplateStepConfigVendor | WorkflowTemplateStepConfigTMPreTranslate | WorkflowTemplateStepConfigMTPreTranslate;\n    interface WorkflowTemplateStepConfigTranslateProofread {\n        id: number;\n        languages?: string[];\n        assignees?: number[];\n        config?: {\n            assignees: {\n                [key: string]: number[];\n            };\n        };\n    }\n    interface WorkflowTemplateStepConfigVendor {\n        id: number;\n        languages?: string[];\n        vendorId?: number;\n    }\n    interface WorkflowTemplateStepConfigTMPreTranslate {\n        id: number;\n        languages?: string[];\n        config?: {\n            minRelevant?: number;\n            autoSubstitution?: boolean;\n        };\n    }\n    interface WorkflowTemplateStepConfigMTPreTranslate {\n        id: number;\n        languages?: string[];\n        mtId?: number;\n    }\n    type StringsExporterSettings = AndroidStringsExporterSettings | MacOSXStringsExporterSettings | XliffStringsExporterSettings;\n    interface ProjectStringsExporterSettings {\n        id: number;\n        format: string;\n        settings: StringsExporterSettings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AndroidStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n        useCdataForStringsWithTags?: boolean;\n    }\n    interface MacOSXStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n    }\n    interface XliffStringsExporterSettings {\n        languagePairMapping?: {\n            [key: string]: {\n                sourceLanguageId: string;\n            };\n        };\n        copySourceToEmptyTarget?: boolean;\n        exportTranslatorsComment?: boolean;\n    }\n    interface AddProjectStringsExporterSettingsRequest {\n        format: string;\n        settings: StringsExporterSettings;\n    }\n}\n```\n\n##### reports/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Reports extends CrowdinApi {\n    listOrganizationReportArchives(options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getOrganizationReportArchive(archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteOrganizationReportArchive(archiveId: number): Promise<void>;\n    exportOrganizationReportArchive(archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkOrganizationReportArchiveStatus(archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadOrganizationReportArchive(archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    listUserReportArchives(userId: number, options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getUserReportArchive(userId: number, archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteUserReportArchive(userId: number, archiveId: number): Promise<void>;\n    exportUserReportArchive(userId: number, archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkUserReportArchiveStatus(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadUserReportArchive(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateGroupReport(groupId: number, request: ReportsModel.GenerateGroupReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    checkGroupReportStatus(groupId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    downloadGroupReport(groupId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listOrganizationReportSettingsTemplates(options?: ReportsModel.ListOrganizationReportSettingsParams): Promise<ResponseList<ReportsModel.OrganizationReportSettings>>;\n    addOrganizationReportSettingsTemplate(request: ReportsModel.AddOrganizationReportSettingsRequest): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    getOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    editOrganizationReportSettingsTemplate(reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    deleteOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<void>;\n    generateOrganizationReport(request: ReportsModel.GenerateOrganizationReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    checkOrganizationReportStatus(reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    downloadOrganizationReport(reportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateReport(projectId: number, request: ReportsModel.GenerateReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    checkReportStatus(projectId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    downloadReport(projectId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listReportSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.ReportSettings>>;\n    addReportSettingsTemplate(projectId: number, request: ReportsModel.AddReportSettingsRequest): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    getReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    editReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    deleteReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<void>;\n    listUserReportSettingsTemplates(userId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.UserReportSettings>>;\n    addUserReportSettingsTemplate(userId: number, request: ReportsModel.AddUserReportSettingsRequest): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    getUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    editUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    deleteUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<void>;\n}\nexport declare namespace ReportsModel {\n    interface ReportArchive {\n        id: number;\n        scopeType: string;\n        scopeId: number;\n        userId: number;\n        name: string;\n        webUrl: string;\n        scheme: any;\n        createdAt: string;\n    }\n    interface ListReportArchiveParams extends PaginationOptions {\n        scopeType: string;\n        scopeId: number;\n    }\n    interface ReportArchiveStatusAttribute {\n        format: Format;\n        reportName: string;\n        schema: any;\n    }\n    type GroupReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    type OrganizationReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    interface GenerateGroupReportRequest {\n        name: string;\n        schema: GroupReportSchema;\n    }\n    interface GenerateOrganizationReportRequest {\n        name: string;\n        schema: OrganizationReportSchema;\n    }\n    interface GroupTranslationCostsPostEditingSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n    }\n    interface GroupTranslationCostsPerEditingByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n    }\n    interface CostsEstimationSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface CostsEstimationByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface GroupTopMembersSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface RawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type GenerateReportRequest = PreTranslateEfficeincy | PreTranslateAccuracy | TranslateAccuracy | CostEstimationPostEnding | TranslationCostsPostEnding | TopMembers | ContributionRawData | SourceContentUpdates | ProjectMembers | EditorIssues | QaCheckIssues | SavingActivity | TranslationActivity;\n    type ReportSchema = Pick<GenerateReportRequest, 'schema'>;\n    interface PreTranslateEfficeincy {\n        name: 'pre-translate-efficiency';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface PreTranslateAccuracy {\n        name: 'pre-translate-accuracy';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface TranslateAccuracy {\n        name: 'translator-accuracy';\n        schema: TranslateAccuracySchema;\n    }\n    interface CostEstimationPostEnding {\n        name: 'costs-estimation-pe';\n        schema: CostEstimationPostEndingSchema | CostEstimationPostEndingSchemaByTask;\n    }\n    interface TranslationCostsPostEnding {\n        name: 'translation-costs-pe';\n        schema: TranslationCostsPostEndingSchema | TranslationCostsPostEndingSchemaByTask;\n    }\n    interface TopMembers {\n        name: 'top-members';\n        schema: TopMembersSchema;\n    }\n    interface ContributionRawData {\n        name: 'contribution-raw-data';\n        schema: ContributionRawDataSchema | ContributionRawDataSchemaByTask;\n    }\n    interface SourceContentUpdates {\n        name: 'source-content-updates';\n        schema: SourceContentUpdatesSchema;\n    }\n    interface ProjectMembers {\n        name: 'project-members';\n        schema: MembersSchema;\n    }\n    interface EditorIssues {\n        name: 'editor-issues';\n        schema: EditorIssuesSchema;\n    }\n    interface QaCheckIssues {\n        name: 'qa-check-issues';\n        schema: ProjectQaCheckIssuesSchema;\n    }\n    interface SavingActivity {\n        name: 'saving-activity';\n        schema: SavingActivitySchema;\n    }\n    interface TranslationActivity {\n        name: 'translation-activity';\n        schema: ProjectConsumptionSchema;\n    }\n    interface ReportStatusAttributes<S> {\n        format: Format;\n        reportName: string;\n        schema: S;\n    }\n    interface PreTranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateAccuracySchemaByTask {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        taskId?: number;\n    }\n    interface TranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        userIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface CostEstimationPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface CostEstimationPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface TranslationCostsPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n    }\n    interface TranslationCostsPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number;\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface TopMembersSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: string;\n        columns?: Column[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchemaByTask {\n        mode: ContributionMode;\n        unit?: Unit;\n        taskId: number;\n        columns?: Column[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateEfficiencySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ListOrganizationReportSettingsParams extends PaginationOptions {\n        projectId?: number;\n        groupId?: number;\n    }\n    interface ReportSettings {\n        id: number;\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic: boolean;\n        isGlobal: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddReportSettingsRequest {\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic?: boolean;\n        isGlobal?: boolean;\n    }\n    type UserReportSettings = Omit<ReportSettings, 'isPublic' | 'isGlobal'>;\n    type AddUserReportSettingsRequest = Omit<AddReportSettingsRequest, 'isPublic' | 'isGlobal'>;\n    type OrganizationReportSettings = Omit<ReportSettings, 'isGlobal'> & {\n        projectId: number;\n        groupId: number;\n    };\n    type AddOrganizationReportSettingsRequest = Omit<AddReportSettingsRequest, 'isGlobal'> & {\n        projectId?: number;\n        groupId?: number;\n    };\n    interface ReportSettinsConfig {\n        baseRates: BaseRate;\n        netRateSchemes: NetRateSchemas[];\n        individualRates: IndividualRate[];\n    }\n    type Unit = 'strings' | 'words' | 'chars' | 'chars_with_spaces';\n    type Currency = 'USD' | 'EUR' | 'JPY' | 'GBP' | 'AUD' | 'CAD' | 'CHF' | 'CNY' | 'SEK' | 'NZD' | 'MXN' | 'SGD' | 'HKD' | 'NOK' | 'KRW' | 'TRY' | 'RUB' | 'INR' | 'BRL' | 'ZAR' | 'GEL' | 'UAH';\n    type Format = 'xlsx' | 'csv' | 'json';\n    interface BaseRate {\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface IndividualRate extends BaseRate {\n        languageIds: string[];\n        userIds: number[];\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface NetRateSchemas {\n        tmMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        mtMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        suggestionMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        aiMatch?: {\n            matchType: Mode;\n            price: number;\n        }[];\n    }\n    type Mode = 'no_match' | 'tm_match' | 'approval' | '99-95' | '94-90' | '89-80' | 'perfect' | '100';\n    type ContributionMode = 'translations' | 'approvals' | 'votes';\n    type GroupBy = 'user' | 'language';\n    type LabelIncludeType = 'strings_with_label' | 'strings_without_label';\n    type Column = 'userId' | 'languageId' | 'stringId' | 'translationId' | 'fileId' | 'filePath' | 'pluralForm' | 'sourceStringTextHash' | 'mtEngine' | 'mtId' | 'tmName' | 'tmId' | 'aiPromptName' | 'aiPromptId' | 'preTranslated' | 'tmMatch' | 'mtMatch' | 'aiMatch' | 'suggestionMatch' | 'sourceUnits' | 'targetUnits' | 'createdAt' | 'updatedAt' | 'mark';\n    interface SourceContentUpdatesSchema {\n        unit?: Unit;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface MembersSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface EditorIssuesSchema {\n        dateFrom?: string;\n        dateTo?: string;\n        format?: Format;\n        languageId?: string;\n        userId?: number;\n    }\n    interface ProjectQaCheckIssuesSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface SavingActivitySchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface ProjectConsumptionSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface GroupTaskUsageSchema {\n        format: Format;\n        type: 'workload' | 'create-vs-resolve' | 'performance' | 'time' | 'cost';\n        projectIds?: number[];\n        assigneeId?: number;\n        creatorId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n        wordsCountFrom?: number;\n        wordsCountTo?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        currency?: Currency;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n    }\n    interface GroupQaCheckIssuesSchema {\n        projectIds?: number[];\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface GroupTranslationActivitySchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n}\n```\n\n##### screenshots/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Screenshots extends CrowdinApi {\n    listScreenshots(projectId: number, options?: ScreenshotsModel.ListScreenshotParams): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    listScreenshots(projectId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    addScreenshot(projectId: number, request: ScreenshotsModel.CreateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    getScreenshot(projectId: number, screenshotId: number): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    updateScreenshot(projectId: number, screenshotId: number, request: ScreenshotsModel.UpdateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    deleteScreenshot(projectId: number, screenshotId: number): Promise<void>;\n    editScreenshot(projectId: number, screenshotId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    listScreenshotTags(projectId: number, screenshotId: number, options?: PaginationOptions): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    listScreenshotTags(projectId: number, screenshotId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    replaceTags(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[] | ScreenshotsModel.AutoTagRequest): Promise<void>;\n    addTag(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[]): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    clearTags(projectId: number, screenshotId: number): Promise<void>;\n    getTag(projectId: number, screenshotId: number, tagId: number): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    deleteTag(projectId: number, screenshotId: number, tagId: number): Promise<void>;\n    updateTag(projectId: number, screenshotId: number, tagId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n}\nexport declare namespace ScreenshotsModel {\n    interface ListScreenshotParams extends PaginationOptions {\n        stringIds?: number[];\n        stringId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Screenshot {\n        id: number;\n        userId: number;\n        url: string;\n        webUrl: string;\n        name: string;\n        size: Size;\n        tagsCount: number;\n        tags: Tag[];\n        labels: number[];\n        labelIds: number[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateScreenshotRequest {\n        storageId: number;\n        name: string;\n        autoTag?: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        labelIds?: number[];\n    }\n    interface UpdateScreenshotRequest {\n        storageId: number;\n        name: string;\n    }\n    interface Tag {\n        id: number;\n        screenshotId: number;\n        stringId: number;\n        position: Position;\n        createdAt: string;\n    }\n    interface ReplaceTagRequest {\n        stringId: number;\n        position?: Position;\n    }\n    interface AutoTagRequest {\n        autoTag: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n    }\n    interface Size {\n        width: number;\n        height: number;\n    }\n    interface Position {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n    }\n}\n```\n\n##### securityLogs/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class SecurityLogs extends CrowdinApi {\n    listOrganizationSecurityLogs(options?: SecurityLogsModel.ListOrganizationSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getOrganizationSecurityLog(securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n    listUserSecurityLogs(userId: number, options?: SecurityLogsModel.ListUserSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getUserSecurityLog(userId: number, securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n}\nexport declare namespace SecurityLogsModel {\n    type Event = 'login' | 'password.set' | 'password.change' | 'email.change' | 'login.change' | 'personal_token.issued' | 'personal_token.revoked' | 'mfa.enabled' | 'mfa.disabled' | 'session.revoke' | 'session.revoke_all' | 'sso.connect' | 'sso.disconnect' | 'user.remove' | 'application.connected' | 'application.disconnected' | 'webauthn.created' | 'webauthn.deleted' | 'trusted_device.remove' | 'trusted_device.remove_all' | 'device_verification.enabled' | 'device_verification.disabled';\n    interface ListOrganizationSecurityLogsParams extends PaginationOptions {\n        event?: Event;\n        createdAfter?: string;\n        createdBefore?: string;\n        ipAddress?: string;\n        userId?: number;\n    }\n    type ListUserSecurityLogsParams = Omit<ListOrganizationSecurityLogsParams, 'userId'>;\n    interface SecurityLog {\n        id: number;\n        event: string;\n        info: string;\n        userId: number;\n        location: string;\n        ipAddress: string;\n        deviceName: string;\n        createdAt: string;\n    }\n}\n```\n\n##### sourceFiles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class SourceFiles extends CrowdinApi {\n    getClonedBranch(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    clonedBranch(projectId: number, branchId: number, request: SourceFilesModel.CloneBranchRequest): Promise<ResponseObject<Status<object>>>;\n    checkBranchClonedStatus(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<Status<object>>>;\n    listProjectBranches(projectId: number, options?: SourceFilesModel.ListProjectBranchesOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n    listProjectBranches(projectId: number, name?: string, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.Branch>>;\n    createBranch(projectId: number, request: SourceFilesModel.CreateBranchRequest): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    getBranch(projectId: number, branchId: number): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    deleteBranch(projectId: number, branchId: number): Promise<void>;\n    editBranch(projectId: number, branchId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    mergeBranch(projectId: number, branchId: number, request: SourceFilesModel.MergeBranchRequest): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    checkBranchMergeStatus(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    getBranchMergeSummary(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<SourceFilesModel.MergeBranchSummary>>;\n    listProjectDirectories(projectId: number, options?: SourceFilesModel.ListProjectDirectoriesOptions): Promise<ResponseList<SourceFilesModel.Directory>>;\n    listProjectDirectories(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, filter?: string, recursion?: string): Promise<ResponseList<SourceFilesModel.Directory>>;\n    createDirectory(projectId: number, request: SourceFilesModel.CreateDirectoryRequest): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    getDirectory(projectId: number, directoryId: number): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    deleteDirectory(projectId: number, directoryId: number): Promise<void>;\n    editDirectory(projectId: number, directoryId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    listProjectFiles(projectId: number, options?: SourceFilesModel.ListProjectFilesOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listProjectFiles(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, recursion?: any, filter?: string): Promise<ResponseList<SourceFilesModel.File>>;\n    createFile(projectId: number, request: SourceFilesModel.CreateFileRequest): Promise<ResponseObject<SourceFilesModel.File>>;\n    getFile(projectId: number, fileId: number): Promise<ResponseObject<SourceFilesModel.File>>;\n    updateOrRestoreFile(projectId: number, fileId: number, request: SourceFilesModel.ReplaceFileFromStorageRequest | SourceFilesModel.RestoreFile): Promise<ResponseObject<SourceFilesModel.File>>;\n    deleteFile(projectId: number, fileId: number): Promise<void>;\n    editFile(projectId: number, fileId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.File>>;\n    downloadFilePreview(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    downloadFile(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    listFileRevisions(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    listFileRevisions(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    getFileRevision(projectId: number, fileId: number, revisionId: number): Promise<ResponseObject<SourceFilesModel.FileRevision>>;\n    listReviewedSourceFilesBuild(projectId: number, options?: SourceFilesModel.ListReviewedSourceFilesBuildOptions): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    listReviewedSourceFilesBuild(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    buildReviewedSourceFiles(projectId: number, request?: SourceFilesModel.BuildReviewedSourceFilesRequest): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    checkReviewedSourceFilesBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    downloadReviewedSourceFiles(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace SourceFilesModel {\n    interface Branch {\n        id: number;\n        projectId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateBranchRequest {\n        name: string;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface CloneBranchRequest {\n        name: string;\n        title?: string;\n    }\n    interface MergeBranchRequest {\n        deleteAfterMerge?: boolean;\n        sourceBranchId: number;\n        dryRun?: boolean;\n    }\n    interface MergeBranchAttributes {\n        sourceBranchId: number;\n        deleteAfterMerge: boolean;\n    }\n    interface MergeBranchSummary {\n        status: string;\n        sourceBranchId: number;\n        targetBranchId: number;\n        dryRun: boolean;\n        details: {\n            added: number;\n            deleted: number;\n            updated: number;\n            conflicted: number;\n        };\n    }\n    type Priority = 'low' | 'normal' | 'high';\n    interface ListProjectDirectoriesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        filter?: string;\n        recursion?: string;\n        orderBy?: string;\n    }\n    interface Directory {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        path: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateDirectoryRequest {\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface ListProjectFilesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        recursion?: any;\n        filter?: string;\n        orderBy?: string;\n    }\n    interface File {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        context: string;\n        type: string;\n        path: string;\n        status: string;\n        revisionId: number;\n        priority: Priority;\n        importOptions: ImportOptions;\n        exportOptions: GeneralExportOptions | PropertyExportOptions;\n        excludedTargetLanguages: string[];\n        parserVersion: number;\n        createdAt: string;\n        updatedAt: string;\n        fields: Record<string, any>;\n    }\n    interface CreateFileRequest {\n        storageId: number;\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        context?: string;\n        type?: FileType;\n        parserVersion?: number;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        excludedTargetLanguages?: string[];\n        attachLabelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface ReplaceFileFromStorageRequest {\n        storageId: number;\n        name?: string;\n        updateOption?: UpdateOption;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        attachLabelIds?: number[];\n        detachLabelIds?: number[];\n        replaceModifiedContext?: boolean;\n    }\n    type ExportOptions = GeneralExportOptions | PropertyExportOptions | JavaScriptExportOptions | MdExportOptions;\n    type ImportOptions = SpreadsheetImportOptions | XmlImportOptions | WebXmlImportOptions | DocxFileImportOptions | HtmlFileImportOptions | HtmlFrontMatterFileImportOptions | MdxFileImportOptions | MdFileImportOptions | StringCatalogFileImportOptions | AdocFileImportOptions | OtherImportOptions;\n    interface RestoreFile {\n        revisionId: number;\n    }\n    interface FileRevision {\n        id: number;\n        projectId: number;\n        fileId: number;\n        restoreToRevision: number;\n        info: FileRevisionInfo;\n        date: string;\n    }\n    interface FileRevisionInfo {\n        added: FileRevisionInfoAttribute;\n        deleted: FileRevisionInfoAttribute;\n        updated: FileRevisionInfoAttribute;\n    }\n    interface FileRevisionInfoAttribute {\n        strings: number;\n        words: number;\n    }\n    type FileType = 'auto' | 'android' | 'macosx' | 'resx' | 'properties' | 'gettext' | 'yaml' | 'php' | 'json' | 'xml' | 'ini' | 'rc' | 'resw' | 'resjson' | 'qtts' | 'joomla' | 'chrome' | 'dtd' | 'dklang' | 'flex' | 'nsh' | 'wxl' | 'xliff' | 'xliff_two' | 'html' | 'haml' | 'txt' | 'csv' | 'md' | 'flsnp' | 'fm_html' | 'fm_md' | 'mediawiki' | 'docx' | 'xlsx' | 'sbv' | 'properties_play' | 'properties_xml' | 'maxthon' | 'go_json' | 'dita' | 'mif' | 'idml' | 'stringsdict' | 'plist' | 'vtt' | 'vdf' | 'srt' | 'stf' | 'toml' | 'contentful_rt' | 'svg' | 'js' | 'coffee' | 'nestjs_i18n' | 'webxml';\n    interface SpreadsheetImportOptions {\n        firstLineContainsHeader?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        importTranslations?: boolean;\n        scheme?: Scheme;\n    }\n    interface Scheme {\n        none: number;\n        identifier: number;\n        sourcePhrase: number;\n        sourceOrTranslation: number;\n        translation: number;\n        context: number;\n        maxLength: number;\n        labels: number;\n        [key: string]: number;\n    }\n    interface XmlImportOptions {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        translatableElements?: string[];\n        srxStorageId?: number;\n    }\n    interface WebXmlImportOptions {\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface DocxFileImportOptions {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFileImportOptions {\n        excludedElements?: string[];\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFrontMatterFileImportOptions extends HtmlFileImportOptions {\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface MdFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface StringCatalogFileImportOptions {\n        importKeyAsSource?: boolean;\n    }\n    interface AdocFileImportOptions {\n        excludeIncludeDirectives?: boolean;\n    }\n    interface OtherImportOptions {\n        contentSegmentation: boolean;\n        srxStorageId: number;\n    }\n    interface GeneralExportOptions {\n        exportPattern?: string;\n    }\n    interface PropertyExportOptions {\n        escapeQuotes?: EscapeQuotes;\n        exportPattern?: string;\n        escapeSpecialCharacters?: 0 | 1;\n    }\n    interface JavaScriptExportOptions {\n        exportPattern?: string;\n        exportQuotes?: ExportQuotes;\n    }\n    interface MdExportOptions {\n        exportPattern?: string;\n        strongMarker?: 'asterisk' | 'underscore';\n        emphasisMarker?: 'asterisk' | 'underscore';\n        unorderedListBullet?: 'asterisks' | 'plus' | 'plus';\n        tableColumnWidth?: 'consolidate' | 'evenly_distribute_cells';\n    }\n    enum EscapeQuotes {\n        ZERO = 0,\n        ONE = 1,\n        TWO = 2,\n        THREE = 3\n    }\n    enum ExportQuotes {\n        SINGLE = \"single\",\n        DOUBLE = \"double\"\n    }\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n    interface ReviewedSourceFilesBuild {\n        id: number;\n        projectId: number;\n        status: string;\n        progress: number;\n        attributes: ReviewedSourceFilesBuildAttributes;\n    }\n    interface ReviewedSourceFilesBuildAttributes {\n        branchId: number;\n        targetLanguageId: string;\n    }\n    interface BuildReviewedSourceFilesRequest {\n        branchId?: number;\n    }\n    interface ListProjectBranchesOptions extends PaginationOptions {\n        name?: string;\n        orderBy?: string;\n    }\n    interface ListReviewedSourceFilesBuildOptions extends PaginationOptions {\n        branchId?: number;\n    }\n}\n```\n\n##### sourceStrings/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class SourceStrings extends CrowdinApi {\n    uploadStringsStatus(projectId: number, uploadId: string): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    uploadStrings(projectId: number, request: SourceStringsModel.UploadStringsRequest): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    listProjectStrings(projectId: number, options?: SourceStringsModel.ListProjectStringsOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listProjectStrings(projectId: number, fileId?: number, limit?: number, offset?: number, filter?: string, denormalizePlaceholders?: BooleanInt, labelIds?: string, scope?: SourceStringsModel.Scope, croql?: string, branchId?: number, directoryId?: number): Promise<ResponseList<SourceStringsModel.String>>;\n    addString(projectId: number, request: SourceStringsModel.CreateStringRequest | SourceStringsModel.CreateStringStringsBasedRequest): Promise<ResponseObject<SourceStringsModel.String>>;\n    stringBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<SourceStringsModel.String>>;\n    getString(projectId: number, stringId: number, query?: {\n        denormalizePlaceholders: BooleanInt;\n    }): Promise<ResponseObject<SourceStringsModel.String>>;\n    deleteString(projectId: number, stringId: number): Promise<void>;\n    editString(projectId: number, stringId: number, request: PatchRequest[]): Promise<ResponseObject<SourceStringsModel.String>>;\n}\nexport declare namespace SourceStringsModel {\n    type UploadStringsType = 'auto' | 'android' | 'macosx' | 'arb' | 'csv' | 'json' | 'xliff' | 'xliff_two' | 'xlsx';\n    interface UploadStringsStatus {\n        branchId: number;\n        storageId: number;\n        fileType: UploadStringsType;\n        parserVersion: number;\n        labelIds: number[];\n        importOptions: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateStrings: boolean;\n        cleanupMode: boolean;\n        updateOption: UpdateOption;\n    }\n    interface UploadStringsRequest {\n        branchId: number;\n        storageId: number;\n        type?: UploadStringsType;\n        parserVersion?: number;\n        labelIds?: number[];\n        updateStrings?: boolean;\n        cleanupMode?: boolean;\n        importOptions?: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateOption?: UpdateOption;\n    }\n    interface ListProjectStringsOptions extends PaginationOptions {\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n        labelIds?: string;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        taskId?: number;\n        croql?: string;\n        filter?: string;\n        scope?: SourceStringsModel.Scope;\n    }\n    interface String {\n        id: number;\n        projectId: number;\n        branchId: number;\n        identifier: string;\n        text: string | PluralText;\n        type: Type;\n        context: string;\n        maxLength: number;\n        isHidden: boolean;\n        isDuplicate: boolean;\n        masterStringId: boolean;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        labelIds: number[];\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        fileId: number;\n        directoryId: number;\n        revision: number;\n        fields: Record<string, any>;\n    }\n    interface CreateStringRequest {\n        text: string | PluralText;\n        identifier?: string;\n        fileId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface CreateStringStringsBasedRequest {\n        text: string | PluralText;\n        identifier: string;\n        branchId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface PluralText {\n        zero?: string;\n        one?: string;\n        two?: string;\n        few?: string;\n        many?: string;\n        other?: string;\n    }\n    enum Type {\n        TEXT = 0,\n        ASSET = 1,\n        ICU = 2\n    }\n    type Scope = 'identifier' | 'text' | 'context';\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n}\n```\n\n##### stringComments/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringComments extends CrowdinApi {\n    listStringComments(projectId: number, options?: StringCommentsModel.ListStringCommentsOptions): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    listStringComments(projectId: number, stringId?: number, type?: StringCommentsModel.Type, targetLanguageId?: string, issueType?: StringCommentsModel.IssueType, issueStatus?: StringCommentsModel.IssueStatus): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    addStringComment(projectId: number, request: StringCommentsModel.AddStringCommentRequest): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    getStringComment(projectId: number, stringCommentId: number): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    deleteStringComment(projectId: number, stringCommentId: number): Promise<void>;\n    editStringComment(projectId: number, stringCommentId: number, request: PatchRequest[]): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    stringCommentBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringCommentsModel.StringComment>>;\n}\nexport declare namespace StringCommentsModel {\n    interface ListStringCommentsOptions extends PaginationOptions {\n        stringId?: number;\n        type?: Type;\n        targetLanguageId?: string;\n        issueType?: IssueType;\n        issueStatus?: IssueStatus;\n        orderBy?: string;\n    }\n    interface StringComment {\n        id: number;\n        isShared?: boolean;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: StringModel;\n        projectId: number;\n        languageId: string;\n        type: Type;\n        issueType: IssueType;\n        issueStatus: IssueStatus;\n        resolverId: number;\n        senderOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolverOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolver: User;\n        resolvedAt: string;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface StringModel {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface AddStringCommentRequest {\n        stringId: number;\n        text: string;\n        targetLanguageId: string;\n        type: Type;\n        isShared?: boolean;\n        issueType?: IssueType;\n    }\n    type Type = 'comment' | 'issue';\n    type IssueType = 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type IssueStatus = 'unresolved' | 'resolved';\n}\n```\n\n##### stringCorrections/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class StringCorrections extends CrowdinApi {\n    listStringCorrections(projectId: number, options: StringCorrectionsModel.ListStringCorrectionsParams): Promise<ResponseList<StringCorrectionsModel.StringCorrection>>;\n    addStringCorrection(projectId: number, request: StringCorrectionsModel.AddStringCorrectionRequest): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrections(projectId: number, stringId: number): Promise<void>;\n    getStringCorrection(projectId: number, correctionId: number, params?: {\n        denormalizePlaceholders?: BooleanInt;\n    }): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    restoreStringCorrection(projectId: number, correctionId: number): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrection(projectId: number, correctionId: number): Promise<void>;\n}\nexport declare namespace StringCorrectionsModel {\n    interface ListStringCorrectionsParams extends PaginationOptions {\n        stringId: number;\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n    }\n    interface StringCorrection {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: {\n            id: number;\n            username: string;\n            fullName: string;\n            avatarUrl: string;\n        };\n        createdAt: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n    interface AddStringCorrectionRequest {\n        stringId: number;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n    }\n}\n```\n\n##### stringTranslations/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringTranslations extends CrowdinApi {\n    listTranslationApprovals(projectId: number, options?: StringTranslationsModel.ListTranslationApprovalsOptions): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    listTranslationApprovals(projectId: number, stringId?: number, languageId?: string, translationId?: number, limit?: number, offset?: number, fileId?: number, labelIds?: string, excludeLabelIds?: string): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    addApproval(projectId: number, request: StringTranslationsModel.AddApprovalRequest): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    removeStringApprovals(projectId: number, stringId: number): Promise<void>;\n    approvalInfo(projectId: number, approvalId: number): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    approvalBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    removeApproval(projectId: number, approvalId: number): Promise<void>;\n    listLanguageTranslations(projectId: number, languageId: string, options?: StringTranslationsModel.ListLanguageTranslationsOptions): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    listLanguageTranslations(projectId: number, languageId: string, stringIds?: string, fileId?: number, limit?: number, offset?: number, labelIds?: string, denormalizePlaceholders?: BooleanInt, croql?: string): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    translationAlignment(projectId: number, request: StringTranslationsModel.TranslationAlignmentRequest): Promise<ResponseObject<StringTranslationsModel.TranslationAlignmentResponse>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, options?: StringTranslationsModel.ListStringTranslationsOptions): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, limit?: number, offset?: number, denormalizePlaceholders?: BooleanInt): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    addTranslation(projectId: number, request: StringTranslationsModel.AddStringTranslationRequest): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    deleteAllTranslations(projectId: number, stringId: number, languageId?: string): Promise<void>;\n    translationInfo(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    restoreTranslation(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    translationBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    deleteTranslation(projectId: number, translationId: number): Promise<void>;\n    listTranslationVotes(projectId: number, options?: StringTranslationsModel.ListTranslationVotesOptions): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    listTranslationVotes(projectId: number, stringId?: number, languageId?: string, translationId?: number, labelIds?: string, excludeLabelIds?: string, limit?: number, offset?: number): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    addVote(projectId: number, request: StringTranslationsModel.AddVoteRequest): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    voteInfo(projectId: number, voteId: number): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    cancelVote(projectId: number, voteId: number): Promise<void>;\n}\nexport declare namespace StringTranslationsModel {\n    interface ListTranslationApprovalsOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Approval {\n        id: number;\n        user: User;\n        translationId: number;\n        stringId: number;\n        languageId: string;\n        createdAt: string;\n    }\n    interface AddApprovalRequest {\n        translationId: number;\n    }\n    interface StringTranslation {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: User;\n        rating: number;\n        provider: string;\n        isPreTranslated: boolean;\n        createdAt: string;\n    }\n    interface ListLanguageTranslationsOptions extends PaginationOptions {\n        stringIds?: string;\n        fileId?: number;\n        labelIds?: string;\n        denormalizePlaceholders?: BooleanInt;\n        croql?: string;\n        approvedOnly?: BooleanInt;\n        passedWorkflow?: BooleanInt;\n        orderBy?: string;\n        branchId?: number;\n        minApprovalCount?: number;\n        directoryId?: number;\n    }\n    interface PlainLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface PluralLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        plurals: Plural[];\n    }\n    interface IcuLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface Plural {\n        translationId: number;\n        text: string;\n        pluralForm: string;\n        user: User;\n        createdAt: string;\n    }\n    interface TranslationAlignmentRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        text: string;\n    }\n    interface TranslationAlignmentResponse {\n        words: {\n            text: string;\n            alignments: {\n                sourceWord: string;\n                sourceLemma: string;\n                targetWord: string;\n                targetLemma: string;\n                match: number;\n                probability: number;\n            }[];\n        }[];\n    }\n    interface AddStringTranslationRequest {\n        stringId: number;\n        languageId: string;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n        addToTm?: boolean;\n    }\n    interface ListTranslationVotesOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n    }\n    interface Vote {\n        id: number;\n        user: User;\n        translationId: number;\n        votedAt: string;\n        mark: Mark;\n    }\n    interface AddVoteRequest {\n        mark: Mark;\n        translationId: number;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    type Mark = 'up' | 'down';\n    interface ListStringTranslationsOptions extends PaginationOptions {\n        denormalizePlaceholders?: BooleanInt;\n        orderBy?: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n}\n```\n\n##### tasks/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class Tasks extends CrowdinApi {\n    listTasks(projectId: number, options?: TasksModel.ListTasksOptions): Promise<ResponseList<TasksModel.Task>>;\n    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;\n    addTask(projectId: number, request: TasksModel.CreateTaskRequest): Promise<ResponseObject<TasksModel.Task>>;\n    exportTaskStrings(projectId: number, taskId: number): Promise<ResponseObject<DownloadLink>>;\n    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;\n    deleteTask(projectId: number, taskId: number): Promise<void>;\n    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;\n    listTasksComments(projectId: number, taskId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskComment>>;\n    addTaskComment(projectId: number, taskId: number, request: TasksModel.CreateTaskCommentRequest): Promise<ResponseObject<TasksModel.TaskComment>>;\n    getTaskComment(projectId: number, taskId: number, commentId: number): Promise<ResponseObject<TasksModel.TaskComment>>;\n    deleteTaskComment(projectId: number, taskId: number, commentId: number): Promise<void>;\n    editTaskComment(projectId: number, taskId: number, commentId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskComment>>;\n    listUserTasks(options?: TasksModel.ListUserTasksOptions): Promise<ResponseList<TasksModel.UserTask>>;\n    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;\n    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;\n    listTaskSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskSettingsTemplate>>;\n    addTaskSettingsTemplate(projectId: number, request: TasksModel.AddTaskSettingsTemplate): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    getTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    deleteTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<void>;\n    editTaskSettingsTemplate(projectId: number, taskSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n}\nexport declare namespace TasksModel {\n    interface Task {\n        id: number;\n        projectId: number;\n        creatorId: number;\n        type: Type | TypeVendor;\n        status: Status;\n        title: string;\n        assignees: Assignee[];\n        assignedTeams: AssignedTeam[];\n        progress: Progress;\n        translateProgress: Progress;\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        description: string;\n        translationUrl: string;\n        webUrl: string;\n        wordsCount: number;\n        commentsCount: number;\n        deadline: string;\n        startedAt: string;\n        resolvedAt: string;\n        timeRange: string;\n        workflowStepId: number;\n        buyUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        labelIds: number[];\n        excludeLabelIds: number[];\n        precedingTaskId: number;\n        filesCount: number;\n        fileIds: number[];\n        branchIds: number[];\n        vendor: string;\n        fields: Record<string, any>;\n    }\n    interface ListUserTasksOptions extends PaginationOptions {\n        status?: Status;\n        isArchived?: BooleanInt;\n        orderBy?: string;\n    }\n    interface UserTask extends Task {\n        isArchived: boolean;\n    }\n    type CreateTaskRequest = CreateTaskEnterpriseByBranchIds | CreateTaskEnterpriseByFileIds | CreateTaskEnterpriseByStringIds | CreateTaskEnterpriseVendorByBranchIds | CreateTaskEnterpriseVendorByFileIds | CreateTaskEnterpriseVendorByStringIds | CreateTaskEnterprisePendingTask | CreateTaskByFileIds | CreateTaskByStringIds | CreateTaskByBranchIds | CreateTaskByFileIdsLanguageService | CreateTaskByStringIdsLanguageService | CreateTaskByBranchIdsLanguageService | CreateTaskVendorOhtByFileIds | CreateTaskVendorOhtByStringIds | CreateTaskVendorOhtByBranchIds | CreateTaskVendorGengoByFileIds | CreateTaskVendorGengoByStringIds | CreateTaskVendorGengoByBranchIds | CreateTaskVendorManualByFileIds | CreateTaskVendorManualByStringIds | CreateTaskVendorManualByBranchIds | CreateTaskPendingTask | CreateTaskPendingTaskLanguageService | CreateTaskPendingTaskVendorManual;\n    interface CreateTaskEnterpriseByBranchIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        branchIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    interface CreateTaskEnterpriseByStringIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        stringIds: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    type CreateTaskEnterpriseVendorByStringIds = Omit<CreateTaskEnterpriseByStringIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseVendorByBranchIds = Omit<CreateTaskEnterpriseByBranchIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseByFileIds = Omit<CreateTaskEnterpriseByBranchIds, 'branchIds'> & {\n        fileIds: number[];\n    };\n    type CreateTaskEnterpriseVendorByFileIds = Omit<CreateTaskEnterpriseByFileIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    interface CreateTaskEnterprisePendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        deadline?: string;\n    }\n    interface CreateTaskByFileIds {\n        title: string;\n        languageId: string;\n        type: Type;\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIds = Omit<CreateTaskByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number;\n    };\n    type CreateTaskByBranchIds = Omit<CreateTaskByFileIds, 'fileIds'> & {\n        branchIds: number;\n    };\n    interface CreateTaskByFileIdsLanguageService {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'crowdin_language_service';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskByBranchIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorOhtByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'oht';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: Expertise;\n        editService?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorOhtByStringIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorOhtByBranchIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorGengoByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor.TRANSLATE_BY_VENDOR;\n        vendor: 'gengo';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: 'standard' | 'pro';\n        tone?: Tone;\n        purpose?: Purpose;\n        customerMessage?: string;\n        usePreferred?: boolean;\n        editService?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorGengoByStringIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorGengoByBranchIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorManualByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'alconost' | 'babbleon' | 'tomedes' | 'e2f' | 'write_path_admin' | 'inlingo' | 'acclaro' | 'translate_by_humans' | 'lingo24' | 'assertio_language_services' | 'gte_localize' | 'kettu_solutions' | 'languageline_solutions';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorManualByStringIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorManualByBranchIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskPendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskLanguageService {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: 'crowdin_language_service';\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskVendorManual {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: CreateTaskVendorManualByFileIds['vendor'];\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskAssignee {\n        id: number;\n        wordsCount?: number;\n    }\n    type Status = 'todo' | 'in_progress' | 'done' | 'closed';\n    type RequestStatus = Extract<Status, 'todo' | 'in_progress'>;\n    enum Type {\n        TRANSLATE = 0,\n        PROOFREAD = 1\n    }\n    enum TypeVendor {\n        TRANSLATE_BY_VENDOR = 2,\n        PROOFREAD_BY_VENDOR = 3\n    }\n    interface Assignee {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n        wordsCount: number;\n        wordsLeft: number;\n    }\n    interface AssignedTeam {\n        id: number;\n        wordsCount: number;\n    }\n    interface Progress {\n        total: number;\n        done: number;\n        percent: number;\n    }\n    type Expertise = 'standard' | 'mobile-applications' | 'software-it' | 'gaming-video-games' | 'technical-engineering' | 'marketing-consumer-media' | 'business-finance' | 'legal-certificate' | 'medical' | 'ad-words-banners' | 'automotive-aerospace' | 'scientific' | 'scientific-academic' | 'tourism' | 'training-employee-handbooks' | 'forex-crypto';\n    enum TranslatedExpertise {\n        ECONOMY = \"P\",\n        PROFESSIONAL = \"T\",\n        PREMIUM = \"R\"\n    }\n    type Tone = '' | 'Informal' | 'Friendly' | 'Business' | 'Formal' | 'other';\n    type Purpose = 'standard' | 'Personal use' | 'Business' | 'Online content' | 'App/Web localization' | 'Media content' | 'Semi-technical' | 'other';\n    type Subject = 'general' | 'accounting_finance' | 'aerospace_defence' | 'architecture' | 'art' | 'automotive' | 'certificates_diplomas_licences_cv_etc' | 'chemical' | 'civil_engineering_construction' | 'corporate_social_responsibility' | 'cosmetics' | 'culinary' | 'electronics_electrical_engineering' | 'energy_power_generation_oil_gas' | 'environment' | 'fashion' | 'games_viseogames_casino' | 'general_business_commerce' | 'history_archaeology' | 'information_technology' | 'insurance' | 'internet_e-commerce' | 'legal_documents_contracts' | 'literary_translations' | 'marketing_advertising_material_public_relations' | 'matematics_and_physics' | 'mechanical_manufacturing' | 'media_journalism_publishing' | 'medical_pharmaceutical' | 'music' | 'private_correspondence_letters' | 'religion' | 'science' | 'shipping_sailing_maritime' | 'social_science' | 'telecommunications' | 'travel_tourism';\n    interface ListTasksOptions extends PaginationOptions {\n        status?: TasksModel.Status;\n        assigneeId?: number;\n        orderBy?: string;\n    }\n    interface TaskSettingsTemplate {\n        id: number;\n        name: string;\n        config: TaskSettingsTemplateConfig;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTaskSettingsTemplate {\n        name: string;\n        config: TaskSettingsTemplateConfig;\n    }\n    interface TaskSettingsTemplateConfig {\n        languages: {\n            languageId?: string;\n            userIds?: number[];\n            teamIds?: number[];\n        }[];\n    }\n    interface TaskComment {\n        id: number;\n        userId: number;\n        taskId: number;\n        text: string;\n        timeSpent: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTaskCommentRequest {\n        text?: string;\n        timeSpent?: number;\n    }\n}\n```\n\n##### teams/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Teams extends CrowdinApi {\n    listTeamProjectPermissions(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    editTeamProjectPermissions(teamId: number, request: PatchRequest[]): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    addTeamToProject(projectId: number, request: TeamsModel.AddTeamToProjectRequest): Promise<TeamsModel.ProjectTeamResources>;\n    listTeams(options?: TeamsModel.ListTeamsOptions): Promise<ResponseList<TeamsModel.Team>>;\n    listTeams(limit?: number, offset?: number): Promise<ResponseList<TeamsModel.Team>>;\n    addTeam(request: TeamsModel.AddTeamRequest): Promise<ResponseObject<TeamsModel.Team>>;\n    getTeam(teamId: number): Promise<ResponseObject<TeamsModel.Team>>;\n    deleteTeam(teamId: number): Promise<void>;\n    editTeam(teamId: number, request: PatchRequest[]): Promise<ResponseObject<TeamsModel.Team>>;\n    teamMembersList(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.TeamMember>>;\n    teamMembersList(teamId: number, limit?: number, offset?: number): Promise<ResponseList<TeamsModel.TeamMember>>;\n    addTeamMembers(teamId: number, request: TeamsModel.AddTeamMembersRequest): Promise<TeamsModel.AddTeamMembersResponse>;\n    deleteAllTeamMembers(teamId: number): Promise<void>;\n    deleteTeamMember(teamId: number, memberId: number): Promise<void>;\n}\nexport declare namespace TeamsModel {\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface AddTeamToProjectRequest {\n        teamId: number;\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ListTeamsOptions extends PaginationOptions {\n        search?: string;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        orderBy?: string;\n    }\n    interface ProjectTeamResources {\n        skipped: ProjectTeamResource;\n        added: ProjectTeamResource;\n    }\n    interface ProjectTeamResource {\n        id: number;\n        hasManagerAccess: boolean;\n        hasDeveloperAccess: boolean;\n        hasAccessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        roles: ProjectRole[];\n    }\n    interface Permissions {\n        [lang: string]: {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n    interface Team {\n        id: number;\n        name: string;\n        totalMembers: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTeamRequest {\n        name: string;\n    }\n    interface TeamMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        avatarUrl: string;\n        addedAt: string;\n    }\n    interface AddTeamMembersRequest {\n        userIds: number[];\n    }\n    interface AddTeamMembersResponse {\n        skipped: ResponseObject<TeamMember>[];\n        added: ResponseObject<TeamMember>[];\n        pagination: Pagination;\n    }\n}\n```\n\n##### translationMemory/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class TranslationMemory extends CrowdinApi {\n    listTm(options?: TranslationMemoryModel.ListTMsOptions): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    listTm(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    addTm(request: TranslationMemoryModel.AddTranslationMemoryRequest): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    getTm(tmId: number): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    deleteTm(tmId: number): Promise<void>;\n    editTm(tmId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    listTmSegments(tmId: number, options?: TranslationMemoryModel.ListSegmentsOptions): Promise<ResponseList<TranslationMemoryModel.TMSegment>>;\n    addTmSegment(tmId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    clearTm(tmId: number): Promise<void>;\n    exportTm(tmId: number, request?: TranslationMemoryModel.ExportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    checkExportStatus(tmId: number, exportId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    downloadTm(tmId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    concordanceSearch(projectId: number, request: TranslationMemoryModel.ConcordanceSearchRequest): Promise<ResponseList<TranslationMemoryModel.ConcordanceSearchResponse>>;\n    importTm(tmId: number, request: TranslationMemoryModel.ImportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    checkImportStatus(tmId: number, importId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    getTmSegment(tmId: number, segmentId: number): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegment(tmId: number, segmentId: number): Promise<void>;\n    editTmSegment(tmId: number, segmentId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegmentRecord(tmId: number, segmentId: number, recordId: number): Promise<void>;\n    editTmSegmentRecord(tmId: number, segmentId: number, recordId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    addTmSegmentRecords(tmId: number, segmentId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n}\nexport declare namespace TranslationMemoryModel {\n    interface TranslationMemory {\n        id: number;\n        groupId: number;\n        userId: number;\n        name: string;\n        languageId: string;\n        languageIds: string[];\n        segmentsCount: number;\n        defaultProjectIds: number[];\n        projectIds: number[];\n        createdAt: string;\n        webUrl: string;\n    }\n    interface AddTranslationMemoryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    interface ConcordanceSearchRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        autoSubstitution: boolean;\n        minRelevant: number;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        tm: TranslationMemory;\n        recordId: number;\n        source: string;\n        target: string;\n        relevant: number;\n        substituted: string;\n        updatedAt: string;\n    }\n    interface ExportTranslationMemoryRequest {\n        sourceLanguageId?: number;\n        targetLanguageId?: number;\n        format?: Format;\n    }\n    interface ImportTranslationMemoryRequest {\n        storageId: number;\n        firstLineContainsHeader?: boolean;\n        scheme?: Scheme;\n    }\n    interface ExportTranslationMemoryAttribute {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        format: string;\n    }\n    interface ImportTranslationMemoryAttribute {\n        tmId: number;\n        storageId: number;\n        firstLineContainsHeader: number;\n        scheme: Scheme;\n    }\n    type Format = 'tmx' | 'csv' | 'xlsx';\n    interface Scheme {\n        [key: string]: number;\n    }\n    interface ListTMsOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListSegmentsOptions extends PaginationOptions {\n        croql?: string;\n        orderBy?: string;\n    }\n    interface TMSegment {\n        id: number;\n        records: TMSegmentRecord[];\n    }\n    interface TMSegmentRecord {\n        id: number;\n        languageId: string;\n        text: string;\n        usageCount: number;\n        createdBy: number;\n        updatedBy: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTMSegment {\n        records: AddTMSegmentRecord[];\n    }\n    interface AddTMSegmentRecord {\n        languageId: string;\n        text: string;\n    }\n}\n```\n\n##### translationStatus/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class TranslationStatus extends CrowdinApi {\n    getBranchProgress(projectId: number, branchId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getBranchProgress(projectId: number, branchId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getProjectProgress(projectId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getProjectProgress(projectId: number, limit?: number, offset?: number, languageIds?: string): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    listQaCheckIssues(projectId: number, options?: TranslationStatusModel.ListQaCheckIssuesOptions): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n    listQaCheckIssues(projectId: number, limit?: number, offset?: number, category?: TranslationStatusModel.Category, validation?: TranslationStatusModel.Validation, languageIds?: string): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n}\nexport declare namespace TranslationStatusModel {\n    interface LanguageProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        eTag: string;\n        languageId: string;\n        language: LanguagesModel.Language;\n    }\n    interface FileProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        branchId: number;\n        fileId: number;\n        eTag: string;\n    }\n    interface Words {\n        total: number;\n        translated: number;\n        approved: number;\n        preTranslateAppliedTo: number;\n    }\n    type Category = 'empty' | 'variables' | 'tags' | 'punctuation' | 'symbol_register' | 'spaces' | 'size' | 'special_symbols' | 'wrong_translation' | 'spellcheck' | 'icu';\n    type Validation = 'empty_string_check' | 'empty_suggestion_check' | 'max_length_check' | 'tags_check' | 'mismatch_ids_check' | 'cdata_check' | 'specials_symbols_check' | 'leading_newlines_check' | 'trailing_newlines_check' | 'leading_spaces_check' | 'trailing_spaces_check' | 'multiple_spaces_check' | 'custom_blocked_variables_check' | 'highest_priority_custom_variables_check' | 'highest_priority_variables_check' | 'c_variables_check' | 'python_variables_check' | 'rails_variables_check' | 'java_variables_check' | 'dot_net_variables_check' | 'twig_variables_check' | 'php_variables_check' | 'freemarker_variables_check' | 'lowest_priority_variable_check' | 'lowest_priority_custom_variables_check' | 'punctuation_check' | 'spaces_before_punctuation_check' | 'spaces_after_punctuation_check' | 'non_breaking_spaces_check' | 'capitalize_check' | 'multiple_uppercase_check' | 'parentheses_check' | 'entities_check' | 'escaped_quotes_check' | 'wrong_translation_issue_check' | 'spellcheck' | 'icu_check';\n    interface ListQaCheckIssuesOptions extends PaginationOptions {\n        category?: Category | Category[];\n        validation?: Validation | Validation[];\n        languageIds?: string;\n    }\n    interface QaCheck {\n        stringId: number;\n        languageId: string;\n        category: Category;\n        categoryDescription: string;\n        validation: Validation;\n        validationDescription: string;\n        pluralId: number;\n        text: string;\n    }\n    interface GetProjectProgressOptions extends PaginationOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### translations/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Translations extends CrowdinApi {\n    listPreTranslations(projectId: number, options?: PaginationOptions): Promise<ResponseList<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    preTranslationStatus(projectId: number, preTranslationId: string): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    applyPreTranslation(projectId: number, request: TranslationsModel.PreTranslateRequest | TranslationsModel.PreTranslateStringsRequest): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    editPreTranslation(projectId: number, preTranslationId: string, request: PatchRequest[]): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    getPreTranslationReport(projectId: number, preTranslationId: string): Promise<ResponseObject<TranslationsModel.PreTranslationReport>>;\n    buildProjectDirectoryTranslation(projectId: number, directoryId: number, request?: TranslationsModel.BuildProjectDirectoryTranslationRequest): Promise<ResponseObject<TranslationsModel.BuildProjectDirectoryTranslationResponse>>;\n    buildProjectFileTranslation(projectId: number, fileId: number, request: TranslationsModel.BuildProjectFileTranslationRequest, eTag?: string): Promise<ResponseObject<TranslationsModel.BuildProjectFileTranslationResponse>>;\n    listProjectBuilds(projectId: number, options?: TranslationsModel.ListProjectBuildsOptions): Promise<ResponseList<TranslationsModel.Build>>;\n    listProjectBuilds(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationsModel.Build>>;\n    buildProject(projectId: number, request?: TranslationsModel.BuildRequest | TranslationsModel.PseudoBuildRequest): Promise<ResponseObject<TranslationsModel.Build>>;\n    uploadTranslation(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationResponse>>;\n    uploadTranslationStrings(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationStringsRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationStringsResponse>>;\n    downloadTranslations(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n    checkBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<TranslationsModel.Build>>;\n    cancelBuild(projectId: number, buildId: number): Promise<void>;\n    exportProjectTranslation(projectId: number, request: TranslationsModel.ExportProjectTranslationRequest): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace TranslationsModel {\n    interface PreTranslateRequest {\n        languageIds: string[];\n        fileIds: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId?: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface PreTranslateStringsRequest {\n        languageIds: string[];\n        branchIds?: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface BuildProjectDirectoryTranslationRequest {\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        preserveFolderHierarchy?: boolean;\n        exportStringsThatPassedWorkflow?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportApprovedOnly?: boolean;\n    }\n    interface BuildProjectDirectoryTranslationResponse {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    type BuildStatus = 'created' | 'inProgress' | 'canceled' | 'failed' | 'finished';\n    interface BuildProjectFileTranslationRequest {\n        targetLanguageId: string;\n        exportAsXliff?: boolean;\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface BuildProjectFileTranslationResponse extends DownloadLink {\n        etag: string;\n    }\n    interface PreTranslationStatusAttributes {\n        languageIds: string[];\n        fileIds: number[];\n        branchIds: number[];\n        method: Method;\n        autoApproveOption: AutoApproveOption;\n        duplicateTranslations: boolean;\n        skipApprovedTranslations: boolean;\n        translateUntranslatedOnly: boolean;\n        translateWithPerfectMatchOnly: boolean;\n    }\n    type Method = 'tm' | 'mt' | 'ai';\n    type AutoApproveOption = 'all' | 'exceptAutoSubstituted' | 'perfectMatchOnly' | 'none';\n    type CharTransformation = 'asian' | 'european' | 'arabic' | 'cyrillic';\n    interface Build {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        attributes: Attribute;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    interface Attribute {\n        branchId: number;\n        directoryId: number;\n        targetLanguageIds: string[];\n        skipUntranslatedStrings: boolean;\n        skipUntranslatedFiles: boolean;\n        exportApprovedOnly: boolean;\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n    }\n    interface BuildRequest {\n        branchId?: number;\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface PseudoBuildRequest {\n        pseudo: boolean;\n        branchId?: number;\n        prefix?: string;\n        suffix?: string;\n        lengthTransformation?: number;\n        charTransformation?: CharTransformation;\n    }\n    interface UploadTranslationRequest {\n        storageId: number;\n        fileId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationStringsRequest {\n        storageId: number;\n        branchId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        fileId: number;\n    }\n    interface UploadTranslationStringsResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        branchId: number;\n    }\n    interface ExportProjectTranslationRequest {\n        targetLanguageId: string;\n        format?: string;\n        labelIds?: number[];\n        branchIds?: number[];\n        directoryIds?: number[];\n        fileIds?: number[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface ListProjectBuildsOptions extends PaginationOptions {\n        branchId?: number;\n    }\n    interface PreTranslationReport {\n        languages: TargetLanguage[];\n        preTranslateType: Method;\n    }\n    interface TargetLanguage {\n        id: string;\n        files: TargetLanguageFile[];\n        skipped: SkippedInfo;\n        skippedQaCheckCategories: ProjectsGroupsModel.CheckCategories;\n    }\n    interface TargetLanguageFile {\n        id: string;\n        statistics: TargetLanguageFileStatistics;\n    }\n    interface TargetLanguageFileStatistics {\n        phrases: number;\n        words: number;\n    }\n    interface SkippedInfo {\n        [key: string]: any;\n    }\n}\n```\n\n##### uploadStorage/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class UploadStorage extends CrowdinApi {\n    listStorages(options?: PaginationOptions): Promise<ResponseList<UploadStorageModel.Storage>>;\n    listStorages(limit?: number, offset?: number): Promise<ResponseList<UploadStorageModel.Storage>>;\n    addStorage(fileName: string, request: any, contentType?: string): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    getStorage(storageId: number): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    deleteStorage(storageId: number): Promise<void>;\n}\nexport declare namespace UploadStorageModel {\n    interface Storage {\n        id: number;\n        fileName: string;\n    }\n}\n```\n\n##### users/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nimport { TeamsModel } from '../teams';\nexport declare class Users extends CrowdinApi {\n    listProjectMembers(projectId: number, options?: UsersModel.ListProjectMembersOptions): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    listProjectMembers(projectId: number, search?: string, role?: UsersModel.Role, languageId?: string, limit?: number, offset?: number): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    addProjectMember(projectId: number, request: UsersModel.AddProjectMemberRequest): Promise<UsersModel.AddProjectMemberResponse>;\n    getProjectMemberPermissions(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    replaceProjectMemberPermissions(projectId: number, memberId: number, request?: UsersModel.ReplaceProjectMemberRequest): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    deleteMemberFromProject(projectId: number, memberId: number): Promise<void>;\n    listUsers(options?: UsersModel.ListUsersOptions): Promise<ResponseList<UsersModel.User>>;\n    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;\n    inviteUser(request: UsersModel.InviteUserRequest): Promise<ResponseObject<UsersModel.User>>;\n    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;\n    deleteUser(userId: number): Promise<void>;\n    editUser(userId: number, request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;\n    editAuthenticatedUser(request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    listUserProjectPermissions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    editUserProjectPermissions(userId: number, request: PatchRequest[]): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    listUserProjectContributions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n}\nexport declare namespace UsersModel {\n    interface ListProjectMembersOptions extends PaginationOptions {\n        search?: string;\n        role?: Role;\n        languageId?: string;\n        workflowStepId?: number;\n        orderBy?: string;\n    }\n    interface ListUsersOptions extends PaginationOptions {\n        status?: Status;\n        search?: string;\n        twoFactor?: TwoFactor;\n        orderBy?: string;\n        organizationRoles?: OrganizationRoles[];\n        teamId?: number;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        lastSeenFrom?: string;\n        lastSeenTo?: string;\n    }\n    interface InviteUserRequest {\n        email: string;\n        firstName?: string;\n        lastName?: string;\n        timezone?: string;\n        adminAccess?: boolean;\n    }\n    interface User {\n        id: number;\n        username: string;\n        email: string;\n        firstName: string;\n        lastName: string;\n        status: Status;\n        avatarUrl: string;\n        fields: Record<string, any>;\n        createdAt: string;\n        lastSeen: string;\n        twoFactor: TwoFactor;\n        isAdmin: boolean;\n        timezone: string;\n        emailVerified: string;\n    }\n    type Status = 'active' | 'pending' | 'blocked';\n    type TwoFactor = 'enabled' | 'disabled';\n    type OrganizationRoles = 'admin' | 'manager' | 'vendor' | 'client';\n    interface ProjectMember {\n        id: number;\n        username: string;\n        fullName: string;\n        role: Role;\n        permissions: Permissions;\n        avatarUrl: string;\n        joinedAt: string;\n        timezone: string;\n        roles: ProjectRole[];\n    }\n    interface EnterpriseProjectMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        isManager: boolean;\n        isDeveloperr: boolean;\n        managerOfGroup: Group;\n        accessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        givenAccessAt: string;\n        roles: ProjectRole[];\n    }\n    interface Group {\n        id: number;\n        name: string;\n    }\n    type Role = 'all' | 'owner' | 'manager' | 'proofreader' | 'translator' | 'blocked';\n    type LanguageRole = 'proofreader' | 'translator' | 'denied';\n    interface AddProjectMemberRequest {\n        userIds?: number[];\n        usernames?: string[];\n        emails?: string[];\n        managerAccess?: boolean;\n        roles?: ProjectRole[];\n        developerAccess?: boolean;\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface AddProjectMemberResponse {\n        skipped: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        added: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        pagination: Pagination;\n    }\n    interface ReplaceProjectMemberRequest {\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n        teams: TeamsModel.Team[];\n    }\n    interface Contributions {\n        id: number;\n        translated: Contribution;\n        approved: Contribution;\n        voted: Contribution;\n        commented: Contribution;\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface Contribution {\n        strings: number;\n        words?: number;\n    }\n    interface Permissions {\n        [lang: string]: string | {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n}\n```\n\n##### vendors/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Vendors extends CrowdinApi {\n    listVendors(options?: PaginationOptions): Promise<ResponseList<VendorsModel.Vendor>>;\n    listVendors(limit?: number, offset?: number): Promise<ResponseList<VendorsModel.Vendor>>;\n}\nexport declare namespace VendorsModel {\n    interface Vendor {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### webhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Webhooks extends CrowdinApi {\n    listWebhooks(projectId: number, options?: PaginationOptions): Promise<ResponseList<WebhooksModel.Webhook>>;\n    listWebhooks(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WebhooksModel.Webhook>>;\n    addWebhook(projectId: number, request: WebhooksModel.AddWebhookRequest): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    getWebhook(projectId: number, webhookId: number): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    deleteWebhook(projectId: number, webhookId: number): Promise<void>;\n    editWebhook(projectId: number, webhookId: number, request: PatchRequest[]): Promise<ResponseObject<WebhooksModel.Webhook>>;\n}\nexport declare namespace WebhooksModel {\n    interface Webhook {\n        id: number;\n        projectId: number;\n        name: string;\n        url: string;\n        events: Event[];\n        headers: Record<string, string>;\n        payload: Record<string, any>;\n        isActive: boolean;\n        batchingEnabled: boolean;\n        requestType: RequestType;\n        contentType: ContentType;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddWebhookRequest {\n        name: string;\n        url: string;\n        events: Event[];\n        requestType: RequestType;\n        isActive?: boolean;\n        batchingEnabled?: boolean;\n        contentType?: ContentType;\n        headers?: Record<string, string>;\n        payload?: Record<string, any>;\n    }\n    type ContentType = 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded';\n    type Event = 'file.added' | 'file.updated' | 'file.reverted' | 'file.deleted' | 'file.translated' | 'file.approved' | 'project.translated' | 'project.approved' | 'project.built' | 'translation.updated' | 'string.added' | 'string.updated' | 'string.deleted' | 'stringComment.created' | 'stringComment.updated' | 'stringComment.deleted' | 'stringComment.restored' | 'suggestion.added' | 'suggestion.updated' | 'suggestion.deleted' | 'suggestion.approved' | 'suggestion.disapproved' | 'task.added' | 'task.statusChanged' | 'task.deleted';\n    type RequestType = 'POST' | 'GET';\n}\n```\n\n##### workflows/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Workflows extends CrowdinApi {\n    listWorkflowSteps(projectId: number, options?: PaginationOptions): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    listWorkflowSteps(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    getWorkflowStep(projectId: number, stepId: number): Promise<ResponseObject<WorkflowModel.WorkflowStep>>;\n    listStringsOnTheWorkflowStep(projectId: number, stepId: number, options?: WorkflowModel.ListStringsOntheWorkflowStepOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listWorkflowTemplates(options?: WorkflowModel.ListWorkflowTemplatesOptions): Promise<ResponseList<WorkflowModel.Workflow>>;\n    listWorkflowTemplates(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.Workflow>>;\n    getWorkflowTemplateInfo(templateId: number): Promise<ResponseObject<WorkflowModel.Workflow>>;\n}\nexport declare namespace WorkflowModel {\n    interface WorkflowStep {\n        id: number;\n        title: string;\n        type: string;\n        languages: string[];\n        config: {\n            assignees: {\n                [language: string]: number[];\n            };\n        };\n    }\n    interface ListWorkflowTemplatesOptions extends PaginationOptions {\n        groupId?: number;\n    }\n    interface ListStringsOntheWorkflowStepOptions extends PaginationOptions {\n        languageIds?: string;\n        orderBy?: string;\n        status?: 'todo' | 'done' | 'pending' | 'incomplete' | 'need_review';\n    }\n    interface Workflow {\n        id: number;\n        title: string;\n        description: string;\n        groupId: number;\n        isDefault: boolean;\n        webUrl: string;\n        steps: {\n            id: number;\n            languages: string[];\n            assignees: number[];\n            vendorId: number;\n            config: {\n                minRelevant: number;\n                autoSubstitution: boolean;\n            };\n            mtId: number;\n        }[];\n    }\n}\n```\n\n<!-- CROWDIN_API_CLIENT_TYPES_END -->\n\n## Frontend Development\n\n### Crowdin Apps JS API\n\n#### Official Documentation\n\nThe `AP` object provides the Crowdin Apps JS API for interacting with the Crowdin application context.\n\n**📚 Complete API Reference:** https://support.crowdin.com/developer/crowdin-apps-js/\n\n**⚠️ CRITICAL**: Only use methods and types from the Crowdin Apps JS API definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n#### Common Examples\n\n**Get Context:**\n```javascript\n// Get application context\nAP.getContext(function(context) {\n    console.log('Project ID:', context.project_id);\n});\n```\n\n#### Best Practices\n\n1. **Always check AP availability**\n   ```javascript\n   if (window.AP) {\n       AP.getContext(function(context) {\n           // Your code\n       });\n   }\n   ```\n\n2. **Get JWT token for backend calls**\n   ```javascript\n   AP.getJwtToken(function(token) {\n       fetch('/api/endpoint?jwt=' + token)\n           .then(response => response.json());\n   });\n   ```\n\n3. **Handle errors gracefully**\n   ```javascript\n   try {\n       AP.getContext(function(context) {\n           if (!context.organization_id) {\n               console.error('Organization ID not found');\n           }\n       });\n   } catch (error) {\n       console.error('Failed to get context:', error);\n   }\n   ```\n\n#### Complete Type Definitions\n\n##### Global AP Object Structure\n\n```typescript\ndeclare namespace AP {\n    // Global Actions\n    function getContext(callback: (context: Context) => void): void;\n    function getJwtToken(callback: (token: string) => void): void;\n    function getTheme(): 'light' | 'dark';\n    function redirect(path: string): void;\n}\n```\n\n##### Type Definitions\n\n```typescript\n// Context Information\ninterface Context {\n    project_id: number;\n    organization_id: number;\n}\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-profile-menu`\n\n### 2. Key Files to Modify\n\n- `worker/app.ts` - Add new API endpoints here\n- `public/profile-resources/index.html` - Modify UI structure\n- `public/profile-resources/app.js` - Add frontend logic\n- `public/profile-resources/styles.css` - Customize styles"
    }
  },
  {
    "name": "crowdin-project-tools",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Project Tools module.\n\nUse when:\n- Building project-specific tools and utilities\n- Creating project management extensions\n- Developing project analysis and reporting tools\n- Building project-level integrations with external APIs\n- Creating custom project workflows and automation\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Project Tools module for project-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Project Tools (appears in project menu)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object for context/events) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the projectTools configuration structure\n- **Scopes**: Ensure your app has appropriate project-level API scopes\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Project Tools configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/tools/index.html` - Main HTML interface with demo UI\n- `public/tools/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/tools/styles.css` - Responsive CSS with accessibility support\n\n## Backend Development\n\n### App Configuration\n\nConfigure your app identity in `worker/app.ts`:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",                    // Display name shown in Crowdin UI\n    identifier: \"your-unique-app-identifier\", // Unique ID (lowercase, hyphens)\n    description: \"Your app description\",      // Brief description of functionality\n    // ... rest of configuration\n}\n```\n\n**Guidelines:**\n- **identifier**: Must be unique across all Crowdin apps. Format: `company-project-tools`\n- **name**: User-friendly display name (e.g., \"Project Analyzer\")\n- **description**: Brief explanation of what your app does\n\n#### Required Scopes\n\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n### Module Configuration\n\nConfigure the Project Tools module in `worker/app.ts`:\n\n```typescript\nprojectTools: {\n  fileName: 'index.html',\n  uiPath: '/tools' // Points to public/tools directory\n}\n```\n\n### Crowdin API Client\n\n#### Official Documentation\n\nThe `connection.client` object is an instance of `@crowdin/crowdin-api-client`.\n\n**📚 Complete API Reference:** https://crowdin.github.io/crowdin-api-client-js/modules.html\n\n**⚠️ CRITICAL**: Only use methods documented in the official API reference. Do NOT invent or assume methods exist.\n\n#### Common Examples\n\n**Standard Endpoint Template:**\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n\n        if (!crowdinApp.establishCrowdinConnection) {\n            return res.status(500).json({ success: false, error: 'Crowdin connection method not available' });\n        }\n\n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n\n        if (!connection.client) {\n            return res.status(500).json({ success: false, error: 'Crowdin API client not available' });\n        }\n\n        const userId = connection.context.jwtPayload.context.user_id;\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n\n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n**Get Project Details:**\n```typescript\nconst response = await connection.client.projectsGroupsApi.getProject(projectId);\n\n// Access project properties\nconst project = response.data;\nconst projectName = project.name;                    // string\nconst sourceLanguageId = project.sourceLanguageId;   // string\nconst targetLanguageIds = project.targetLanguageIds; // string[]\nconst description = project.description;             // string | null\n```\n\n**List All Projects (with pagination):**\n```typescript\nconst response = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n\n// Iterate through all projects\nresponse.data.forEach((projectItem: ResponseObject<ProjectsGroupsModel.Project>) => {\n  const projectId = projectItem.data.id;\n  const projectName = projectItem.data.name;\n  const groupId = projectItem.data.groupId; // number | null\n});\n```\n\n**Get Supported Languages:**\n```typescript\nconst response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n\n// Filter languages\nconst targetLanguageIds = ['uk', 'pl', 'de'];\nconst projectLanguages = response.data.filter(\n  (lang: ResponseObject<LanguagesModel.Language>) => targetLanguageIds.includes(lang.data.id)\n);\n\n// Map to simpler structure\nconst languages = projectLanguages.map((lang: ResponseObject<LanguagesModel.Language>) => ({\n  id: lang.data.id,           // string: \"uk\"\n  name: lang.data.name,       // string: \"Ukrainian\"\n  locale: lang.data.locale,   // string: \"uk-UA\"\n  osxLocale: lang.data.osxLocale // string\n}));\n```\n\n**List Source Files:**\n```typescript\nconst response = await connection.client.sourceFilesApi.withFetchAll().listProjectFiles(projectId);\n\nresponse.data.forEach((fileItem: ResponseObject<SourceFilesModel.File>) => {\n  const file = fileItem.data;\n  const fileId = file.id;             // number\n  const fileName = file.name;         // string\n  const branchId = file.branchId;     // number | null\n  const directoryId = file.directoryId; // number | null\n});\n```\n\n#### Best Practices\n\n1. **Always access data via `.data` property**\n   ```typescript\n   // ✅ CORRECT\n   const project = response.data;\n   const projectName = response.data.name;\n   \n   // ❌ WRONG - will be undefined\n   const projectName = response.name;\n   ```\n\n2. **Use withFetchAll() for complete data**\n   ```typescript\n   // ✅ CORRECT - gets all items\n   const response = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n   \n   // ⚠️ PARTIAL - only first page (25 items)\n   const response = await connection.client.languagesApi.listSupportedLanguages();\n   ```\n\n3. **Handle nullable properties**\n   ```typescript\n   const description = response.data.description || 'No description';\n   const groupId = response.data.groupId ?? null;\n   ```\n\n4. **Handle errors properly**\n   ```typescript\n   try {\n     const response = await connection.client.projectsGroupsApi.getProject(projectId);\n     const project = response.data;\n     // Use project data\n   } catch (error: any) {\n     console.error('Crowdin API Error:', error);\n\n     // API errors have specific structure\n     if (error.code === 404) {\n       return res.status(404).json({ error: 'Project not found' });\n     }\n     \n     return res.status(500).json({\n       error: 'API request failed',\n       details: error.message\n     });\n   }\n   ```\n\n5. **Use TypeScript types**\n   ```typescript\n   import { ResponseObject, ProjectsGroupsModel } from '@crowdin/crowdin-api-client';\n   \n   // Use in your code\n   const response: ResponseObject<ProjectsGroupsModel.Project> = await connection.client.projectsGroupsApi.getProject(projectId);\n   const project: ProjectsGroupsModel.Project = response.data;\n   ```\n\n#### Complete Type Definitions\n\n**⚠️ CRITICAL**: Only use methods and types from `@crowdin/crowdin-api-client` definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n<!-- CROWDIN_API_CLIENT_TYPES_START -->\n\n##### ai/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, PlainObject, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Ai extends CrowdinApi {\n    listAiOrganizationCustomPlaceholders(options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiOrganizationCustomPlaceholder(request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number): Promise<void>;\n    editAiOrganizationCustomPlaceholder(aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiOrganizationPromptFineTuningDataset(aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiOrganizationPromptFineTuningDatasetStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiOrganizationPromptFineTuningEvents(aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiOrganizationPromptFineTuningJobs(options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiOrganizationPromptFineTuningJob(aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiOrganizationPromptFineTuningJobStatus(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiOrganizationPromptFineTuningDataset(aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiOrganizationPrompt(aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationPrompts(options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiOrganizationPrompt(request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiOrganizationPromptCompletion(aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiOrganizationPromptCompletionStatus(aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiOrganizationPromptCompletion(aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationPrompt(aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiOrganizationPrompt(aiPromptId: number): Promise<void>;\n    editAiOrganizationPrompt(aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiOrganizationProviders(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiOrganizationProvider(request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiOrganizationProvider(aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiOrganizationProvider(aiProviderId: number): Promise<void>;\n    editAiOrganizationProvider(aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiOrganizationProviderModels(aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiOrganizationAllProviderModels(options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiOrganizationProxyChatCompletion(aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiOrganizationReport(request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiOrganizationReportStatus(aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiOrganizationReport(aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiOrganizationSettings(): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiOrganizationSettings(request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n    listAiUserCustomPlaceholders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.CustomPlaceholder>>;\n    addAiUserCustomPlaceholder(userId: number, request: AiModel.AddCustomPlaceholderRequest): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    getAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    deleteAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number): Promise<void>;\n    editAiUserCustomPlaceholder(userId: number, aiCustomPlaceholderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.CustomPlaceholder>>;\n    generateAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningDataset): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    getAiUserPromptFineTuningDatasetStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningDataset>>>;\n    listAiUserPromptFineTuningEvents(userId: number, aiPromptId: number, jobIdentifier: string, options?: PaginationOptions): Promise<ResponseList<AiModel.PromptFineTuningEvent>>;\n    listAiUserPromptFineTuningJobs(userId: number, options?: AiModel.ListPromptFineTuningJobsOptions): Promise<ResponseList<Status<AiModel.FineTuningJob>>>;\n    createAiUserPromptFineTuningJob(userId: number, aiPromptId: number, request: AiModel.GenerateFineTuningJob): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    getAiUserPromptFineTuningJobStatus(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<Status<AiModel.FineTuningJob>>>;\n    downloadAiUserPromptFineTuningDataset(userId: number, aiPromptId: number, jobIdentifier: string): Promise<ResponseObject<DownloadLink>>;\n    cloneAiUserPrompt(userId: number, aiPromptId: number, request?: {\n        name?: string;\n    }): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserPrompts(userId: number, options?: AiModel.ListAiPromptsOptions): Promise<ResponseList<AiModel.AiPromptResponse>>;\n    addAiUserPrompt(userId: number, request: AiModel.AddAiPromptRequest): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    generateAiUserPromptCompletion(userId: number, aiPromptId: number, request: AiModel.GenerateAiPromptCompletionRequest): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    getAiUserPromptCompletionStatus(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<Status<AiModel.AiPromptCompletionAttribute>>>;\n    cancelAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<void>;\n    downloadAiUserPromptCompletion(userId: number, aiPromptId: number, completionId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUserPrompt(userId: number, aiPromptId: number): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    deleteAiUserPrompt(userId: number, aiPromptId: number): Promise<void>;\n    editAiUserPrompt(userId: number, aiPromptId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiPromptResponse>>;\n    listAiUserProviders(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderResponse>>;\n    addAiUserProvider(userId: number, request: AiModel.AddAiProviderRequest): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    getAiUserProvider(userId: number, aiProviderId: number): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    deleteAiUserProvider(userId: number, aiProviderId: number): Promise<void>;\n    editAiUserProvider(userId: number, aiProviderId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiProviderResponse>>;\n    listAiUserProviderModels(userId: number, aiProviderId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    listAiUserAllProviderModels(userId: number, options?: PaginationOptions): Promise<ResponseList<AiModel.AiProviderModelResponse>>;\n    createAiUserProxyChatCompletion(userId: number, aiProviderId: number, request?: AiModel.OtherChatCompletionRequest | AiModel.GoogleGeminiChatCompletionRequest): Promise<ResponseObject<AiModel.AiProviderProxyResponseData>>;\n    generateAiUserReport(userId: number, request: AiModel.AiReport): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    checkAiUserReportStatus(userId: number, aiReportId: string): Promise<ResponseObject<Status<AiModel.AiReport>>>;\n    downloadAiUserReport(userId: number, aiReportId: string): Promise<ResponseObject<DownloadLink>>;\n    getAiUsertSettings(userId: number): Promise<ResponseObject<AiModel.AiSettings>>;\n    editAiUserSettings(userId: number, request: PatchRequest[]): Promise<ResponseObject<AiModel.AiSettings>>;\n}\nexport declare namespace AiModel {\n    interface CustomPlaceholder {\n        id: number;\n        description: string;\n        placeholder: string;\n        value: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddCustomPlaceholderRequest {\n        description: string;\n        placeholder: string;\n        value: string;\n    }\n    interface FineTuningDataset {\n        projectIds: number[];\n        tmIds: number[];\n        purpose: 'training' | 'validation';\n        dateFrom: string;\n        dateTo: string;\n        maxFileSize: number;\n        minExamplesCount: number;\n        maxExamplesCount: number;\n    }\n    interface GenerateFineTuningDataset {\n        projectIds?: number[];\n        tmIds?: number[];\n        purpose?: 'training' | 'validation';\n        dateFrom?: string;\n        dateTo?: string;\n        maxFileSize?: number;\n        minExamplesCount?: number;\n        maxExamplesCount?: number;\n    }\n    interface GenerateFineTuningJob {\n        dryRun?: boolean;\n        hyperparameters?: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions?: Omit<GenerateFineTuningDataset, 'purpose'>;\n    }\n    interface FineTuningJob {\n        dryRun: boolean;\n        aiPromptId: number;\n        hyperparameters: {\n            batchSize: number;\n            learningRateMultiplier: number;\n            nEpochs: number;\n        };\n        trainingOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        validationOptions: Omit<GenerateFineTuningDataset, 'purpose'>;\n        baseModel: string;\n        fineTunedModel: string;\n        trainedTokensCount: number;\n        trainingDatasetUrl: string;\n        validationDatasetUrl: string;\n        metadata: PlainObject;\n    }\n    interface PromptFineTuningEvent {\n        id: string;\n        type: string;\n        message: string;\n        data: {\n            step: number;\n            totalSteps: number;\n            trainingLoss: number;\n            validationLoss: number;\n            fullValidationLoss: number;\n        };\n        createdAt: string;\n    }\n    interface ListPromptFineTuningJobsOptions extends PaginationOptions {\n        statuses: string;\n        orderBy: string;\n    }\n    interface ListAiPromptsOptions extends PaginationOptions {\n        projectId?: number;\n        action?: Action;\n    }\n    interface AiPromptResponse {\n        id: number;\n        name: string;\n        action: Action;\n        aiProviderId: number;\n        aiModelId: string;\n        isEnabled: boolean;\n        enabledProjectIds: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiModel.AiPromptConfigExternal;\n        promptPreview: string;\n        isFineTuningAvailable: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AiPromptConfigBasicOtherLanguageTranslations {\n        isEnabled?: boolean;\n        languageIds?: string[];\n    }\n    interface AiPromptConfigBasicPreTranslate {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        customPlaceholders?: string[];\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContent?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAssistAction {\n        mode: 'basic';\n        companyDescription?: string;\n        projectDescription?: string;\n        audienceDescription?: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n        glossaryTerms?: boolean;\n        tmSuggestions?: boolean;\n        fileContext?: boolean;\n        screenshots?: boolean;\n        publicProjectDescription?: boolean;\n        siblingsStrings?: boolean;\n        filteredStrings?: boolean;\n    }\n    interface AiPromptConfigBasicAligmentAction {\n        mode: 'basic';\n        customPlaceholders?: string[];\n        publicProjectDescription?: boolean;\n    }\n    interface AiPromptConfigAdvanced {\n        mode: 'advanced';\n        screenshots?: boolean;\n        prompt: string;\n        otherLanguageTranslations?: AiModel.AiPromptConfigBasicOtherLanguageTranslations;\n    }\n    interface AiPromptConfigExternal {\n        mode: 'external';\n        identifier: string;\n        key: string;\n        options?: any;\n    }\n    interface AddAiPromptRequest {\n        name: string;\n        action: Action;\n        aiProviderId?: number;\n        aiModelId?: string;\n        isEnabled?: boolean;\n        enabledProjectIds?: number[];\n        config: AiModel.AiPromptConfigBasicPreTranslate | AiModel.AiPromptConfigBasicAssistAction | AiModel.AiPromptConfigBasicAligmentAction | AiModel.AiPromptConfigAdvanced | AiPromptConfigExternal;\n    }\n    interface GenerateAiPromptCompletionRequest {\n        resources: AiModel.AiPromptResourceWithPreTranslate | AiModel.AiPromptResourceWithAssist | AiModel.AiPromptResourceWithAlignment | AiModel.AiPromptResourceWithCustom;\n        tools?: {\n            tool: {\n                type: 'function';\n                function: {\n                    description?: string;\n                    name: string;\n                    parameters?: PlainObject;\n                };\n            };\n        }[];\n        tool_choice?: string | PlainObject;\n    }\n    interface AiPromptCompletionAttribute {\n        aiPromptId: number;\n    }\n    interface AiPromptResourceWithPreTranslate {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAlignment {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithAssist {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        filteredStringsIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n    }\n    interface AiPromptResourceWithCustom {\n        projectId: number;\n        sourceLanguageId?: string;\n        targetLanguageId?: string;\n        stringIds?: number[];\n        overridePromptValues?: OverridePromptValues;\n        customInstruction?: string;\n    }\n    interface OverridePromptValues {\n        [key: string]: any;\n    }\n    interface AiProviderResponse {\n        id: number;\n        name: string;\n        type: ProviderType;\n        credentials: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsCustom;\n        config: AiModel.AiProviderConfig;\n        isEnabled: boolean;\n        useSystemCredentials: boolean;\n        createdAt: string;\n        updatedAt: string;\n        promptsCount: string;\n    }\n    interface AiProviderCredentialsBasic {\n        apiKey: string;\n    }\n    interface AiProviderCredentialsAzureOpenAi extends AiProviderCredentialsBasic {\n        resourceName: string;\n        deploymentName: string;\n        apiVersion: string;\n    }\n    interface AiProviderCredentialsGoogleGemini {\n        project: string;\n        region: string;\n        serviceAccountKey: string;\n    }\n    interface AiProviderCredentialsWatsonx {\n        apiKey: string;\n        projectId: string;\n        region: string;\n    }\n    interface AiProviderCredentialsCustom {\n        identifier: string;\n        key: string;\n    }\n    interface AiProviderConfig {\n        actionRules?: AiModel.AiProviderConfigActionRule[];\n    }\n    interface AiProviderConfigActionRule {\n        action?: 'pre_translate' | 'assist';\n        availableAiModelIds?: string[];\n    }\n    interface AddAiProviderRequest {\n        name: string;\n        type: ProviderType;\n        credentials?: AiModel.AiProviderCredentialsBasic | AiModel.AiProviderCredentialsAzureOpenAi | AiProviderCredentialsGoogleGemini | AiProviderCredentialsWatsonx | AiProviderCredentialsCustom;\n        config?: AiModel.AiProviderConfig;\n        isEnabled?: boolean;\n        useSystemCredentials?: boolean;\n    }\n    interface AiProviderModelResponse {\n        id: string;\n    }\n    interface AiProviderProxyResponseData {\n        data: object;\n    }\n    interface OtherChatCompletionRequest {\n        stream?: boolean;\n        [key: string]: any;\n    }\n    interface GoogleGeminiChatCompletionRequest extends OtherChatCompletionRequest {\n        model: string;\n    }\n    type AiReport = AiReportTokenUsage;\n    interface AiReportTokenUsage {\n        type: 'tokens-usage-raw-data';\n        schema: AiReportGeneralSchema;\n    }\n    interface AiReportGeneralSchema {\n        dateFrom: string;\n        dateTo: string;\n        format?: 'json' | 'csv';\n        projectIds?: number[];\n        promptIds?: number[];\n        userIds?: number[];\n    }\n    interface AiSettings {\n        assistActionAiPromptId: number;\n        showSuggestion: boolean;\n        shortcuts: {\n            name: string;\n            prompt: string;\n            enabled: boolean;\n        }[];\n    }\n    type Action = 'pre_translate' | 'assist';\n    type ProviderType = 'open_ai' | 'azure_open_ai' | 'google_gemini' | 'mistral_ai' | 'anthropic' | 'custom_ai' | 'x_ai' | 'deepseek' | 'watsonx';\n}\n```\n\n##### applications/index.d.ts\n\n```typescript\nimport { CrowdinApi, ResponseObject, PatchRequest, Pagination, ResponseList } from '../core';\nexport declare class Applications extends CrowdinApi {\n    listApplicationInstallations(options?: Pagination): Promise<ResponseList<ApplicationsModel.Application>>;\n    installApplication(request: ApplicationsModel.InstallApplication): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationInstallation(applicationId: string): Promise<ResponseObject<ApplicationsModel.Application>>;\n    deleteApplicationInstallation(applicationId: string, force?: boolean): Promise<ResponseObject<ApplicationsModel.Application>>;\n    editApplicationInstallation(applicationId: string, request: PatchRequest[]): Promise<ResponseObject<ApplicationsModel.Application>>;\n    getApplicationData(applicationId: string, path: string): Promise<ResponseObject<any>>;\n    updateOrRestoreApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    addApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n    deleteApplicationData(applicationId: string, path: string): Promise<void>;\n    editApplicationData(applicationId: string, path: string, request: any): Promise<ResponseObject<any>>;\n}\nexport declare namespace ApplicationsModel {\n    interface Application {\n        identifier: string;\n        name: string;\n        description: string;\n        logo: string;\n        baseUrl: string;\n        manifestUrl: string;\n        createdAt: string;\n        modules: ApplicationModule[];\n        scopes: string[];\n        permissions: ApplicationPermissions;\n        defaultPermissions: any;\n        limitReached: boolean;\n    }\n    interface InstallApplication {\n        url: string;\n        permissions?: ApplicationPermissions;\n        modules?: ApplicationModule[];\n    }\n    interface ApplicationPermissions {\n        user: {\n            value: 'all' | 'owner' | 'managers' | 'guests' | 'restricted';\n            ids: number[];\n        };\n        project: {\n            value: 'own' | 'restricted';\n            ids: number[];\n        };\n    }\n    interface ApplicationModule {\n        key: string;\n        type?: string;\n        data?: any;\n        authenticationType?: string;\n        permissions: Omit<ApplicationPermissions, 'project'>;\n    }\n}\n```\n\n##### bundles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class Bundles extends CrowdinApi {\n    listBundles(projectId: number, options?: PaginationOptions): Promise<ResponseList<BundlesModel.Bundle>>;\n    addBundle(projectId: number, request: BundlesModel.CreateBundleRequest): Promise<ResponseObject<BundlesModel.Bundle>>;\n    getBundle(projectId: number, bundleId: number): Promise<ResponseObject<BundlesModel.Bundle>>;\n    deleteBundle(projectId: number, bundleId: number): Promise<void>;\n    editBundle(projectId: number, bundleId: number, request: PatchRequest[]): Promise<ResponseObject<BundlesModel.Bundle>>;\n    downloadBundle(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    exportBundle(projectId: number, bundleId: number): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    checkBundleExportStatus(projectId: number, bundleId: number, exportId: string): Promise<ResponseObject<Status<BundlesModel.ExportAttributes>>>;\n    listBundleFiles(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listBundleBranches(projectId: number, bundleId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n}\nexport declare namespace BundlesModel {\n    interface Bundle {\n        id: number;\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns: string[];\n        exportPattern: string;\n        isMultilingual: boolean;\n        includeProjectSourceLanguage: boolean;\n        labelIds: number[];\n        excludeLabelIds: number[];\n        createdAt: string;\n        webUrl: string;\n        updatedAt: string;\n    }\n    interface CreateBundleRequest {\n        name: string;\n        format: string;\n        sourcePatterns: string[];\n        ignorePatterns?: string[];\n        exportPattern: string;\n        isMultilingual?: boolean;\n        includeProjectSourceLanguage?: boolean;\n        includeInContextPseudoLanguage?: boolean;\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface ExportAttributes {\n        bundleId: number;\n    }\n}\n```\n\n##### clients/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Clients extends CrowdinApi {\n    listClients(options?: PaginationOptions): Promise<ResponseList<ClientsModel.Client>>;\n}\nexport declare namespace ClientsModel {\n    interface Client {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### core/http-client-error.d.ts\n\n```typescript\nimport { AxiosError } from 'axios';\nimport { FetchClientJsonPayloadError } from './internal/fetch/fetchClientError';\nexport type HttpClientError = AxiosError | FetchClientJsonPayloadError | Error;\nexport declare const toHttpClientError: (error?: unknown) => HttpClientError;\n```\n\n##### core/index.d.ts\n\n```typescript\nimport { HttpClientError } from './http-client-error';\nimport { RetryConfig, RetryService } from './internal/retry';\nexport interface HttpClient {\n    get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport type HttpClientType = 'axios' | 'fetch';\nexport interface Credentials {\n    token: string;\n    organization?: string;\n    baseUrl?: string;\n}\nexport interface ClientConfig {\n    httpClientType?: HttpClientType;\n    httpClient?: HttpClient;\n    userAgent?: string;\n    integrationUserAgent?: string;\n    retryConfig?: RetryConfig;\n    httpRequestTimeout?: number;\n}\nexport interface ResponseList<T> {\n    data: ResponseObject<T>[];\n    pagination: Pagination;\n}\nexport interface ResponseObject<T> {\n    data: T;\n}\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\nexport type PaginationOptions = Partial<Pagination>;\nexport interface PatchRequest {\n    value?: any;\n    op: PatchOperation;\n    path: string;\n}\nexport type PatchOperation = 'add' | 'remove' | 'replace' | 'move' | 'copy' | 'test';\nexport type ProjectRoles = 'manager' | 'developer' | 'translator' | 'proofreader' | 'language_coordinator' | 'member';\nexport interface DownloadLink {\n    url: string;\n    expireIn: string;\n}\nexport declare enum BooleanInt {\n    TRUE = 1,\n    FALSE = 0\n}\nexport interface Status<T> {\n    identifier: string;\n    status: string;\n    progress: number;\n    attributes: T;\n    createdAt: string;\n    updatedAt: string;\n    startedAt: string;\n    finishedAt: string;\n    eta: string;\n}\nexport interface Attribute {\n    [key: string]: string;\n}\nexport type PlainObject = Record<string, any>;\nexport declare class CrowdinError extends Error {\n    apiError: any;\n    code: number;\n    constructor(message: string, code: number, apiError: any);\n}\nexport declare class CrowdinValidationError extends CrowdinError {\n    validationCodes: {\n        key: string;\n        codes: string[];\n    }[];\n    constructor(message: string, validationCodes: {\n        key: string;\n        codes: string[];\n    }[], apiError: any);\n}\nexport declare function handleHttpClientError(error: HttpClientError): never;\nexport declare abstract class CrowdinApi {\n    private static readonly CROWDIN_URL_SUFFIX;\n    private static readonly AXIOS_INSTANCE;\n    private static readonly FETCH_INSTANCE;\n    readonly token: string;\n    readonly organization?: string;\n    readonly url: string;\n    readonly config: ClientConfig | undefined;\n    readonly retryService: RetryService;\n    protected fetchAllFlag: boolean;\n    protected maxLimit: number | undefined;\n    constructor(credentials: Credentials, config?: ClientConfig);\n    graphql<T>(req: {\n        query: string;\n        operationName?: string;\n        variables?: any;\n    }, config?: {\n        url?: string;\n    }): Promise<ResponseObject<T>>;\n    protected addQueryParam(url: string, name: string, value?: string | number): string;\n    protected defaultConfig(): {\n        headers: Record<string, string>;\n    };\n    get httpClient(): HttpClient;\n    withFetchAll(maxLimit?: number): this;\n    protected getList<T = any>(url: string, limit?: number, offset?: number, config?: {\n        headers: Record<string, string>;\n    }): Promise<ResponseList<T>>;\n    protected fetchAll<T>(url: string, config: {\n        headers: Record<string, string>;\n    }, maxAmount?: number): Promise<ResponseList<T>>;\n    protected encodeUrlParam(param: string | number | boolean): string;\n    protected get<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected delete<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected head<T>(url: string, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected post<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected put<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n    protected patch<T>(url: string, data?: unknown, config?: {\n        headers: Record<string, string>;\n    }): Promise<T>;\n}\nexport declare function isOptionalString(parameter: string | unknown, parameterInArgs: boolean): parameter is string | undefined;\nexport declare function isOptionalNumber(parameter: number | unknown, parameterInArgs: boolean): parameter is number | undefined;\nexport interface ProjectRole {\n    name: string;\n    permissions: ProjectRolePermissions;\n}\nexport interface ProjectRolePermissions {\n    allLanguages: boolean;\n    languagesAccess: {\n        [lang: string]: {\n            allContent: boolean;\n            workflowStepIds: number[];\n        };\n    };\n}\n```\n\n##### dictionaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Dictionaries extends CrowdinApi {\n    listDictionaries(projectId: number, options?: DictionariesModel.ListDictionariesOptions): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    listDictionaries(projectId: number, languageIds?: string): Promise<ResponseList<DictionariesModel.Dictionary>>;\n    editDictionary(projectId: number, languageId: string, request: PatchRequest[]): Promise<ResponseObject<DictionariesModel.Dictionary>>;\n}\nexport declare namespace DictionariesModel {\n    interface Dictionary {\n        languageId: string;\n        words: string[];\n    }\n    interface ListDictionariesOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### distributions/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Distributions extends CrowdinApi {\n    listDistributions(projectId: number, options?: PaginationOptions): Promise<ResponseList<DistributionsModel.Distribution>>;\n    listDistributions(projectId: number, limit?: number, offset?: number): Promise<ResponseList<DistributionsModel.Distribution>>;\n    createDistribution(projectId: number, request: DistributionsModel.CreateDistributionRequest | DistributionsModel.CreateDistributionStringsBasedRequest): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistribution(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    deleteDistribution(projectId: number, hash: string): Promise<void>;\n    editDistribution(projectId: number, hash: string, request: PatchRequest[]): Promise<ResponseObject<DistributionsModel.Distribution>>;\n    getDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n    createDistributionRelease(projectId: number, hash: string): Promise<ResponseObject<DistributionsModel.DistributionRelease | DistributionsModel.DistributionStringsBasedRelease>>;\n}\nexport declare namespace DistributionsModel {\n    interface Distribution {\n        hash: string;\n        manifestUrl: string;\n        name: string;\n        bundleIds: number[];\n        createdAt: string;\n        updatedAt: string;\n        exportMode: ExportMode;\n        fileIds: number[];\n    }\n    interface CreateDistributionRequest {\n        exportMode?: ExportMode;\n        name: string;\n        fileIds?: number[];\n        bundleIds?: number[];\n    }\n    interface CreateDistributionStringsBasedRequest {\n        name: string;\n        bundleIds: number[];\n    }\n    interface DistributionRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentFileId: number;\n        date: string;\n    }\n    interface DistributionStringsBasedRelease {\n        status: string;\n        progress: number;\n        currentLanguageId: string;\n        currentBranchId: number;\n        date: string;\n    }\n    type ExportMode = 'default' | 'bundle';\n}\n```\n\n##### fields/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Fields extends CrowdinApi {\n    listFields(options?: FieldsModel.ListFieldsParams): Promise<ResponseList<FieldsModel.Field>>;\n    addField(request: FieldsModel.AddFieldRequest): Promise<ResponseObject<FieldsModel.Field>>;\n    getField(fieldId: number): Promise<ResponseObject<FieldsModel.Field>>;\n    deleteField(fieldId: number): Promise<void>;\n    editField(fieldId: number, request: PatchRequest[]): Promise<ResponseObject<FieldsModel.Field>>;\n}\nexport declare namespace FieldsModel {\n    type Entity = 'project' | 'user' | 'task' | 'file' | 'translation' | 'string';\n    type Type = 'checkbox' | 'radiobuttons' | 'date' | 'datetime' | 'number' | 'labels' | 'select' | 'multiselect' | 'text' | 'textarea' | 'url';\n    type Place = 'projectCreateModal' | 'projectHeader' | 'projectDetails' | 'projectCrowdsourceDetails' | 'projectSettings' | 'projectTaskEditCreate' | 'projectTaskDetails' | 'projectTaskBoardCard' | 'fileDetails' | 'fileSettings' | 'userEditModal' | 'userDetails' | 'userPopover' | 'stringEditModal' | 'stringDetails' | 'translationUnderContent';\n    interface Location {\n        place: Place;\n    }\n    interface Option {\n        label: string;\n        value: string;\n    }\n    interface OtherFieldConfig {\n        locations: Location[];\n    }\n    interface ListFieldConfig extends OtherFieldConfig {\n        options: Option[];\n    }\n    interface NumberFieldConfig extends OtherFieldConfig {\n        min: number;\n        max: number;\n        units: string;\n    }\n    type Config = ListFieldConfig | NumberFieldConfig | OtherFieldConfig;\n    interface ListFieldsParams extends PaginationOptions {\n        search?: string;\n        entity?: Entity;\n        type?: Type;\n    }\n    interface Field {\n        id: number;\n        name: string;\n        slug: string;\n        type: Type;\n        description: string;\n        entities: Entity[];\n        config: Config;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddFieldRequest {\n        name: string;\n        slug: string;\n        type: Type;\n        description?: string;\n        entities: Entity[];\n        config?: Config;\n    }\n}\n```\n\n##### glossaries/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Glossaries extends CrowdinApi {\n    listGlossaries(options?: GlossariesModel.ListGlossariesOptions): Promise<ResponseList<GlossariesModel.Glossary>>;\n    listGlossaries(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<GlossariesModel.Glossary>>;\n    addGlossary(request: GlossariesModel.CreateGlossaryRequest): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    getGlossary(glossaryId: number): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    deleteGlossary(glossaryId: number): Promise<void>;\n    editGlossary(glossaryId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Glossary>>;\n    exportGlossary(glossaryId: number, request: GlossariesModel.ExportGlossaryRequest): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    checkGlossaryExportStatus(glossaryId: number, exportId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryExportStatusAttribute>>>;\n    downloadGlossary(glossaryId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    importGlossaryFile(glossaryId: number, request: GlossariesModel.GlossaryFile): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    checkGlossaryImportStatus(glossaryId: number, importId: string): Promise<ResponseObject<Status<GlossariesModel.GlossaryImportStatusAttribute>>>;\n    listTerms(glossaryId: number, options?: GlossariesModel.ListTermsOptions): Promise<ResponseList<GlossariesModel.Term>>;\n    listTerms(glossaryId: number, userId?: number, limit?: number, offset?: number, languageId?: string, translationOfTermId?: number, conceptId?: number): Promise<ResponseList<GlossariesModel.Term>>;\n    addTerm(glossaryId: number, request: GlossariesModel.CreateTermRequest): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, options?: GlossariesModel.ClearGlossaryOptions): Promise<ResponseObject<GlossariesModel.Term>>;\n    clearGlossary(glossaryId: number, languageId?: number, translationOfTermId?: number, conceptId?: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    getTerm(glossaryId: number, termId: number): Promise<ResponseObject<GlossariesModel.Term>>;\n    deleteTerm(glossaryId: number, termId: number): Promise<void>;\n    editTerm(glossaryId: number, termId: number, request: PatchRequest[]): Promise<ResponseObject<GlossariesModel.Term>>;\n    listConcepts(glossaryId: number, options?: {\n        orderBy?: string;\n    } & PaginationOptions): Promise<ResponseList<GlossariesModel.Concept>>;\n    getConcept(glossaryId: number, conceptId: number): Promise<ResponseObject<GlossariesModel.Concept>>;\n    updateConcept(glossaryId: number, conceptId: number, request: GlossariesModel.UpdateConceptRequest): Promise<ResponseObject<GlossariesModel.Concept>>;\n    deleteConcept(glossaryId: number, conceptId: number): Promise<void>;\n    concordanceSearch(projectId: number, request: GlossariesModel.ConcordanceSearchRequest): Promise<ResponseList<GlossariesModel.ConcordanceSearchResponse>>;\n}\nexport declare namespace GlossariesModel {\n    interface Glossary {\n        id: number;\n        name: string;\n        groupId: number;\n        userId: number;\n        terms: number;\n        languageId: string;\n        languageIds: string[];\n        defaultProjectIds: number[];\n        projectIds: number[];\n        webUrl: string;\n        createdAt: string;\n    }\n    interface CreateGlossaryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    type ExportField = 'term' | 'description' | 'partOfSpeech' | 'type' | 'status' | 'gender' | 'note' | 'url' | 'conceptDefinition' | 'conceptSubject' | 'conceptNote' | 'conceptUrl' | 'conceptFigure';\n    interface ExportGlossaryRequest {\n        format?: GlossaryFormat;\n        exportFields?: ExportField[];\n    }\n    interface GlossaryExportStatusAttribute {\n        format: string;\n        exportFields: ExportField[];\n    }\n    interface GlossaryImportStatusAttribute {\n        storageId: number;\n        scheme: unknown;\n        firstLineContainsHeader: boolean;\n    }\n    interface GlossaryFile {\n        storageId: number;\n        scheme?: GlossaryFileScheme;\n        firstLineContainsHeader?: boolean;\n    }\n    interface ListTermsOptions extends PaginationOptions {\n        userId?: number;\n        languageId?: string;\n        conceptId?: number;\n        orderBy?: string;\n        croql?: string;\n        translationOfTermId?: number;\n    }\n    interface Term {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        languageId: string;\n        text: string;\n        description: string;\n        partOfSpeech: PartOfSpeech;\n        status: Status;\n        type: Type;\n        gender: Gender;\n        note: string;\n        url: string;\n        conceptId: number;\n        lemma: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTermRequest {\n        languageId: string;\n        text: string;\n        description?: string;\n        partOfSpeech?: PartOfSpeech;\n        status?: Status;\n        type?: Type;\n        gender?: Gender;\n        note?: string;\n        url?: string;\n        conceptId?: number;\n        translationOfTermId?: number;\n    }\n    interface ConcordanceSearchRequest extends PaginationOptions {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        glossary: Glossary;\n        concept: Concept;\n        sourceTerms: Term[];\n        targetTerms: Term[];\n    }\n    type Status = 'preferred' | 'admitted' | 'not recommended' | 'obsolete';\n    type Type = 'full form' | 'acronym' | 'abbreviation' | 'short form' | 'phrase' | 'variant';\n    type Gender = 'masculine' | 'feminine' | 'neuter' | 'other';\n    type GlossaryFormat = 'tbx' | 'tbx_v3' | 'csv' | 'xlsx';\n    interface GlossaryFileScheme {\n        [key: string]: number;\n    }\n    type PartOfSpeech = 'adjective' | 'adposition' | 'adverb' | 'auxiliary' | 'coordinating conjunction' | 'determiner' | 'interjection' | 'noun' | 'numeral' | 'particle' | 'pronoun' | 'proper noun' | 'subordinating conjunction' | 'verb' | 'other';\n    interface ListGlossariesOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ClearGlossaryOptions {\n        languageId?: number;\n        translationOfTermId?: number;\n        conceptId?: number;\n    }\n    interface Concept {\n        id: number;\n        userId: number;\n        glossaryId: number;\n        subject: string;\n        definition: string;\n        translatable: boolean;\n        note: string;\n        url: string;\n        figure: string;\n        languagesDetails: LanguageDetails[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface LanguageDetails {\n        languageId: string;\n        userId: number;\n        definition: string;\n        note: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface UpdateConceptRequest {\n        subject?: string;\n        definition?: string;\n        translatable?: boolean;\n        note?: string;\n        url?: string;\n        figure?: string;\n        languagesDetails?: {\n            languageId: string;\n            definition: string;\n            note?: string;\n        }[];\n    }\n}\n```\n\n##### index.d.ts\n\n```typescript\nimport { Ai } from './ai';\nimport { Applications } from './applications';\nimport { Bundles } from './bundles';\nimport { Clients } from './clients';\nimport { ClientConfig, Credentials, CrowdinApi } from './core';\nimport { Dictionaries } from './dictionaries';\nimport { Distributions } from './distributions';\nimport { Fields } from './fields';\nimport { Glossaries } from './glossaries';\nimport { Issues } from './issues';\nimport { Labels } from './labels';\nimport { Languages } from './languages';\nimport { MachineTranslation } from './machineTranslation';\nimport { Notifications } from './notifications';\nimport { OrganizationWebhooks } from './organizationWebhooks';\nimport { ProjectsGroups } from './projectsGroups';\nimport { Reports } from './reports';\nimport { Screenshots } from './screenshots';\nimport { SecurityLogs } from './securityLogs';\nimport { SourceFiles } from './sourceFiles';\nimport { SourceStrings } from './sourceStrings';\nimport { StringComments } from './stringComments';\nimport { StringCorrections } from './stringCorrections';\nimport { StringTranslations } from './stringTranslations';\nimport { Tasks } from './tasks';\nimport { Teams } from './teams';\nimport { TranslationMemory } from './translationMemory';\nimport { TranslationStatus } from './translationStatus';\nimport { Translations } from './translations';\nimport { UploadStorage } from './uploadStorage';\nimport { Users } from './users';\nimport { Vendors } from './vendors';\nimport { Webhooks } from './webhooks';\nimport { Workflows } from './workflows';\nexport * from './ai';\nexport * from './applications';\nexport * from './bundles';\nexport * from './clients';\nexport * from './core';\nexport * from './dictionaries';\nexport * from './distributions';\nexport * from './fields';\nexport * from './glossaries';\nexport * from './issues';\nexport * from './labels';\nexport * from './languages';\nexport * from './machineTranslation';\nexport * from './notifications';\nexport * from './organizationWebhooks';\nexport * from './projectsGroups';\nexport * from './reports';\nexport * from './screenshots';\nexport * from './securityLogs';\nexport * from './sourceFiles';\nexport * from './sourceStrings';\nexport * from './stringComments';\nexport * from './stringCorrections';\nexport * from './stringTranslations';\nexport * from './tasks';\nexport * from './teams';\nexport * from './translationMemory';\nexport * from './translationStatus';\nexport * from './translations';\nexport * from './uploadStorage';\nexport * from './users';\nexport * from './vendors';\nexport * from './webhooks';\nexport * from './workflows';\nexport default class Client extends CrowdinApi {\n    readonly aiApi: Ai;\n    readonly applicationsApi: Applications;\n    readonly sourceFilesApi: SourceFiles;\n    readonly glossariesApi: Glossaries;\n    readonly languagesApi: Languages;\n    readonly translationsApi: Translations;\n    readonly translationStatusApi: TranslationStatus;\n    readonly projectsGroupsApi: ProjectsGroups;\n    readonly reportsApi: Reports;\n    readonly screenshotsApi: Screenshots;\n    readonly sourceStringsApi: SourceStrings;\n    readonly uploadStorageApi: UploadStorage;\n    readonly tasksApi: Tasks;\n    readonly translationMemoryApi: TranslationMemory;\n    readonly webhooksApi: Webhooks;\n    readonly organizationWebhooksApi: OrganizationWebhooks;\n    readonly machineTranslationApi: MachineTranslation;\n    readonly stringTranslationsApi: StringTranslations;\n    readonly workflowsApi: Workflows;\n    readonly usersApi: Users;\n    readonly vendorsApi: Vendors;\n    readonly issuesApi: Issues;\n    readonly teamsApi: Teams;\n    readonly distributionsApi: Distributions;\n    readonly dictionariesApi: Dictionaries;\n    readonly labelsApi: Labels;\n    readonly stringCommentsApi: StringComments;\n    readonly bundlesApi: Bundles;\n    readonly notificationsApi: Notifications;\n    readonly clientsApi: Clients;\n    readonly securityLogsApi: SecurityLogs;\n    readonly fieldsApi: Fields;\n    readonly stringCorrectionsApi: StringCorrections;\n    constructor(credentials: Credentials, config?: ClientConfig);\n}\nexport { Client };\n```\n\n##### issues/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Issues extends CrowdinApi {\n    listReportedIssues(projectId: number, options?: IssuesModel.ListReportedIssuesOptions): Promise<ResponseList<IssuesModel.Issue>>;\n    listReportedIssues(projectId: number, limit?: number, offset?: number, type?: IssuesModel.Type, status?: IssuesModel.Status): Promise<ResponseList<IssuesModel.Issue>>;\n    editIssue(projectId: number, issueId: number, request: PatchRequest[]): Promise<ResponseObject<IssuesModel.Issue>>;\n}\nexport declare namespace IssuesModel {\n    type Type = 'all' | 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type Status = 'all' | 'resolved' | 'unresolved';\n    interface Issue {\n        id: number;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: string;\n        languageId: string;\n        type: Type;\n        status: Status;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface String {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface ListReportedIssuesOptions extends PaginationOptions {\n        type?: IssuesModel.Type;\n        status?: IssuesModel.Status;\n    }\n}\n```\n\n##### labels/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { ScreenshotsModel } from '../screenshots';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Labels extends CrowdinApi {\n    listLabels(projectId: number, options?: LabelsModel.ListLabelsParams): Promise<ResponseList<LabelsModel.Label>>;\n    listLabels(projectId: number, limit?: number, offset?: number): Promise<ResponseList<LabelsModel.Label>>;\n    addLabel(projectId: number, request: LabelsModel.AddLabelRequest): Promise<ResponseObject<LabelsModel.Label>>;\n    getLabel(projectId: number, labelId: number): Promise<ResponseObject<LabelsModel.Label>>;\n    deleteLabel(projectId: number, labelId: number): Promise<void>;\n    editLabel(projectId: number, labelId: number, request: PatchRequest[]): Promise<ResponseObject<LabelsModel.Label>>;\n    assignLabelToScreenshots(projectId: number, labelId: number, request: LabelsModel.AssignLabelToScreenshotsRequet): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    unassignLabelFromScreenshots(projectId: number, labelId: number, screenshotIds: string): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    assignLabelToString(projectId: number, labelId: number, request: LabelsModel.AssignLabelToStringsRequet): Promise<ResponseList<SourceStringsModel.String>>;\n    unassignLabelFromString(projectId: number, labelId: number, stringIds: string): Promise<ResponseList<SourceStringsModel.String>>;\n}\nexport declare namespace LabelsModel {\n    interface ListLabelsParams extends PaginationOptions {\n        orderBy?: string;\n    }\n    interface Label {\n        id: number;\n        title: string;\n        isSystem?: boolean;\n    }\n    interface AddLabelRequest {\n        title: string;\n    }\n    interface AssignLabelToStringsRequet {\n        stringIds: number[];\n    }\n    interface AssignLabelToScreenshotsRequet {\n        screenshotIds: number[];\n    }\n}\n```\n\n##### languages/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Languages extends CrowdinApi {\n    listSupportedLanguages(options?: PaginationOptions): Promise<ResponseList<LanguagesModel.Language>>;\n    listSupportedLanguages(limit?: number, offset?: number): Promise<ResponseList<LanguagesModel.Language>>;\n    addCustomLanguage(request: LanguagesModel.AddLanguageRequest): Promise<ResponseObject<LanguagesModel.Language>>;\n    getLanguage(languageId: string): Promise<ResponseObject<LanguagesModel.Language>>;\n    deleteCustomLanguage(languageId: string): Promise<void>;\n    editCustomLanguage(languageId: string, request: PatchRequest[]): Promise<ResponseObject<LanguagesModel.Language>>;\n}\nexport declare namespace LanguagesModel {\n    interface Language {\n        id: string;\n        name: string;\n        editorCode: string;\n        twoLettersCode: string;\n        threeLettersCode: string;\n        locale: string;\n        androidCode: string;\n        osxCode: string;\n        osxLocale: string;\n        pluralCategoryNames: string[];\n        pluralRules: string;\n        pluralExamples: string[];\n        textDirection: TextDirection;\n        dialectOf: string;\n    }\n    interface AddLanguageRequest {\n        name: string;\n        code: string;\n        localeCode: string;\n        textDirection: TextDirection;\n        pluralCategoryNames: string[];\n        threeLettersCode: string;\n        twoLettersCode?: string;\n        dialectOf?: string;\n    }\n    type TextDirection = 'ltr' | 'rtl';\n}\n```\n\n##### machineTranslation/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class MachineTranslation extends CrowdinApi {\n    listMts(options?: MachineTranslationModel.ListMTsOptions): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    listMts(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<MachineTranslationModel.MachineTranslation>>;\n    createMt(request: MachineTranslationModel.CreateMachineTranslationRequest): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    getMt(mtId: number): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    deleteMt(mtId: number): Promise<void>;\n    updateMt(mtId: number, request: PatchRequest[]): Promise<ResponseObject<MachineTranslationModel.MachineTranslation>>;\n    translate(mtId: number, request: MachineTranslationModel.TranslateRequest): Promise<ResponseObject<MachineTranslationModel.TranslateResponse>>;\n}\nexport declare namespace MachineTranslationModel {\n    interface MachineTranslation {\n        id: number;\n        groupId: number;\n        name: string;\n        type: number;\n        credentials: Credentials;\n        projectIds: number[];\n        supportedLanguageIds: string[];\n        supportedLanguagePairs: Record<string, string[]>;\n        enabledLanguageIds: string[];\n        enabledProjectIds: number[];\n        isEnabled: boolean;\n    }\n    type Credentials = {\n        apiKey: string;\n    } | {\n        credentials: string;\n    } | {\n        model: string;\n        apiKey: string;\n    } | {\n        isSystemCredentials: boolean;\n        apiKey: string;\n    } | {\n        endpoint: string;\n        apiKey: string;\n    } | {\n        url: string;\n    } | {\n        accessKey: string;\n        secretKey: string;\n    };\n    interface CreateMachineTranslationRequest {\n        name: string;\n        type: string;\n        credentials: Credentials;\n        groupId?: number;\n        enabledLanguageIds?: string[];\n        enabledProjectIds?: number[];\n        isEnabled?: boolean;\n    }\n    interface TranslateRequest {\n        languageRecognitionProvider?: LanguageRecognitionProvider;\n        sourceLanguageId?: string;\n        targetLanguageId: string;\n        strings?: string[];\n    }\n    interface TranslateResponse {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        strings: string[];\n        translations: string[];\n    }\n    type LanguageRecognitionProvider = 'crowdin' | 'engine';\n    interface ListMTsOptions extends PaginationOptions {\n        groupId?: number;\n    }\n}\n```\n\n##### notifications/index.d.ts\n\n```typescript\nimport { CrowdinApi } from '../core';\nexport declare class Notifications extends CrowdinApi {\n    sendNotificationToAuthenticatedUser(request: NotificationsModel.Notification): Promise<void>;\n    sendNotificationToProjectMembers(projectId: number, request: NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n    sendNotificationToOrganizationMembers(request: NotificationsModel.Notification | NotificationsModel.NotificationByUsers | NotificationsModel.NotificationByRole): Promise<void>;\n}\nexport declare namespace NotificationsModel {\n    interface Notification {\n        message: string;\n    }\n    interface NotificationByUsers extends Notification {\n        userIds: number[];\n    }\n    interface NotificationByRole extends Notification {\n        role: 'owner' | 'admin';\n    }\n}\n```\n\n##### organizationWebhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { WebhooksModel } from '../webhooks';\nexport declare class OrganizationWebhooks extends CrowdinApi {\n    listWebhooks(options?: PaginationOptions): Promise<ResponseList<OrganizationWebhooksModel.OrganizationWebhook>>;\n    addWebhook(request: OrganizationWebhooksModel.AddOrganizationWebhookRequest): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    getWebhook(webhookId: number): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n    deleteWebhook(webhookId: number): Promise<void>;\n    editWebhook(webhookId: number, request: PatchRequest[]): Promise<ResponseObject<OrganizationWebhooksModel.OrganizationWebhook>>;\n}\nexport declare namespace OrganizationWebhooksModel {\n    type OrganizationWebhook = Omit<WebhooksModel.Webhook, 'projectId' | 'events'> & {\n        events: Event[];\n    };\n    type AddOrganizationWebhookRequest = Omit<WebhooksModel.AddWebhookRequest, 'events'> & {\n        events: Event[];\n    };\n    type Event = 'group.created' | 'group.deleted' | 'project.created' | 'project.deleted';\n}\n```\n\n##### projectsGroups/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class ProjectsGroups extends CrowdinApi {\n    listGroups(options?: ProjectsGroupsModel.ListGroupsOptions): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    listGroups(parentId?: number, offset?: number, userId?: number, limit?: number): Promise<ResponseList<ProjectsGroupsModel.Group>>;\n    addGroup(request: ProjectsGroupsModel.AddGroupRequest): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    getGroup(groupId: number): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    deleteGroup(groupId: number): Promise<void>;\n    editGroup(groupId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Group>>;\n    listProjects(options?: ProjectsGroupsModel.ListProjectsOptions): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    listProjects(groupId?: number, hasManagerAccess?: BooleanInt, limit?: number, offset?: number): Promise<ResponseList<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    addProject(request: ProjectsGroupsModel.CreateProjectEnterpriseRequest | ProjectsGroupsModel.CreateProjectRequest): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    getProject(projectId: number): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    deleteProject(projectId: number): Promise<void>;\n    editProject(projectId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings>>;\n    downloadProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    resetProjectFileFormatSettingsCustomSegmentation(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<DownloadLink>>;\n    listProjectFileFormatSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    addProjectFileFormatSettings(projectId: number, request: ProjectsGroupsModel.AddProjectFileFormatSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    getProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    deleteProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number): Promise<void>;\n    editProjectFileFormatSettings(projectId: number, fileFormatSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<ProjectsGroupsModel.ProjectFileFormatSettings>>;\n    listProjectStringsExporterSettings(projectId: number, options?: PaginationOptions): Promise<ResponseList<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    addProjectStringsExporterSettings(projectId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    getProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n    deleteProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number): Promise<void>;\n    editProjectStringsExporterSettings(projectId: number, systemStringsExporterSettingsId: number, request: ProjectsGroupsModel.AddProjectStringsExporterSettingsRequest): Promise<ResponseObject<ProjectsGroupsModel.ProjectStringsExporterSettings>>;\n}\nexport declare namespace ProjectsGroupsModel {\n    interface Group {\n        id: number;\n        name: string;\n        description: string;\n        parentId: number;\n        organizationId: number;\n        userId: number;\n        subgroupsCount: number;\n        projectsCount: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddGroupRequest {\n        name: string;\n        parentId?: number;\n        description?: string;\n    }\n    interface Project {\n        id: number;\n        type: Type;\n        userId: number;\n        sourceLanguageId: string;\n        targetLanguageIds: string[];\n        languageAccessPolicy: LanguageAccessPolicy;\n        name: string;\n        identifier: string;\n        description: string;\n        visibility: string;\n        logo: string;\n        publicDownloads: boolean;\n        createdAt: string;\n        updatedAt: string;\n        lastActivity: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        webUrl: string;\n        savingsReportSettingsTemplateId: number;\n        fields: Record<string, any>;\n        cname: string;\n        groupId: number;\n        background: string;\n        isExternal: boolean;\n        externalType: string;\n        externalProjectId: number;\n        externalOrganizationId: number;\n        workflowId: number;\n        hasCrowdsourcing: boolean;\n        publicUrl: string;\n    }\n    interface CreateProjectRequest {\n        name: string;\n        identifier: string;\n        sourceLanguageId: string;\n        targetLanguageIds?: string[];\n        visibility?: JoinPolicy;\n        languageAccessPolicy?: LanguageAccessPolicy;\n        cname?: string;\n        description?: string;\n        tagDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        autoSubstitution?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        useGlobalTm?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportApprovedOnly?: boolean;\n        qaCheckIsActive?: boolean;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        normalizePlaceholder?: boolean;\n        notificationSettings?: NotificationSettings;\n        tmPreTranslate?: ProjectSettings['tmPreTranslate'];\n        mtPreTranslate?: ProjectSettings['mtPreTranslate'];\n        aiPreTranslate?: ProjectSettings['aiPreTranslate'];\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        savingsReportSettingsTemplateId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    interface CreateProjectEnterpriseRequest {\n        name: string;\n        sourceLanguageId: string;\n        templateId?: number;\n        steps?: WorkflowTemplateStepConfig[];\n        groupId?: number;\n        targetLanguageIds?: string[];\n        vendorId?: number;\n        mtEngineId?: number;\n        description?: string;\n        translateDuplicates?: TranslateDuplicates;\n        tagsDetection?: TagDetection;\n        isMtAllowed?: boolean;\n        taskBasedAccessControl?: boolean;\n        taskReviewerIds?: number[];\n        autoSubstitution?: boolean;\n        showTmSuggestionsDialects?: boolean;\n        autoTranslateDialects?: boolean;\n        publicDownloads?: boolean;\n        hiddenStringsProofreadersAccess?: boolean;\n        delayedWorkflowStart?: boolean;\n        skipUntranslatedStrings?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: number;\n        normalizePlaceholder?: boolean;\n        qaCheckIsActive?: boolean;\n        qaApprovalsCount?: number;\n        qaCheckCategories?: CheckCategories;\n        qaChecksIgnorableCategories?: CheckCategories;\n        customQaCheckIds?: number[];\n        languageMapping?: LanguageMapping;\n        glossaryAccess?: boolean;\n        glossaryAccessOption?: GlossaryAccessOption;\n        notificationSettings?: NotificationSettings;\n        savingsReportSettingsTemplateId?: number;\n        fields?: Record<string, any>;\n        assistActionAiPromptId?: number;\n        editorSuggestionAiPromptId?: number;\n        alignmentActionAiPromptId?: number;\n        defaultTmId?: number;\n        defaultGlossaryId?: number;\n        inContext?: boolean;\n        inContextProcessHiddenStrings?: boolean;\n        inContextPseudoLanguageId?: string;\n        saveMetaInfoInSource?: boolean;\n        type?: BooleanInt;\n        skipUntranslatedFiles?: boolean;\n        tmContextType?: TmContextType;\n    }\n    type GlossaryAccessOption = 'readOnly' | 'fullAccess' | 'manageDrafts';\n    interface ProjectSettings extends Project {\n        translateDuplicates: TranslateDuplicates;\n        tagsDetection: TagDetection;\n        glossaryAccess: boolean;\n        glossaryAccessOption: GlossaryAccessOption;\n        isMtAllowed: boolean;\n        taskBasedAccessControl: boolean;\n        hiddenStringsProofreadersAccess: boolean;\n        autoSubstitution: boolean;\n        exportTranslatedOnly: boolean;\n        skipUntranslatedStrings: boolean;\n        exportApprovedOnly: boolean;\n        autoTranslateDialects: boolean;\n        useGlobalTm: boolean;\n        showTmSuggestionsDialects: boolean;\n        isSuspended: boolean;\n        qaCheckIsActive: boolean;\n        qaCheckCategories: CheckCategories;\n        qaChecksIgnorableCategories: CheckCategories;\n        languageMapping: LanguageMapping;\n        notificationSettings: NotificationSettings;\n        defaultTmId: number;\n        defaultGlossaryId: number;\n        assignedTms: {\n            [id: string]: {\n                priority: number;\n            };\n        };\n        assignedGlossaries: number[];\n        tmPenalties: {\n            autoSubstitution: number;\n            tmPriority: {\n                priority: number;\n                penalty: number;\n            };\n            multipleTranslations: number;\n            timeSinceLastUsage: {\n                months: number;\n                penalty: number;\n            };\n            timeSinceLastModified: {\n                months: number;\n                penalty: number;\n            };\n        };\n        normalizePlaceholder: boolean;\n        tmPreTranslate: {\n            enabled: boolean;\n            autoApproveOption: 'all' | 'perfectMatchOnly' | 'exceptAutoSubstituted' | 'perfectMatchApprovedOnly' | 'none';\n            minimumMatchRatio: 'perfect' | '100';\n        };\n        mtPreTranslate: {\n            enabled: boolean;\n            mts: {\n                mtId: number;\n                languageIds: string[];\n            }[];\n        };\n        aiPreTranslate: {\n            enabled: boolean;\n            aiPrompts: {\n                aiPromptId: number;\n                languageIds: string[];\n            }[];\n        };\n        assistActionAiPromptId: number;\n        editorSuggestionAiPromptId: number;\n        inContext: boolean;\n        inContextProcessHiddenStrings: string;\n        inContextPseudoLanguageId: string;\n        inContextPseudoLanguage: LanguagesModel.Language;\n        saveMetaInfoInSource: boolean;\n        skipUntranslatedFiles: boolean;\n        tmContextType: TmContextType;\n        clientOrganizationId: number;\n        taskReviewerIds: number[];\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n        qaApprovalsCount: number;\n        customQaCheckIds: number[];\n        externalQaCheckIds: number[];\n        delayedWorkflowStart: boolean;\n        alignmentActionAiPromptId: number;\n    }\n    enum Type {\n        FILES_BASED = 0,\n        STRINGS_BASED = 1\n    }\n    enum TagDetection {\n        AUTO = 0,\n        COUNT_TAGS = 1,\n        SKIP_TAGS = 2\n    }\n    type JoinPolicy = 'open' | 'private';\n    type LanguageAccessPolicy = 'open' | 'moderate';\n    interface CheckCategories {\n        empty: boolean;\n        size: boolean;\n        tags: boolean;\n        spaces: boolean;\n        variables: boolean;\n        punctuation: boolean;\n        symbolRegister: boolean;\n        specialSymbols: boolean;\n        wrongTranslation: boolean;\n        spellcheck: boolean;\n        icu: boolean;\n        terms: boolean;\n        duplicate: boolean;\n        ftl: boolean;\n        android: boolean;\n    }\n    interface LanguageMapping {\n        [key: string]: LanguageMappingEntity;\n    }\n    interface LanguageMappingEntity {\n        name: string;\n        two_letters_code: string;\n        three_letters_code: string;\n        locale: string;\n        locale_with_underscore: string;\n        android_code: string;\n        osx_code: string;\n        osx_locale: string;\n    }\n    enum TranslateDuplicates {\n        SHOW = 0,\n        HIDE_REGULAR_DETECTION = 1,\n        SHOW_AUTO_TRANSLATE = 2,\n        SHOW_WITHIN_VERION_BRANCH_REGULAR_DETECTION = 3,\n        HIDE_STRICT_DETECTION = 4,\n        SHOW_WITHIN_VERION_BRANCH_STRICT_DETECTION = 5\n    }\n    interface NotificationSettings {\n        translatorNewStrings?: boolean;\n        managerNewStrings?: boolean;\n        managerLanguageCompleted?: boolean;\n    }\n    interface ListGroupsOptions extends PaginationOptions {\n        parentId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListProjectsOptions extends PaginationOptions {\n        groupId?: number;\n        hasManagerAccess?: BooleanInt;\n        orderBy?: string;\n        type?: BooleanInt;\n    }\n    type Settings = PropertyFileFormatSettings | CommonFileFormatSettings | XmlFileFormatSettings | MdxV2FormatSettings | FmHtmlFormatSettings | HtmlFormatSettings | JsonFormatSettings | MdxV1FormatSettings | JavaScriptFileFormatSettings | DocxFileFormatSettings;\n    interface ProjectFileFormatSettings {\n        id: number;\n        name: string;\n        format: string;\n        extensions: string[];\n        settings: Settings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddProjectFileFormatSettingsRequest {\n        format: string;\n        settings: Settings;\n    }\n    interface PropertyFileFormatSettings {\n        escapeQuotes?: 0 | 1 | 2 | 3;\n        escapeSpecialCharacters?: 0 | 1;\n        exportPattern?: string;\n    }\n    interface JavaScriptFileFormatSettings {\n        exportPattern?: 'string';\n        exportQuotes?: 'single' | 'double';\n    }\n    interface CommonFileFormatSettings {\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        exportPattern?: string;\n    }\n    interface XmlFileFormatSettings extends CommonFileFormatSettings {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        translatableElements?: string[];\n    }\n    interface JsonFormatSettings extends CommonFileFormatSettings {\n        type?: 'i18next_json' | 'nestjs_i18n';\n    }\n    interface MdxV2FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxV1FormatSettings extends CommonFileFormatSettings {\n        excludeCodeBlocks?: boolean;\n        excludedFrontMatterElements?: string[];\n        type?: 'mdx_v1' | 'mdx_v2';\n    }\n    interface FmHtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n        excludedFrontMatterElements?: string[];\n    }\n    interface HtmlFormatSettings extends CommonFileFormatSettings {\n        excludedElements?: boolean;\n    }\n    interface DocxFileFormatSettings extends CommonFileFormatSettings {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n    }\n    type TmContextType = 'segmentContext' | 'auto' | 'prevAndNextSegment';\n    type WorkflowTemplateStepConfig = WorkflowTemplateStepConfigTranslateProofread | WorkflowTemplateStepConfigVendor | WorkflowTemplateStepConfigTMPreTranslate | WorkflowTemplateStepConfigMTPreTranslate;\n    interface WorkflowTemplateStepConfigTranslateProofread {\n        id: number;\n        languages?: string[];\n        assignees?: number[];\n        config?: {\n            assignees: {\n                [key: string]: number[];\n            };\n        };\n    }\n    interface WorkflowTemplateStepConfigVendor {\n        id: number;\n        languages?: string[];\n        vendorId?: number;\n    }\n    interface WorkflowTemplateStepConfigTMPreTranslate {\n        id: number;\n        languages?: string[];\n        config?: {\n            minRelevant?: number;\n            autoSubstitution?: boolean;\n        };\n    }\n    interface WorkflowTemplateStepConfigMTPreTranslate {\n        id: number;\n        languages?: string[];\n        mtId?: number;\n    }\n    type StringsExporterSettings = AndroidStringsExporterSettings | MacOSXStringsExporterSettings | XliffStringsExporterSettings;\n    interface ProjectStringsExporterSettings {\n        id: number;\n        format: string;\n        settings: StringsExporterSettings;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AndroidStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n        useCdataForStringsWithTags?: boolean;\n    }\n    interface MacOSXStringsExporterSettings {\n        convertPlaceholders?: boolean;\n        convertLineBreaks?: boolean;\n    }\n    interface XliffStringsExporterSettings {\n        languagePairMapping?: {\n            [key: string]: {\n                sourceLanguageId: string;\n            };\n        };\n        copySourceToEmptyTarget?: boolean;\n        exportTranslatorsComment?: boolean;\n    }\n    interface AddProjectStringsExporterSettingsRequest {\n        format: string;\n        settings: StringsExporterSettings;\n    }\n}\n```\n\n##### reports/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class Reports extends CrowdinApi {\n    listOrganizationReportArchives(options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getOrganizationReportArchive(archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteOrganizationReportArchive(archiveId: number): Promise<void>;\n    exportOrganizationReportArchive(archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkOrganizationReportArchiveStatus(archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadOrganizationReportArchive(archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    listUserReportArchives(userId: number, options?: ReportsModel.ListReportArchiveParams): Promise<ResponseList<ReportsModel.ReportArchive>>;\n    getUserReportArchive(userId: number, archiveId: number): Promise<ResponseObject<ReportsModel.ReportArchive>>;\n    deleteUserReportArchive(userId: number, archiveId: number): Promise<void>;\n    exportUserReportArchive(userId: number, archiveId: number, request?: {\n        format?: ReportsModel.Format;\n    }): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    checkUserReportArchiveStatus(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<Status<ReportsModel.ReportArchiveStatusAttribute>>>;\n    downloadUserReportArchive(userId: number, archiveId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateGroupReport(groupId: number, request: ReportsModel.GenerateGroupReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    checkGroupReportStatus(groupId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.GroupReportSchema>>>>;\n    downloadGroupReport(groupId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listOrganizationReportSettingsTemplates(options?: ReportsModel.ListOrganizationReportSettingsParams): Promise<ResponseList<ReportsModel.OrganizationReportSettings>>;\n    addOrganizationReportSettingsTemplate(request: ReportsModel.AddOrganizationReportSettingsRequest): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    getOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    editOrganizationReportSettingsTemplate(reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.OrganizationReportSettings>>;\n    deleteOrganizationReportSettingsTemplate(reportSettingsTemplateId: number): Promise<void>;\n    generateOrganizationReport(request: ReportsModel.GenerateOrganizationReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    checkOrganizationReportStatus(reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.OrganizationReportSchema>>>>;\n    downloadOrganizationReport(reportId: string): Promise<ResponseObject<DownloadLink>>;\n    generateReport(projectId: number, request: ReportsModel.GenerateReportRequest): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    checkReportStatus(projectId: number, reportId: string): Promise<ResponseObject<Status<ReportsModel.ReportStatusAttributes<ReportsModel.ReportSchema>>>>;\n    downloadReport(projectId: number, reportId: string): Promise<ResponseObject<DownloadLink>>;\n    listReportSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.ReportSettings>>;\n    addReportSettingsTemplate(projectId: number, request: ReportsModel.AddReportSettingsRequest): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    getReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    editReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.ReportSettings>>;\n    deleteReportSettingsTemplate(projectId: number, reportSettingsTemplateId: number): Promise<void>;\n    listUserReportSettingsTemplates(userId: number, options?: PaginationOptions): Promise<ResponseList<ReportsModel.UserReportSettings>>;\n    addUserReportSettingsTemplate(userId: number, request: ReportsModel.AddUserReportSettingsRequest): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    getUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    editUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number, request: PatchRequest[]): Promise<ResponseObject<ReportsModel.UserReportSettings>>;\n    deleteUserReportSettingsTemplate(userId: number, reportSettingsTemplateId: number): Promise<void>;\n}\nexport declare namespace ReportsModel {\n    interface ReportArchive {\n        id: number;\n        scopeType: string;\n        scopeId: number;\n        userId: number;\n        name: string;\n        webUrl: string;\n        scheme: any;\n        createdAt: string;\n    }\n    interface ListReportArchiveParams extends PaginationOptions {\n        scopeType: string;\n        scopeId: number;\n    }\n    interface ReportArchiveStatusAttribute {\n        format: Format;\n        reportName: string;\n        schema: any;\n    }\n    type GroupReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    type OrganizationReportSchema = GroupTranslationCostsPostEditingSchema | GroupTopMembersSchema | GroupTaskUsageSchema | GroupQaCheckIssuesSchema | GroupTranslationActivitySchema;\n    interface GenerateGroupReportRequest {\n        name: string;\n        schema: GroupReportSchema;\n    }\n    interface GenerateOrganizationReportRequest {\n        name: string;\n        schema: OrganizationReportSchema;\n    }\n    interface GroupTranslationCostsPostEditingSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n    }\n    interface GroupTranslationCostsPerEditingByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n    }\n    interface CostsEstimationSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface CostsEstimationByTaskSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface GroupTopMembersSchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface RawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type GenerateReportRequest = PreTranslateEfficeincy | PreTranslateAccuracy | TranslateAccuracy | CostEstimationPostEnding | TranslationCostsPostEnding | TopMembers | ContributionRawData | SourceContentUpdates | ProjectMembers | EditorIssues | QaCheckIssues | SavingActivity | TranslationActivity;\n    type ReportSchema = Pick<GenerateReportRequest, 'schema'>;\n    interface PreTranslateEfficeincy {\n        name: 'pre-translate-efficiency';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface PreTranslateAccuracy {\n        name: 'pre-translate-accuracy';\n        schema: PreTranslateAccuracySchema | PreTranslateAccuracySchemaByTask;\n    }\n    interface TranslateAccuracy {\n        name: 'translator-accuracy';\n        schema: TranslateAccuracySchema;\n    }\n    interface CostEstimationPostEnding {\n        name: 'costs-estimation-pe';\n        schema: CostEstimationPostEndingSchema | CostEstimationPostEndingSchemaByTask;\n    }\n    interface TranslationCostsPostEnding {\n        name: 'translation-costs-pe';\n        schema: TranslationCostsPostEndingSchema | TranslationCostsPostEndingSchemaByTask;\n    }\n    interface TopMembers {\n        name: 'top-members';\n        schema: TopMembersSchema;\n    }\n    interface ContributionRawData {\n        name: 'contribution-raw-data';\n        schema: ContributionRawDataSchema | ContributionRawDataSchemaByTask;\n    }\n    interface SourceContentUpdates {\n        name: 'source-content-updates';\n        schema: SourceContentUpdatesSchema;\n    }\n    interface ProjectMembers {\n        name: 'project-members';\n        schema: MembersSchema;\n    }\n    interface EditorIssues {\n        name: 'editor-issues';\n        schema: EditorIssuesSchema;\n    }\n    interface QaCheckIssues {\n        name: 'qa-check-issues';\n        schema: ProjectQaCheckIssuesSchema;\n    }\n    interface SavingActivity {\n        name: 'saving-activity';\n        schema: SavingActivitySchema;\n    }\n    interface TranslationActivity {\n        name: 'translation-activity';\n        schema: ProjectConsumptionSchema;\n    }\n    interface ReportStatusAttributes<S> {\n        format: Format;\n        reportName: string;\n        schema: S;\n    }\n    interface PreTranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateAccuracySchemaByTask {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        taskId?: number;\n    }\n    interface TranslateAccuracySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        userIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface CostEstimationPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        languageId?: string;\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface CostEstimationPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: Omit<NetRateSchemas, 'mtMatch' | 'suggestionMatch'>;\n        calculateInternalMatches?: boolean;\n        includePreTranslatedStrings?: boolean;\n        taskId?: number;\n    }\n    interface TranslationCostsPostEndingSchemaByTask {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        taskId?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n    }\n    interface TranslationCostsPostEndingSchema {\n        unit?: Unit;\n        currency?: Currency;\n        format?: Format;\n        baseRates: BaseRate;\n        individualRates: IndividualRate[];\n        netRateSchemes: NetRateSchemas;\n        excludeApprovalsForEditedTranslations?: boolean;\n        preTranslatedStringsCategorizationAdjustment?: boolean;\n        groupBy?: GroupBy;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number;\n        labelIncludeType?: LabelIncludeType;\n        workflowStepId?: number;\n    }\n    interface TopMembersSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchema {\n        mode: ContributionMode;\n        unit?: Unit;\n        languageId?: string;\n        userId?: string;\n        columns?: Column[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ContributionRawDataSchemaByTask {\n        mode: ContributionMode;\n        unit?: Unit;\n        taskId: number;\n        columns?: Column[];\n        tmIds?: number[];\n        mtIds?: number[];\n        aiPromptIds?: number[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface PreTranslateEfficiencySchema {\n        unit?: Unit;\n        format?: Format;\n        postEditingCategories?: string[];\n        languageId?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface ListOrganizationReportSettingsParams extends PaginationOptions {\n        projectId?: number;\n        groupId?: number;\n    }\n    interface ReportSettings {\n        id: number;\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic: boolean;\n        isGlobal: boolean;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddReportSettingsRequest {\n        name: string;\n        currency: Currency;\n        unit: Unit;\n        config: ReportSettinsConfig;\n        isPublic?: boolean;\n        isGlobal?: boolean;\n    }\n    type UserReportSettings = Omit<ReportSettings, 'isPublic' | 'isGlobal'>;\n    type AddUserReportSettingsRequest = Omit<AddReportSettingsRequest, 'isPublic' | 'isGlobal'>;\n    type OrganizationReportSettings = Omit<ReportSettings, 'isGlobal'> & {\n        projectId: number;\n        groupId: number;\n    };\n    type AddOrganizationReportSettingsRequest = Omit<AddReportSettingsRequest, 'isGlobal'> & {\n        projectId?: number;\n        groupId?: number;\n    };\n    interface ReportSettinsConfig {\n        baseRates: BaseRate;\n        netRateSchemes: NetRateSchemas[];\n        individualRates: IndividualRate[];\n    }\n    type Unit = 'strings' | 'words' | 'chars' | 'chars_with_spaces';\n    type Currency = 'USD' | 'EUR' | 'JPY' | 'GBP' | 'AUD' | 'CAD' | 'CHF' | 'CNY' | 'SEK' | 'NZD' | 'MXN' | 'SGD' | 'HKD' | 'NOK' | 'KRW' | 'TRY' | 'RUB' | 'INR' | 'BRL' | 'ZAR' | 'GEL' | 'UAH';\n    type Format = 'xlsx' | 'csv' | 'json';\n    interface BaseRate {\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface IndividualRate extends BaseRate {\n        languageIds: string[];\n        userIds: number[];\n        fullTranslation: number;\n        proofread: number;\n    }\n    interface NetRateSchemas {\n        tmMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        mtMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        suggestionMatch: {\n            matchType: Mode;\n            price: number;\n        }[];\n        aiMatch?: {\n            matchType: Mode;\n            price: number;\n        }[];\n    }\n    type Mode = 'no_match' | 'tm_match' | 'approval' | '99-95' | '94-90' | '89-80' | 'perfect' | '100';\n    type ContributionMode = 'translations' | 'approvals' | 'votes';\n    type GroupBy = 'user' | 'language';\n    type LabelIncludeType = 'strings_with_label' | 'strings_without_label';\n    type Column = 'userId' | 'languageId' | 'stringId' | 'translationId' | 'fileId' | 'filePath' | 'pluralForm' | 'sourceStringTextHash' | 'mtEngine' | 'mtId' | 'tmName' | 'tmId' | 'aiPromptName' | 'aiPromptId' | 'preTranslated' | 'tmMatch' | 'mtMatch' | 'aiMatch' | 'suggestionMatch' | 'sourceUnits' | 'targetUnits' | 'createdAt' | 'updatedAt' | 'mark';\n    interface SourceContentUpdatesSchema {\n        unit?: Unit;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface MembersSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    interface EditorIssuesSchema {\n        dateFrom?: string;\n        dateTo?: string;\n        format?: Format;\n        languageId?: string;\n        userId?: number;\n    }\n    interface ProjectQaCheckIssuesSchema {\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface SavingActivitySchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface ProjectConsumptionSchema {\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n    interface GroupTaskUsageSchema {\n        format: Format;\n        type: 'workload' | 'create-vs-resolve' | 'performance' | 'time' | 'cost';\n        projectIds?: number[];\n        assigneeId?: number;\n        creatorId?: number;\n        dateFrom?: string;\n        dateTo?: string;\n        wordsCountFrom?: number;\n        wordsCountTo?: number;\n        excludeApprovalsForEditedTranslations?: boolean;\n        currency?: Currency;\n        baseRates?: BaseRate;\n        individualRates?: IndividualRate[];\n        netRateSchemes?: NetRateSchemas;\n    }\n    interface GroupQaCheckIssuesSchema {\n        projectIds?: number[];\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        languageId?: string;\n    }\n    interface GroupTranslationActivitySchema {\n        projectIds?: number[];\n        unit?: Unit;\n        languageId?: string;\n        format?: Format;\n        dateFrom?: string;\n        dateTo?: string;\n        userIds?: number[];\n        fileIds?: number[];\n        directoryIds?: number[];\n        branchIds?: number[];\n        labelIds?: number[];\n        labelIncludeType?: LabelIncludeType;\n    }\n}\n```\n\n##### screenshots/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Screenshots extends CrowdinApi {\n    listScreenshots(projectId: number, options?: ScreenshotsModel.ListScreenshotParams): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    listScreenshots(projectId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Screenshot>>;\n    addScreenshot(projectId: number, request: ScreenshotsModel.CreateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    getScreenshot(projectId: number, screenshotId: number): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    updateScreenshot(projectId: number, screenshotId: number, request: ScreenshotsModel.UpdateScreenshotRequest): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    deleteScreenshot(projectId: number, screenshotId: number): Promise<void>;\n    editScreenshot(projectId: number, screenshotId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n    listScreenshotTags(projectId: number, screenshotId: number, options?: PaginationOptions): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    listScreenshotTags(projectId: number, screenshotId: number, limit?: number, offset?: number): Promise<ResponseList<ScreenshotsModel.Tag>>;\n    replaceTags(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[] | ScreenshotsModel.AutoTagRequest): Promise<void>;\n    addTag(projectId: number, screenshotId: number, request: ScreenshotsModel.ReplaceTagRequest[]): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    clearTags(projectId: number, screenshotId: number): Promise<void>;\n    getTag(projectId: number, screenshotId: number, tagId: number): Promise<ResponseObject<ScreenshotsModel.Tag>>;\n    deleteTag(projectId: number, screenshotId: number, tagId: number): Promise<void>;\n    updateTag(projectId: number, screenshotId: number, tagId: number, request: PatchRequest[]): Promise<ResponseObject<ScreenshotsModel.Screenshot>>;\n}\nexport declare namespace ScreenshotsModel {\n    interface ListScreenshotParams extends PaginationOptions {\n        stringIds?: number[];\n        stringId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Screenshot {\n        id: number;\n        userId: number;\n        url: string;\n        webUrl: string;\n        name: string;\n        size: Size;\n        tagsCount: number;\n        tags: Tag[];\n        labels: number[];\n        labelIds: number[];\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateScreenshotRequest {\n        storageId: number;\n        name: string;\n        autoTag?: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        labelIds?: number[];\n    }\n    interface UpdateScreenshotRequest {\n        storageId: number;\n        name: string;\n    }\n    interface Tag {\n        id: number;\n        screenshotId: number;\n        stringId: number;\n        position: Position;\n        createdAt: string;\n    }\n    interface ReplaceTagRequest {\n        stringId: number;\n        position?: Position;\n    }\n    interface AutoTagRequest {\n        autoTag: boolean;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n    }\n    interface Size {\n        width: number;\n        height: number;\n    }\n    interface Position {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n    }\n}\n```\n\n##### securityLogs/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class SecurityLogs extends CrowdinApi {\n    listOrganizationSecurityLogs(options?: SecurityLogsModel.ListOrganizationSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getOrganizationSecurityLog(securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n    listUserSecurityLogs(userId: number, options?: SecurityLogsModel.ListUserSecurityLogsParams): Promise<ResponseList<SecurityLogsModel.SecurityLog>>;\n    getUserSecurityLog(userId: number, securityLogId: number): Promise<ResponseObject<SecurityLogsModel.SecurityLog>>;\n}\nexport declare namespace SecurityLogsModel {\n    type Event = 'login' | 'password.set' | 'password.change' | 'email.change' | 'login.change' | 'personal_token.issued' | 'personal_token.revoked' | 'mfa.enabled' | 'mfa.disabled' | 'session.revoke' | 'session.revoke_all' | 'sso.connect' | 'sso.disconnect' | 'user.remove' | 'application.connected' | 'application.disconnected' | 'webauthn.created' | 'webauthn.deleted' | 'trusted_device.remove' | 'trusted_device.remove_all' | 'device_verification.enabled' | 'device_verification.disabled';\n    interface ListOrganizationSecurityLogsParams extends PaginationOptions {\n        event?: Event;\n        createdAfter?: string;\n        createdBefore?: string;\n        ipAddress?: string;\n        userId?: number;\n    }\n    type ListUserSecurityLogsParams = Omit<ListOrganizationSecurityLogsParams, 'userId'>;\n    interface SecurityLog {\n        id: number;\n        event: string;\n        info: string;\n        userId: number;\n        location: string;\n        ipAddress: string;\n        deviceName: string;\n        createdAt: string;\n    }\n}\n```\n\n##### sourceFiles/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class SourceFiles extends CrowdinApi {\n    getClonedBranch(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    clonedBranch(projectId: number, branchId: number, request: SourceFilesModel.CloneBranchRequest): Promise<ResponseObject<Status<object>>>;\n    checkBranchClonedStatus(projectId: number, branchId: number, cloneId: string): Promise<ResponseObject<Status<object>>>;\n    listProjectBranches(projectId: number, options?: SourceFilesModel.ListProjectBranchesOptions): Promise<ResponseList<SourceFilesModel.Branch>>;\n    listProjectBranches(projectId: number, name?: string, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.Branch>>;\n    createBranch(projectId: number, request: SourceFilesModel.CreateBranchRequest): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    getBranch(projectId: number, branchId: number): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    deleteBranch(projectId: number, branchId: number): Promise<void>;\n    editBranch(projectId: number, branchId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Branch>>;\n    mergeBranch(projectId: number, branchId: number, request: SourceFilesModel.MergeBranchRequest): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    checkBranchMergeStatus(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<Status<SourceFilesModel.MergeBranchAttributes>>>;\n    getBranchMergeSummary(projectId: number, branchId: number, mergeId: string): Promise<ResponseObject<SourceFilesModel.MergeBranchSummary>>;\n    listProjectDirectories(projectId: number, options?: SourceFilesModel.ListProjectDirectoriesOptions): Promise<ResponseList<SourceFilesModel.Directory>>;\n    listProjectDirectories(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, filter?: string, recursion?: string): Promise<ResponseList<SourceFilesModel.Directory>>;\n    createDirectory(projectId: number, request: SourceFilesModel.CreateDirectoryRequest): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    getDirectory(projectId: number, directoryId: number): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    deleteDirectory(projectId: number, directoryId: number): Promise<void>;\n    editDirectory(projectId: number, directoryId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.Directory>>;\n    listProjectFiles(projectId: number, options?: SourceFilesModel.ListProjectFilesOptions): Promise<ResponseList<SourceFilesModel.File>>;\n    listProjectFiles(projectId: number, branchId?: number, directoryId?: number, limit?: number, offset?: number, recursion?: any, filter?: string): Promise<ResponseList<SourceFilesModel.File>>;\n    createFile(projectId: number, request: SourceFilesModel.CreateFileRequest): Promise<ResponseObject<SourceFilesModel.File>>;\n    getFile(projectId: number, fileId: number): Promise<ResponseObject<SourceFilesModel.File>>;\n    updateOrRestoreFile(projectId: number, fileId: number, request: SourceFilesModel.ReplaceFileFromStorageRequest | SourceFilesModel.RestoreFile): Promise<ResponseObject<SourceFilesModel.File>>;\n    deleteFile(projectId: number, fileId: number): Promise<void>;\n    editFile(projectId: number, fileId: number, request: PatchRequest[]): Promise<ResponseObject<SourceFilesModel.File>>;\n    downloadFilePreview(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    downloadFile(projectId: number, fileId: number): Promise<ResponseObject<DownloadLink>>;\n    listFileRevisions(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    listFileRevisions(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.FileRevision>>;\n    getFileRevision(projectId: number, fileId: number, revisionId: number): Promise<ResponseObject<SourceFilesModel.FileRevision>>;\n    listReviewedSourceFilesBuild(projectId: number, options?: SourceFilesModel.ListReviewedSourceFilesBuildOptions): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    listReviewedSourceFilesBuild(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    buildReviewedSourceFiles(projectId: number, request?: SourceFilesModel.BuildReviewedSourceFilesRequest): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    checkReviewedSourceFilesBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<SourceFilesModel.ReviewedSourceFilesBuild>>;\n    downloadReviewedSourceFiles(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace SourceFilesModel {\n    interface Branch {\n        id: number;\n        projectId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateBranchRequest {\n        name: string;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface CloneBranchRequest {\n        name: string;\n        title?: string;\n    }\n    interface MergeBranchRequest {\n        deleteAfterMerge?: boolean;\n        sourceBranchId: number;\n        dryRun?: boolean;\n    }\n    interface MergeBranchAttributes {\n        sourceBranchId: number;\n        deleteAfterMerge: boolean;\n    }\n    interface MergeBranchSummary {\n        status: string;\n        sourceBranchId: number;\n        targetBranchId: number;\n        dryRun: boolean;\n        details: {\n            added: number;\n            deleted: number;\n            updated: number;\n            conflicted: number;\n        };\n    }\n    type Priority = 'low' | 'normal' | 'high';\n    interface ListProjectDirectoriesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        filter?: string;\n        recursion?: string;\n        orderBy?: string;\n    }\n    interface Directory {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        exportPattern: string;\n        path: string;\n        priority: Priority;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateDirectoryRequest {\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        exportPattern?: string;\n        priority?: Priority;\n    }\n    interface ListProjectFilesOptions extends PaginationOptions {\n        branchId?: number;\n        directoryId?: number;\n        recursion?: any;\n        filter?: string;\n        orderBy?: string;\n    }\n    interface File {\n        id: number;\n        projectId: number;\n        branchId: number;\n        directoryId: number;\n        name: string;\n        title: string;\n        context: string;\n        type: string;\n        path: string;\n        status: string;\n        revisionId: number;\n        priority: Priority;\n        importOptions: ImportOptions;\n        exportOptions: GeneralExportOptions | PropertyExportOptions;\n        excludedTargetLanguages: string[];\n        parserVersion: number;\n        createdAt: string;\n        updatedAt: string;\n        fields: Record<string, any>;\n    }\n    interface CreateFileRequest {\n        storageId: number;\n        name: string;\n        branchId?: number;\n        directoryId?: number;\n        title?: string;\n        context?: string;\n        type?: FileType;\n        parserVersion?: number;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        excludedTargetLanguages?: string[];\n        attachLabelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface ReplaceFileFromStorageRequest {\n        storageId: number;\n        name?: string;\n        updateOption?: UpdateOption;\n        importOptions?: ImportOptions;\n        exportOptions?: ExportOptions;\n        attachLabelIds?: number[];\n        detachLabelIds?: number[];\n        replaceModifiedContext?: boolean;\n    }\n    type ExportOptions = GeneralExportOptions | PropertyExportOptions | JavaScriptExportOptions | MdExportOptions;\n    type ImportOptions = SpreadsheetImportOptions | XmlImportOptions | WebXmlImportOptions | DocxFileImportOptions | HtmlFileImportOptions | HtmlFrontMatterFileImportOptions | MdxFileImportOptions | MdFileImportOptions | StringCatalogFileImportOptions | AdocFileImportOptions | OtherImportOptions;\n    interface RestoreFile {\n        revisionId: number;\n    }\n    interface FileRevision {\n        id: number;\n        projectId: number;\n        fileId: number;\n        restoreToRevision: number;\n        info: FileRevisionInfo;\n        date: string;\n    }\n    interface FileRevisionInfo {\n        added: FileRevisionInfoAttribute;\n        deleted: FileRevisionInfoAttribute;\n        updated: FileRevisionInfoAttribute;\n    }\n    interface FileRevisionInfoAttribute {\n        strings: number;\n        words: number;\n    }\n    type FileType = 'auto' | 'android' | 'macosx' | 'resx' | 'properties' | 'gettext' | 'yaml' | 'php' | 'json' | 'xml' | 'ini' | 'rc' | 'resw' | 'resjson' | 'qtts' | 'joomla' | 'chrome' | 'dtd' | 'dklang' | 'flex' | 'nsh' | 'wxl' | 'xliff' | 'xliff_two' | 'html' | 'haml' | 'txt' | 'csv' | 'md' | 'flsnp' | 'fm_html' | 'fm_md' | 'mediawiki' | 'docx' | 'xlsx' | 'sbv' | 'properties_play' | 'properties_xml' | 'maxthon' | 'go_json' | 'dita' | 'mif' | 'idml' | 'stringsdict' | 'plist' | 'vtt' | 'vdf' | 'srt' | 'stf' | 'toml' | 'contentful_rt' | 'svg' | 'js' | 'coffee' | 'nestjs_i18n' | 'webxml';\n    interface SpreadsheetImportOptions {\n        firstLineContainsHeader?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n        importTranslations?: boolean;\n        scheme?: Scheme;\n    }\n    interface Scheme {\n        none: number;\n        identifier: number;\n        sourcePhrase: number;\n        sourceOrTranslation: number;\n        translation: number;\n        context: number;\n        maxLength: number;\n        labels: number;\n        [key: string]: number;\n    }\n    interface XmlImportOptions {\n        translateContent?: boolean;\n        translateAttributes?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        translatableElements?: string[];\n        srxStorageId?: number;\n    }\n    interface WebXmlImportOptions {\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface DocxFileImportOptions {\n        cleanTagsAggressively?: boolean;\n        translateHiddenText?: boolean;\n        translateHyperlinkUrls?: boolean;\n        translateHiddenRowsAndColumns?: boolean;\n        importNotes?: boolean;\n        importHiddenSlides?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFileImportOptions {\n        excludedElements?: string[];\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface HtmlFrontMatterFileImportOptions extends HtmlFileImportOptions {\n        excludedFrontMatterElements?: string[];\n    }\n    interface MdxFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface MdFileImportOptions {\n        excludedFrontMatterElements?: string[];\n        excludeCodeBlocks?: boolean;\n        inlineTags?: string[];\n        contentSegmentation?: boolean;\n        srxStorageId?: number;\n    }\n    interface StringCatalogFileImportOptions {\n        importKeyAsSource?: boolean;\n    }\n    interface AdocFileImportOptions {\n        excludeIncludeDirectives?: boolean;\n    }\n    interface OtherImportOptions {\n        contentSegmentation: boolean;\n        srxStorageId: number;\n    }\n    interface GeneralExportOptions {\n        exportPattern?: string;\n    }\n    interface PropertyExportOptions {\n        escapeQuotes?: EscapeQuotes;\n        exportPattern?: string;\n        escapeSpecialCharacters?: 0 | 1;\n    }\n    interface JavaScriptExportOptions {\n        exportPattern?: string;\n        exportQuotes?: ExportQuotes;\n    }\n    interface MdExportOptions {\n        exportPattern?: string;\n        strongMarker?: 'asterisk' | 'underscore';\n        emphasisMarker?: 'asterisk' | 'underscore';\n        unorderedListBullet?: 'asterisks' | 'plus' | 'plus';\n        tableColumnWidth?: 'consolidate' | 'evenly_distribute_cells';\n    }\n    enum EscapeQuotes {\n        ZERO = 0,\n        ONE = 1,\n        TWO = 2,\n        THREE = 3\n    }\n    enum ExportQuotes {\n        SINGLE = \"single\",\n        DOUBLE = \"double\"\n    }\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n    interface ReviewedSourceFilesBuild {\n        id: number;\n        projectId: number;\n        status: string;\n        progress: number;\n        attributes: ReviewedSourceFilesBuildAttributes;\n    }\n    interface ReviewedSourceFilesBuildAttributes {\n        branchId: number;\n        targetLanguageId: string;\n    }\n    interface BuildReviewedSourceFilesRequest {\n        branchId?: number;\n    }\n    interface ListProjectBranchesOptions extends PaginationOptions {\n        name?: string;\n        orderBy?: string;\n    }\n    interface ListReviewedSourceFilesBuildOptions extends PaginationOptions {\n        branchId?: number;\n    }\n}\n```\n\n##### sourceStrings/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { SourceFilesModel } from '../sourceFiles';\nexport declare class SourceStrings extends CrowdinApi {\n    uploadStringsStatus(projectId: number, uploadId: string): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    uploadStrings(projectId: number, request: SourceStringsModel.UploadStringsRequest): Promise<ResponseObject<Status<SourceStringsModel.UploadStringsStatus>>>;\n    listProjectStrings(projectId: number, options?: SourceStringsModel.ListProjectStringsOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listProjectStrings(projectId: number, fileId?: number, limit?: number, offset?: number, filter?: string, denormalizePlaceholders?: BooleanInt, labelIds?: string, scope?: SourceStringsModel.Scope, croql?: string, branchId?: number, directoryId?: number): Promise<ResponseList<SourceStringsModel.String>>;\n    addString(projectId: number, request: SourceStringsModel.CreateStringRequest | SourceStringsModel.CreateStringStringsBasedRequest): Promise<ResponseObject<SourceStringsModel.String>>;\n    stringBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<SourceStringsModel.String>>;\n    getString(projectId: number, stringId: number, query?: {\n        denormalizePlaceholders: BooleanInt;\n    }): Promise<ResponseObject<SourceStringsModel.String>>;\n    deleteString(projectId: number, stringId: number): Promise<void>;\n    editString(projectId: number, stringId: number, request: PatchRequest[]): Promise<ResponseObject<SourceStringsModel.String>>;\n}\nexport declare namespace SourceStringsModel {\n    type UploadStringsType = 'auto' | 'android' | 'macosx' | 'arb' | 'csv' | 'json' | 'xliff' | 'xliff_two' | 'xlsx';\n    interface UploadStringsStatus {\n        branchId: number;\n        storageId: number;\n        fileType: UploadStringsType;\n        parserVersion: number;\n        labelIds: number[];\n        importOptions: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateStrings: boolean;\n        cleanupMode: boolean;\n        updateOption: UpdateOption;\n    }\n    interface UploadStringsRequest {\n        branchId: number;\n        storageId: number;\n        type?: UploadStringsType;\n        parserVersion?: number;\n        labelIds?: number[];\n        updateStrings?: boolean;\n        cleanupMode?: boolean;\n        importOptions?: {\n            firstLineContainsHeader: boolean;\n            importTranslations: boolean;\n            scheme: SourceFilesModel.Scheme;\n        };\n        updateOption?: UpdateOption;\n    }\n    interface ListProjectStringsOptions extends PaginationOptions {\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n        labelIds?: string;\n        fileId?: number;\n        branchId?: number;\n        directoryId?: number;\n        taskId?: number;\n        croql?: string;\n        filter?: string;\n        scope?: SourceStringsModel.Scope;\n    }\n    interface String {\n        id: number;\n        projectId: number;\n        branchId: number;\n        identifier: string;\n        text: string | PluralText;\n        type: Type;\n        context: string;\n        maxLength: number;\n        isHidden: boolean;\n        isDuplicate: boolean;\n        masterStringId: boolean;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        labelIds: number[];\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        fileId: number;\n        directoryId: number;\n        revision: number;\n        fields: Record<string, any>;\n    }\n    interface CreateStringRequest {\n        text: string | PluralText;\n        identifier?: string;\n        fileId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface CreateStringStringsBasedRequest {\n        text: string | PluralText;\n        identifier: string;\n        branchId: number;\n        context?: string;\n        isHidden?: boolean;\n        maxLength?: number;\n        labelIds?: number[];\n        fields?: Record<string, any>;\n    }\n    interface PluralText {\n        zero?: string;\n        one?: string;\n        two?: string;\n        few?: string;\n        many?: string;\n        other?: string;\n    }\n    enum Type {\n        TEXT = 0,\n        ASSET = 1,\n        ICU = 2\n    }\n    type Scope = 'identifier' | 'text' | 'context';\n    type UpdateOption = 'clear_translations_and_approvals' | 'keep_translations' | 'keep_translations_and_approvals';\n}\n```\n\n##### stringComments/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringComments extends CrowdinApi {\n    listStringComments(projectId: number, options?: StringCommentsModel.ListStringCommentsOptions): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    listStringComments(projectId: number, stringId?: number, type?: StringCommentsModel.Type, targetLanguageId?: string, issueType?: StringCommentsModel.IssueType, issueStatus?: StringCommentsModel.IssueStatus): Promise<ResponseList<StringCommentsModel.StringComment>>;\n    addStringComment(projectId: number, request: StringCommentsModel.AddStringCommentRequest): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    getStringComment(projectId: number, stringCommentId: number): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    deleteStringComment(projectId: number, stringCommentId: number): Promise<void>;\n    editStringComment(projectId: number, stringCommentId: number, request: PatchRequest[]): Promise<ResponseObject<StringCommentsModel.StringComment>>;\n    stringCommentBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringCommentsModel.StringComment>>;\n}\nexport declare namespace StringCommentsModel {\n    interface ListStringCommentsOptions extends PaginationOptions {\n        stringId?: number;\n        type?: Type;\n        targetLanguageId?: string;\n        issueType?: IssueType;\n        issueStatus?: IssueStatus;\n        orderBy?: string;\n    }\n    interface StringComment {\n        id: number;\n        isShared?: boolean;\n        text: string;\n        userId: number;\n        stringId: number;\n        user: User;\n        string: StringModel;\n        projectId: number;\n        languageId: string;\n        type: Type;\n        issueType: IssueType;\n        issueStatus: IssueStatus;\n        resolverId: number;\n        senderOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolverOrganization: {\n            id: number;\n            domain: string;\n        };\n        resolver: User;\n        resolvedAt: string;\n        createdAt: string;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    interface StringModel {\n        id: number;\n        text: string;\n        type: string;\n        hasPlurals: boolean;\n        isIcu: boolean;\n        context: string;\n        fileId: number;\n    }\n    interface AddStringCommentRequest {\n        stringId: number;\n        text: string;\n        targetLanguageId: string;\n        type: Type;\n        isShared?: boolean;\n        issueType?: IssueType;\n    }\n    type Type = 'comment' | 'issue';\n    type IssueType = 'general_question' | 'translation_mistake' | 'context_request' | 'source_mistake';\n    type IssueStatus = 'unresolved' | 'resolved';\n}\n```\n\n##### stringCorrections/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class StringCorrections extends CrowdinApi {\n    listStringCorrections(projectId: number, options: StringCorrectionsModel.ListStringCorrectionsParams): Promise<ResponseList<StringCorrectionsModel.StringCorrection>>;\n    addStringCorrection(projectId: number, request: StringCorrectionsModel.AddStringCorrectionRequest): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrections(projectId: number, stringId: number): Promise<void>;\n    getStringCorrection(projectId: number, correctionId: number, params?: {\n        denormalizePlaceholders?: BooleanInt;\n    }): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    restoreStringCorrection(projectId: number, correctionId: number): Promise<ResponseObject<StringCorrectionsModel.StringCorrection>>;\n    deleteStringCorrection(projectId: number, correctionId: number): Promise<void>;\n}\nexport declare namespace StringCorrectionsModel {\n    interface ListStringCorrectionsParams extends PaginationOptions {\n        stringId: number;\n        orderBy?: string;\n        denormalizePlaceholders?: BooleanInt;\n    }\n    interface StringCorrection {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: {\n            id: number;\n            username: string;\n            fullName: string;\n            avatarUrl: string;\n        };\n        createdAt: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n    interface AddStringCorrectionRequest {\n        stringId: number;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n    }\n}\n```\n\n##### stringTranslations/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class StringTranslations extends CrowdinApi {\n    listTranslationApprovals(projectId: number, options?: StringTranslationsModel.ListTranslationApprovalsOptions): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    listTranslationApprovals(projectId: number, stringId?: number, languageId?: string, translationId?: number, limit?: number, offset?: number, fileId?: number, labelIds?: string, excludeLabelIds?: string): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    addApproval(projectId: number, request: StringTranslationsModel.AddApprovalRequest): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    removeStringApprovals(projectId: number, stringId: number): Promise<void>;\n    approvalInfo(projectId: number, approvalId: number): Promise<ResponseObject<StringTranslationsModel.Approval>>;\n    approvalBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.Approval>>;\n    removeApproval(projectId: number, approvalId: number): Promise<void>;\n    listLanguageTranslations(projectId: number, languageId: string, options?: StringTranslationsModel.ListLanguageTranslationsOptions): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    listLanguageTranslations(projectId: number, languageId: string, stringIds?: string, fileId?: number, limit?: number, offset?: number, labelIds?: string, denormalizePlaceholders?: BooleanInt, croql?: string): Promise<ResponseList<StringTranslationsModel.PlainLanguageTranslation | StringTranslationsModel.PluralLanguageTranslation | StringTranslationsModel.IcuLanguageTranslation>>;\n    translationAlignment(projectId: number, request: StringTranslationsModel.TranslationAlignmentRequest): Promise<ResponseObject<StringTranslationsModel.TranslationAlignmentResponse>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, options?: StringTranslationsModel.ListStringTranslationsOptions): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    listStringTranslations(projectId: number, stringId: number, languageId: string, limit?: number, offset?: number, denormalizePlaceholders?: BooleanInt): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    addTranslation(projectId: number, request: StringTranslationsModel.AddStringTranslationRequest): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    deleteAllTranslations(projectId: number, stringId: number, languageId?: string): Promise<void>;\n    translationInfo(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    restoreTranslation(projectId: number, translationId: number): Promise<ResponseObject<StringTranslationsModel.StringTranslation>>;\n    translationBatchOperations(projectId: number, request: PatchRequest[]): Promise<ResponseList<StringTranslationsModel.StringTranslation>>;\n    deleteTranslation(projectId: number, translationId: number): Promise<void>;\n    listTranslationVotes(projectId: number, options?: StringTranslationsModel.ListTranslationVotesOptions): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    listTranslationVotes(projectId: number, stringId?: number, languageId?: string, translationId?: number, labelIds?: string, excludeLabelIds?: string, limit?: number, offset?: number): Promise<ResponseList<StringTranslationsModel.Vote>>;\n    addVote(projectId: number, request: StringTranslationsModel.AddVoteRequest): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    voteInfo(projectId: number, voteId: number): Promise<ResponseObject<StringTranslationsModel.Vote>>;\n    cancelVote(projectId: number, voteId: number): Promise<void>;\n}\nexport declare namespace StringTranslationsModel {\n    interface ListTranslationApprovalsOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n        orderBy?: string;\n    }\n    interface Approval {\n        id: number;\n        user: User;\n        translationId: number;\n        stringId: number;\n        languageId: string;\n        createdAt: string;\n    }\n    interface AddApprovalRequest {\n        translationId: number;\n    }\n    interface StringTranslation {\n        id: number;\n        text: string;\n        pluralCategoryName: PluralCategoryName;\n        user: User;\n        rating: number;\n        provider: string;\n        isPreTranslated: boolean;\n        createdAt: string;\n    }\n    interface ListLanguageTranslationsOptions extends PaginationOptions {\n        stringIds?: string;\n        fileId?: number;\n        labelIds?: string;\n        denormalizePlaceholders?: BooleanInt;\n        croql?: string;\n        approvedOnly?: BooleanInt;\n        passedWorkflow?: BooleanInt;\n        orderBy?: string;\n        branchId?: number;\n        minApprovalCount?: number;\n        directoryId?: number;\n    }\n    interface PlainLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface PluralLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        plurals: Plural[];\n    }\n    interface IcuLanguageTranslation {\n        stringId: number;\n        contentType: string;\n        translationId: number;\n        text: string;\n        user: User;\n        createdAt: string;\n    }\n    interface Plural {\n        translationId: number;\n        text: string;\n        pluralForm: string;\n        user: User;\n        createdAt: string;\n    }\n    interface TranslationAlignmentRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        text: string;\n    }\n    interface TranslationAlignmentResponse {\n        words: {\n            text: string;\n            alignments: {\n                sourceWord: string;\n                sourceLemma: string;\n                targetWord: string;\n                targetLemma: string;\n                match: number;\n                probability: number;\n            }[];\n        }[];\n    }\n    interface AddStringTranslationRequest {\n        stringId: number;\n        languageId: string;\n        text: string;\n        pluralCategoryName?: PluralCategoryName;\n        addToTm?: boolean;\n    }\n    interface ListTranslationVotesOptions extends PaginationOptions {\n        stringId?: number;\n        languageId?: string;\n        translationId?: number;\n        fileId?: number;\n        labelIds?: string;\n        excludeLabelIds?: string;\n    }\n    interface Vote {\n        id: number;\n        user: User;\n        translationId: number;\n        votedAt: string;\n        mark: Mark;\n    }\n    interface AddVoteRequest {\n        mark: Mark;\n        translationId: number;\n    }\n    interface User {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n    }\n    type Mark = 'up' | 'down';\n    interface ListStringTranslationsOptions extends PaginationOptions {\n        denormalizePlaceholders?: BooleanInt;\n        orderBy?: string;\n    }\n    type PluralCategoryName = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n}\n```\n\n##### tasks/index.d.ts\n\n```typescript\nimport { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class Tasks extends CrowdinApi {\n    listTasks(projectId: number, options?: TasksModel.ListTasksOptions): Promise<ResponseList<TasksModel.Task>>;\n    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;\n    addTask(projectId: number, request: TasksModel.CreateTaskRequest): Promise<ResponseObject<TasksModel.Task>>;\n    exportTaskStrings(projectId: number, taskId: number): Promise<ResponseObject<DownloadLink>>;\n    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;\n    deleteTask(projectId: number, taskId: number): Promise<void>;\n    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;\n    listTasksComments(projectId: number, taskId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskComment>>;\n    addTaskComment(projectId: number, taskId: number, request: TasksModel.CreateTaskCommentRequest): Promise<ResponseObject<TasksModel.TaskComment>>;\n    getTaskComment(projectId: number, taskId: number, commentId: number): Promise<ResponseObject<TasksModel.TaskComment>>;\n    deleteTaskComment(projectId: number, taskId: number, commentId: number): Promise<void>;\n    editTaskComment(projectId: number, taskId: number, commentId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskComment>>;\n    listUserTasks(options?: TasksModel.ListUserTasksOptions): Promise<ResponseList<TasksModel.UserTask>>;\n    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;\n    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;\n    listTaskSettingsTemplates(projectId: number, options?: PaginationOptions): Promise<ResponseList<TasksModel.TaskSettingsTemplate>>;\n    addTaskSettingsTemplate(projectId: number, request: TasksModel.AddTaskSettingsTemplate): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    getTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n    deleteTaskSettingsTemplate(projectId: number, taskSettingsId: number): Promise<void>;\n    editTaskSettingsTemplate(projectId: number, taskSettingsId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.TaskSettingsTemplate>>;\n}\nexport declare namespace TasksModel {\n    interface Task {\n        id: number;\n        projectId: number;\n        creatorId: number;\n        type: Type | TypeVendor;\n        status: Status;\n        title: string;\n        assignees: Assignee[];\n        assignedTeams: AssignedTeam[];\n        progress: Progress;\n        translateProgress: Progress;\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        description: string;\n        translationUrl: string;\n        webUrl: string;\n        wordsCount: number;\n        commentsCount: number;\n        deadline: string;\n        startedAt: string;\n        resolvedAt: string;\n        timeRange: string;\n        workflowStepId: number;\n        buyUrl: string;\n        createdAt: string;\n        updatedAt: string;\n        sourceLanguage: LanguagesModel.Language;\n        targetLanguages: LanguagesModel.Language[];\n        labelIds: number[];\n        excludeLabelIds: number[];\n        precedingTaskId: number;\n        filesCount: number;\n        fileIds: number[];\n        branchIds: number[];\n        vendor: string;\n        fields: Record<string, any>;\n    }\n    interface ListUserTasksOptions extends PaginationOptions {\n        status?: Status;\n        isArchived?: BooleanInt;\n        orderBy?: string;\n    }\n    interface UserTask extends Task {\n        isArchived: boolean;\n    }\n    type CreateTaskRequest = CreateTaskEnterpriseByBranchIds | CreateTaskEnterpriseByFileIds | CreateTaskEnterpriseByStringIds | CreateTaskEnterpriseVendorByBranchIds | CreateTaskEnterpriseVendorByFileIds | CreateTaskEnterpriseVendorByStringIds | CreateTaskEnterprisePendingTask | CreateTaskByFileIds | CreateTaskByStringIds | CreateTaskByBranchIds | CreateTaskByFileIdsLanguageService | CreateTaskByStringIdsLanguageService | CreateTaskByBranchIdsLanguageService | CreateTaskVendorOhtByFileIds | CreateTaskVendorOhtByStringIds | CreateTaskVendorOhtByBranchIds | CreateTaskVendorGengoByFileIds | CreateTaskVendorGengoByStringIds | CreateTaskVendorGengoByBranchIds | CreateTaskVendorManualByFileIds | CreateTaskVendorManualByStringIds | CreateTaskVendorManualByBranchIds | CreateTaskPendingTask | CreateTaskPendingTaskLanguageService | CreateTaskPendingTaskVendorManual;\n    interface CreateTaskEnterpriseByBranchIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        branchIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    interface CreateTaskEnterpriseByStringIds {\n        type: Type;\n        workflowStepId: number;\n        title: string;\n        languageId: string;\n        stringIds: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        includePreTranslatedStringsOnly?: boolean;\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n        fields?: Record<string, any>;\n    }\n    type CreateTaskEnterpriseVendorByStringIds = Omit<CreateTaskEnterpriseByStringIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseVendorByBranchIds = Omit<CreateTaskEnterpriseByBranchIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    type CreateTaskEnterpriseByFileIds = Omit<CreateTaskEnterpriseByBranchIds, 'branchIds'> & {\n        fileIds: number[];\n    };\n    type CreateTaskEnterpriseVendorByFileIds = Omit<CreateTaskEnterpriseByFileIds, 'type' | 'status' | 'splitContent' | 'assignees' | 'assignedTeams'>;\n    interface CreateTaskEnterprisePendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        assignedTeams?: AssignedTeam[];\n        deadline?: string;\n    }\n    interface CreateTaskByFileIds {\n        title: string;\n        languageId: string;\n        type: Type;\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        splitContent?: boolean;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIds = Omit<CreateTaskByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number;\n    };\n    type CreateTaskByBranchIds = Omit<CreateTaskByFileIds, 'fileIds'> & {\n        branchIds: number;\n    };\n    interface CreateTaskByFileIdsLanguageService {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'crowdin_language_service';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskByStringIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskByBranchIdsLanguageService = Omit<CreateTaskByFileIdsLanguageService, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorOhtByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'oht';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: Expertise;\n        editService?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorOhtByStringIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorOhtByBranchIds = Omit<CreateTaskVendorOhtByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorGengoByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor.TRANSLATE_BY_VENDOR;\n        vendor: 'gengo';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        expertise?: 'standard' | 'pro';\n        tone?: Tone;\n        purpose?: Purpose;\n        customerMessage?: string;\n        usePreferred?: boolean;\n        editService?: boolean;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorGengoByStringIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorGengoByBranchIds = Omit<CreateTaskVendorGengoByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskVendorManualByFileIds {\n        title: string;\n        languageId: string;\n        type: TypeVendor;\n        vendor: 'alconost' | 'babbleon' | 'tomedes' | 'e2f' | 'write_path_admin' | 'inlingo' | 'acclaro' | 'translate_by_humans' | 'lingo24' | 'assertio_language_services' | 'gte_localize' | 'kettu_solutions' | 'languageline_solutions';\n        fileIds: number[];\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n        status?: RequestStatus;\n        description?: string;\n        skipAssignedStrings?: boolean;\n        includePreTranslatedStringsOnly?: boolean;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n        startedAt?: string;\n        dateFrom?: string;\n        dateTo?: string;\n    }\n    type CreateTaskVendorManualByStringIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds' | 'labelIds' | 'excludeLabelIds'> & {\n        stringIds: number[];\n    };\n    type CreateTaskVendorManualByBranchIds = Omit<CreateTaskVendorManualByFileIds, 'fileIds'> & {\n        branchIds: number[];\n    };\n    interface CreateTaskPendingTask {\n        precedingTaskId: number;\n        type: Type.PROOFREAD;\n        title: string;\n        description?: string;\n        assignees?: CreateTaskAssignee[];\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskLanguageService {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: 'crowdin_language_service';\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskPendingTaskVendorManual {\n        precedingTaskId: number;\n        type: TypeVendor.PROOFREAD_BY_VENDOR;\n        vendor: CreateTaskVendorManualByFileIds['vendor'];\n        title: string;\n        description?: string;\n        deadline?: string;\n    }\n    interface CreateTaskAssignee {\n        id: number;\n        wordsCount?: number;\n    }\n    type Status = 'todo' | 'in_progress' | 'done' | 'closed';\n    type RequestStatus = Extract<Status, 'todo' | 'in_progress'>;\n    enum Type {\n        TRANSLATE = 0,\n        PROOFREAD = 1\n    }\n    enum TypeVendor {\n        TRANSLATE_BY_VENDOR = 2,\n        PROOFREAD_BY_VENDOR = 3\n    }\n    interface Assignee {\n        id: number;\n        username: string;\n        fullName: string;\n        avatarUrl: string;\n        wordsCount: number;\n        wordsLeft: number;\n    }\n    interface AssignedTeam {\n        id: number;\n        wordsCount: number;\n    }\n    interface Progress {\n        total: number;\n        done: number;\n        percent: number;\n    }\n    type Expertise = 'standard' | 'mobile-applications' | 'software-it' | 'gaming-video-games' | 'technical-engineering' | 'marketing-consumer-media' | 'business-finance' | 'legal-certificate' | 'medical' | 'ad-words-banners' | 'automotive-aerospace' | 'scientific' | 'scientific-academic' | 'tourism' | 'training-employee-handbooks' | 'forex-crypto';\n    enum TranslatedExpertise {\n        ECONOMY = \"P\",\n        PROFESSIONAL = \"T\",\n        PREMIUM = \"R\"\n    }\n    type Tone = '' | 'Informal' | 'Friendly' | 'Business' | 'Formal' | 'other';\n    type Purpose = 'standard' | 'Personal use' | 'Business' | 'Online content' | 'App/Web localization' | 'Media content' | 'Semi-technical' | 'other';\n    type Subject = 'general' | 'accounting_finance' | 'aerospace_defence' | 'architecture' | 'art' | 'automotive' | 'certificates_diplomas_licences_cv_etc' | 'chemical' | 'civil_engineering_construction' | 'corporate_social_responsibility' | 'cosmetics' | 'culinary' | 'electronics_electrical_engineering' | 'energy_power_generation_oil_gas' | 'environment' | 'fashion' | 'games_viseogames_casino' | 'general_business_commerce' | 'history_archaeology' | 'information_technology' | 'insurance' | 'internet_e-commerce' | 'legal_documents_contracts' | 'literary_translations' | 'marketing_advertising_material_public_relations' | 'matematics_and_physics' | 'mechanical_manufacturing' | 'media_journalism_publishing' | 'medical_pharmaceutical' | 'music' | 'private_correspondence_letters' | 'religion' | 'science' | 'shipping_sailing_maritime' | 'social_science' | 'telecommunications' | 'travel_tourism';\n    interface ListTasksOptions extends PaginationOptions {\n        status?: TasksModel.Status;\n        assigneeId?: number;\n        orderBy?: string;\n    }\n    interface TaskSettingsTemplate {\n        id: number;\n        name: string;\n        config: TaskSettingsTemplateConfig;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTaskSettingsTemplate {\n        name: string;\n        config: TaskSettingsTemplateConfig;\n    }\n    interface TaskSettingsTemplateConfig {\n        languages: {\n            languageId?: string;\n            userIds?: number[];\n            teamIds?: number[];\n        }[];\n    }\n    interface TaskComment {\n        id: number;\n        userId: number;\n        taskId: number;\n        text: string;\n        timeSpent: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface CreateTaskCommentRequest {\n        text?: string;\n        timeSpent?: number;\n    }\n}\n```\n\n##### teams/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Teams extends CrowdinApi {\n    listTeamProjectPermissions(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    editTeamProjectPermissions(teamId: number, request: PatchRequest[]): Promise<ResponseList<TeamsModel.ProjectPermissions>>;\n    addTeamToProject(projectId: number, request: TeamsModel.AddTeamToProjectRequest): Promise<TeamsModel.ProjectTeamResources>;\n    listTeams(options?: TeamsModel.ListTeamsOptions): Promise<ResponseList<TeamsModel.Team>>;\n    listTeams(limit?: number, offset?: number): Promise<ResponseList<TeamsModel.Team>>;\n    addTeam(request: TeamsModel.AddTeamRequest): Promise<ResponseObject<TeamsModel.Team>>;\n    getTeam(teamId: number): Promise<ResponseObject<TeamsModel.Team>>;\n    deleteTeam(teamId: number): Promise<void>;\n    editTeam(teamId: number, request: PatchRequest[]): Promise<ResponseObject<TeamsModel.Team>>;\n    teamMembersList(teamId: number, options?: PaginationOptions): Promise<ResponseList<TeamsModel.TeamMember>>;\n    teamMembersList(teamId: number, limit?: number, offset?: number): Promise<ResponseList<TeamsModel.TeamMember>>;\n    addTeamMembers(teamId: number, request: TeamsModel.AddTeamMembersRequest): Promise<TeamsModel.AddTeamMembersResponse>;\n    deleteAllTeamMembers(teamId: number): Promise<void>;\n    deleteTeamMember(teamId: number, memberId: number): Promise<void>;\n}\nexport declare namespace TeamsModel {\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface AddTeamToProjectRequest {\n        teamId: number;\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ListTeamsOptions extends PaginationOptions {\n        search?: string;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        orderBy?: string;\n    }\n    interface ProjectTeamResources {\n        skipped: ProjectTeamResource;\n        added: ProjectTeamResource;\n    }\n    interface ProjectTeamResource {\n        id: number;\n        hasManagerAccess: boolean;\n        hasDeveloperAccess: boolean;\n        hasAccessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        roles: ProjectRole[];\n    }\n    interface Permissions {\n        [lang: string]: {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n    interface Team {\n        id: number;\n        name: string;\n        totalMembers: number;\n        webUrl: string;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTeamRequest {\n        name: string;\n    }\n    interface TeamMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        avatarUrl: string;\n        addedAt: string;\n    }\n    interface AddTeamMembersRequest {\n        userIds: number[];\n    }\n    interface AddTeamMembersResponse {\n        skipped: ResponseObject<TeamMember>[];\n        added: ResponseObject<TeamMember>[];\n        pagination: Pagination;\n    }\n}\n```\n\n##### translationMemory/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nexport declare class TranslationMemory extends CrowdinApi {\n    listTm(options?: TranslationMemoryModel.ListTMsOptions): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    listTm(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationMemoryModel.TranslationMemory>>;\n    addTm(request: TranslationMemoryModel.AddTranslationMemoryRequest): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    getTm(tmId: number): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    deleteTm(tmId: number): Promise<void>;\n    editTm(tmId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TranslationMemory>>;\n    listTmSegments(tmId: number, options?: TranslationMemoryModel.ListSegmentsOptions): Promise<ResponseList<TranslationMemoryModel.TMSegment>>;\n    addTmSegment(tmId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    clearTm(tmId: number): Promise<void>;\n    exportTm(tmId: number, request?: TranslationMemoryModel.ExportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    checkExportStatus(tmId: number, exportId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ExportTranslationMemoryAttribute>>>;\n    downloadTm(tmId: number, exportId: string): Promise<ResponseObject<DownloadLink>>;\n    concordanceSearch(projectId: number, request: TranslationMemoryModel.ConcordanceSearchRequest): Promise<ResponseList<TranslationMemoryModel.ConcordanceSearchResponse>>;\n    importTm(tmId: number, request: TranslationMemoryModel.ImportTranslationMemoryRequest): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    checkImportStatus(tmId: number, importId: string): Promise<ResponseObject<Status<TranslationMemoryModel.ImportTranslationMemoryAttribute>>>;\n    getTmSegment(tmId: number, segmentId: number): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegment(tmId: number, segmentId: number): Promise<void>;\n    editTmSegment(tmId: number, segmentId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    deleteTmSegmentRecord(tmId: number, segmentId: number, recordId: number): Promise<void>;\n    editTmSegmentRecord(tmId: number, segmentId: number, recordId: number, request: PatchRequest[]): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n    addTmSegmentRecords(tmId: number, segmentId: number, request: TranslationMemoryModel.AddTMSegment): Promise<ResponseObject<TranslationMemoryModel.TMSegment>>;\n}\nexport declare namespace TranslationMemoryModel {\n    interface TranslationMemory {\n        id: number;\n        groupId: number;\n        userId: number;\n        name: string;\n        languageId: string;\n        languageIds: string[];\n        segmentsCount: number;\n        defaultProjectIds: number[];\n        projectIds: number[];\n        createdAt: string;\n        webUrl: string;\n    }\n    interface AddTranslationMemoryRequest {\n        name: string;\n        languageId: string;\n        groupId?: number;\n    }\n    interface ConcordanceSearchRequest {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        autoSubstitution: boolean;\n        minRelevant: number;\n        expressions: string[];\n        expression?: string;\n    }\n    interface ConcordanceSearchResponse {\n        tm: TranslationMemory;\n        recordId: number;\n        source: string;\n        target: string;\n        relevant: number;\n        substituted: string;\n        updatedAt: string;\n    }\n    interface ExportTranslationMemoryRequest {\n        sourceLanguageId?: number;\n        targetLanguageId?: number;\n        format?: Format;\n    }\n    interface ImportTranslationMemoryRequest {\n        storageId: number;\n        firstLineContainsHeader?: boolean;\n        scheme?: Scheme;\n    }\n    interface ExportTranslationMemoryAttribute {\n        sourceLanguageId: string;\n        targetLanguageId: string;\n        format: string;\n    }\n    interface ImportTranslationMemoryAttribute {\n        tmId: number;\n        storageId: number;\n        firstLineContainsHeader: number;\n        scheme: Scheme;\n    }\n    type Format = 'tmx' | 'csv' | 'xlsx';\n    interface Scheme {\n        [key: string]: number;\n    }\n    interface ListTMsOptions extends PaginationOptions {\n        groupId?: number;\n        userId?: number;\n        orderBy?: string;\n    }\n    interface ListSegmentsOptions extends PaginationOptions {\n        croql?: string;\n        orderBy?: string;\n    }\n    interface TMSegment {\n        id: number;\n        records: TMSegmentRecord[];\n    }\n    interface TMSegmentRecord {\n        id: number;\n        languageId: string;\n        text: string;\n        usageCount: number;\n        createdBy: number;\n        updatedBy: number;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddTMSegment {\n        records: AddTMSegmentRecord[];\n    }\n    interface AddTMSegmentRecord {\n        languageId: string;\n        text: string;\n    }\n}\n```\n\n##### translationStatus/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nimport { LanguagesModel } from '../languages';\nexport declare class TranslationStatus extends CrowdinApi {\n    getBranchProgress(projectId: number, branchId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getBranchProgress(projectId: number, branchId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getDirectoryProgress(projectId: number, directoryId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getFileProgress(projectId: number, fileId: number, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getLanguageProgress(projectId: number, languageId: string, limit?: number, offset?: number): Promise<ResponseList<TranslationStatusModel.FileProgress>>;\n    getProjectProgress(projectId: number, options?: PaginationOptions): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    getProjectProgress(projectId: number, limit?: number, offset?: number, languageIds?: string): Promise<ResponseList<TranslationStatusModel.LanguageProgress>>;\n    listQaCheckIssues(projectId: number, options?: TranslationStatusModel.ListQaCheckIssuesOptions): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n    listQaCheckIssues(projectId: number, limit?: number, offset?: number, category?: TranslationStatusModel.Category, validation?: TranslationStatusModel.Validation, languageIds?: string): Promise<ResponseList<TranslationStatusModel.QaCheck>>;\n}\nexport declare namespace TranslationStatusModel {\n    interface LanguageProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        eTag: string;\n        languageId: string;\n        language: LanguagesModel.Language;\n    }\n    interface FileProgress {\n        words: Words;\n        phrases: Words;\n        translationProgress: number;\n        approvalProgress: number;\n        branchId: number;\n        fileId: number;\n        eTag: string;\n    }\n    interface Words {\n        total: number;\n        translated: number;\n        approved: number;\n        preTranslateAppliedTo: number;\n    }\n    type Category = 'empty' | 'variables' | 'tags' | 'punctuation' | 'symbol_register' | 'spaces' | 'size' | 'special_symbols' | 'wrong_translation' | 'spellcheck' | 'icu';\n    type Validation = 'empty_string_check' | 'empty_suggestion_check' | 'max_length_check' | 'tags_check' | 'mismatch_ids_check' | 'cdata_check' | 'specials_symbols_check' | 'leading_newlines_check' | 'trailing_newlines_check' | 'leading_spaces_check' | 'trailing_spaces_check' | 'multiple_spaces_check' | 'custom_blocked_variables_check' | 'highest_priority_custom_variables_check' | 'highest_priority_variables_check' | 'c_variables_check' | 'python_variables_check' | 'rails_variables_check' | 'java_variables_check' | 'dot_net_variables_check' | 'twig_variables_check' | 'php_variables_check' | 'freemarker_variables_check' | 'lowest_priority_variable_check' | 'lowest_priority_custom_variables_check' | 'punctuation_check' | 'spaces_before_punctuation_check' | 'spaces_after_punctuation_check' | 'non_breaking_spaces_check' | 'capitalize_check' | 'multiple_uppercase_check' | 'parentheses_check' | 'entities_check' | 'escaped_quotes_check' | 'wrong_translation_issue_check' | 'spellcheck' | 'icu_check';\n    interface ListQaCheckIssuesOptions extends PaginationOptions {\n        category?: Category | Category[];\n        validation?: Validation | Validation[];\n        languageIds?: string;\n    }\n    interface QaCheck {\n        stringId: number;\n        languageId: string;\n        category: Category;\n        categoryDescription: string;\n        validation: Validation;\n        validationDescription: string;\n        pluralId: number;\n        text: string;\n    }\n    interface GetProjectProgressOptions extends PaginationOptions {\n        languageIds?: string;\n    }\n}\n```\n\n##### translations/index.d.ts\n\n```typescript\nimport { CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject, Status } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nexport declare class Translations extends CrowdinApi {\n    listPreTranslations(projectId: number, options?: PaginationOptions): Promise<ResponseList<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    preTranslationStatus(projectId: number, preTranslationId: string): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    applyPreTranslation(projectId: number, request: TranslationsModel.PreTranslateRequest | TranslationsModel.PreTranslateStringsRequest): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    editPreTranslation(projectId: number, preTranslationId: string, request: PatchRequest[]): Promise<ResponseObject<Status<TranslationsModel.PreTranslationStatusAttributes>>>;\n    getPreTranslationReport(projectId: number, preTranslationId: string): Promise<ResponseObject<TranslationsModel.PreTranslationReport>>;\n    buildProjectDirectoryTranslation(projectId: number, directoryId: number, request?: TranslationsModel.BuildProjectDirectoryTranslationRequest): Promise<ResponseObject<TranslationsModel.BuildProjectDirectoryTranslationResponse>>;\n    buildProjectFileTranslation(projectId: number, fileId: number, request: TranslationsModel.BuildProjectFileTranslationRequest, eTag?: string): Promise<ResponseObject<TranslationsModel.BuildProjectFileTranslationResponse>>;\n    listProjectBuilds(projectId: number, options?: TranslationsModel.ListProjectBuildsOptions): Promise<ResponseList<TranslationsModel.Build>>;\n    listProjectBuilds(projectId: number, branchId?: number, limit?: number, offset?: number): Promise<ResponseList<TranslationsModel.Build>>;\n    buildProject(projectId: number, request?: TranslationsModel.BuildRequest | TranslationsModel.PseudoBuildRequest): Promise<ResponseObject<TranslationsModel.Build>>;\n    uploadTranslation(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationResponse>>;\n    uploadTranslationStrings(projectId: number, languageId: string, request: TranslationsModel.UploadTranslationStringsRequest): Promise<ResponseObject<TranslationsModel.UploadTranslationStringsResponse>>;\n    downloadTranslations(projectId: number, buildId: number): Promise<ResponseObject<DownloadLink>>;\n    checkBuildStatus(projectId: number, buildId: number): Promise<ResponseObject<TranslationsModel.Build>>;\n    cancelBuild(projectId: number, buildId: number): Promise<void>;\n    exportProjectTranslation(projectId: number, request: TranslationsModel.ExportProjectTranslationRequest): Promise<ResponseObject<DownloadLink>>;\n}\nexport declare namespace TranslationsModel {\n    interface PreTranslateRequest {\n        languageIds: string[];\n        fileIds: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId?: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface PreTranslateStringsRequest {\n        languageIds: string[];\n        branchIds?: number[];\n        method?: Method;\n        engineId?: number;\n        aiPromptId?: number;\n        autoApproveOption?: AutoApproveOption;\n        duplicateTranslations?: boolean;\n        skipApprovedTranslations?: boolean;\n        translateUntranslatedOnly?: boolean;\n        translateWithPerfectMatchOnly?: boolean;\n        fallbackLanguages?: {\n            languageId: string[];\n        };\n        labelIds?: number[];\n        excludeLabelIds?: number[];\n    }\n    interface BuildProjectDirectoryTranslationRequest {\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        preserveFolderHierarchy?: boolean;\n        exportStringsThatPassedWorkflow?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportApprovedOnly?: boolean;\n    }\n    interface BuildProjectDirectoryTranslationResponse {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    type BuildStatus = 'created' | 'inProgress' | 'canceled' | 'failed' | 'finished';\n    interface BuildProjectFileTranslationRequest {\n        targetLanguageId: string;\n        exportAsXliff?: boolean;\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface BuildProjectFileTranslationResponse extends DownloadLink {\n        etag: string;\n    }\n    interface PreTranslationStatusAttributes {\n        languageIds: string[];\n        fileIds: number[];\n        branchIds: number[];\n        method: Method;\n        autoApproveOption: AutoApproveOption;\n        duplicateTranslations: boolean;\n        skipApprovedTranslations: boolean;\n        translateUntranslatedOnly: boolean;\n        translateWithPerfectMatchOnly: boolean;\n    }\n    type Method = 'tm' | 'mt' | 'ai';\n    type AutoApproveOption = 'all' | 'exceptAutoSubstituted' | 'perfectMatchOnly' | 'none';\n    type CharTransformation = 'asian' | 'european' | 'arabic' | 'cyrillic';\n    interface Build {\n        id: number;\n        projectId: number;\n        status: BuildStatus;\n        progress: number;\n        attributes: Attribute;\n        createdAt: string;\n        updatedAt: string;\n        finishedAt: string;\n    }\n    interface Attribute {\n        branchId: number;\n        directoryId: number;\n        targetLanguageIds: string[];\n        skipUntranslatedStrings: boolean;\n        skipUntranslatedFiles: boolean;\n        exportApprovedOnly: boolean;\n        exportWithMinApprovalsCount: number;\n        exportStringsThatPassedWorkflow: boolean;\n    }\n    interface BuildRequest {\n        branchId?: number;\n        targetLanguageIds?: string[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface PseudoBuildRequest {\n        pseudo: boolean;\n        branchId?: number;\n        prefix?: string;\n        suffix?: string;\n        lengthTransformation?: number;\n        charTransformation?: CharTransformation;\n    }\n    interface UploadTranslationRequest {\n        storageId: number;\n        fileId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationStringsRequest {\n        storageId: number;\n        branchId?: number;\n        importEqSuggestions?: boolean;\n        autoApproveImported?: boolean;\n        translateHidden?: boolean;\n        addToTm?: boolean;\n    }\n    interface UploadTranslationResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        fileId: number;\n    }\n    interface UploadTranslationStringsResponse {\n        projectId: number;\n        storageId: number;\n        languageId: string;\n        branchId: number;\n    }\n    interface ExportProjectTranslationRequest {\n        targetLanguageId: string;\n        format?: string;\n        labelIds?: number[];\n        branchIds?: number[];\n        directoryIds?: number[];\n        fileIds?: number[];\n        skipUntranslatedStrings?: boolean;\n        skipUntranslatedFiles?: boolean;\n        exportApprovedOnly?: boolean;\n        exportWithMinApprovalsCount?: number;\n        exportStringsThatPassedWorkflow?: boolean;\n    }\n    interface ListProjectBuildsOptions extends PaginationOptions {\n        branchId?: number;\n    }\n    interface PreTranslationReport {\n        languages: TargetLanguage[];\n        preTranslateType: Method;\n    }\n    interface TargetLanguage {\n        id: string;\n        files: TargetLanguageFile[];\n        skipped: SkippedInfo;\n        skippedQaCheckCategories: ProjectsGroupsModel.CheckCategories;\n    }\n    interface TargetLanguageFile {\n        id: string;\n        statistics: TargetLanguageFileStatistics;\n    }\n    interface TargetLanguageFileStatistics {\n        phrases: number;\n        words: number;\n    }\n    interface SkippedInfo {\n        [key: string]: any;\n    }\n}\n```\n\n##### uploadStorage/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nexport declare class UploadStorage extends CrowdinApi {\n    listStorages(options?: PaginationOptions): Promise<ResponseList<UploadStorageModel.Storage>>;\n    listStorages(limit?: number, offset?: number): Promise<ResponseList<UploadStorageModel.Storage>>;\n    addStorage(fileName: string, request: any, contentType?: string): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    getStorage(storageId: number): Promise<ResponseObject<UploadStorageModel.Storage>>;\n    deleteStorage(storageId: number): Promise<void>;\n}\nexport declare namespace UploadStorageModel {\n    interface Storage {\n        id: number;\n        fileName: string;\n    }\n}\n```\n\n##### users/index.d.ts\n\n```typescript\nimport { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ProjectRole, ProjectRoles, ResponseList, ResponseObject } from '../core';\nimport { ProjectsGroupsModel } from '../projectsGroups';\nimport { TeamsModel } from '../teams';\nexport declare class Users extends CrowdinApi {\n    listProjectMembers(projectId: number, options?: UsersModel.ListProjectMembersOptions): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    listProjectMembers(projectId: number, search?: string, role?: UsersModel.Role, languageId?: string, limit?: number, offset?: number): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    addProjectMember(projectId: number, request: UsersModel.AddProjectMemberRequest): Promise<UsersModel.AddProjectMemberResponse>;\n    getProjectMemberPermissions(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    replaceProjectMemberPermissions(projectId: number, memberId: number, request?: UsersModel.ReplaceProjectMemberRequest): Promise<ResponseObject<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;\n    deleteMemberFromProject(projectId: number, memberId: number): Promise<void>;\n    listUsers(options?: UsersModel.ListUsersOptions): Promise<ResponseList<UsersModel.User>>;\n    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;\n    inviteUser(request: UsersModel.InviteUserRequest): Promise<ResponseObject<UsersModel.User>>;\n    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;\n    deleteUser(userId: number): Promise<void>;\n    editUser(userId: number, request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;\n    editAuthenticatedUser(request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;\n    listUserProjectPermissions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    editUserProjectPermissions(userId: number, request: PatchRequest[]): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n    listUserProjectContributions(userId: number, options?: PaginationOptions): Promise<ResponseList<UsersModel.ProjectPermissions>>;\n}\nexport declare namespace UsersModel {\n    interface ListProjectMembersOptions extends PaginationOptions {\n        search?: string;\n        role?: Role;\n        languageId?: string;\n        workflowStepId?: number;\n        orderBy?: string;\n    }\n    interface ListUsersOptions extends PaginationOptions {\n        status?: Status;\n        search?: string;\n        twoFactor?: TwoFactor;\n        orderBy?: string;\n        organizationRoles?: OrganizationRoles[];\n        teamId?: number;\n        projectIds?: string;\n        projectRoles?: ProjectRoles[];\n        languageIds?: string;\n        groupIds?: string;\n        lastSeenFrom?: string;\n        lastSeenTo?: string;\n    }\n    interface InviteUserRequest {\n        email: string;\n        firstName?: string;\n        lastName?: string;\n        timezone?: string;\n        adminAccess?: boolean;\n    }\n    interface User {\n        id: number;\n        username: string;\n        email: string;\n        firstName: string;\n        lastName: string;\n        status: Status;\n        avatarUrl: string;\n        fields: Record<string, any>;\n        createdAt: string;\n        lastSeen: string;\n        twoFactor: TwoFactor;\n        isAdmin: boolean;\n        timezone: string;\n        emailVerified: string;\n    }\n    type Status = 'active' | 'pending' | 'blocked';\n    type TwoFactor = 'enabled' | 'disabled';\n    type OrganizationRoles = 'admin' | 'manager' | 'vendor' | 'client';\n    interface ProjectMember {\n        id: number;\n        username: string;\n        fullName: string;\n        role: Role;\n        permissions: Permissions;\n        avatarUrl: string;\n        joinedAt: string;\n        timezone: string;\n        roles: ProjectRole[];\n    }\n    interface EnterpriseProjectMember {\n        id: number;\n        username: string;\n        firstName: string;\n        lastName: string;\n        isManager: boolean;\n        isDeveloperr: boolean;\n        managerOfGroup: Group;\n        accessToAllWorkflowSteps: boolean;\n        permissions: Permissions;\n        givenAccessAt: string;\n        roles: ProjectRole[];\n    }\n    interface Group {\n        id: number;\n        name: string;\n    }\n    type Role = 'all' | 'owner' | 'manager' | 'proofreader' | 'translator' | 'blocked';\n    type LanguageRole = 'proofreader' | 'translator' | 'denied';\n    interface AddProjectMemberRequest {\n        userIds?: number[];\n        usernames?: string[];\n        emails?: string[];\n        managerAccess?: boolean;\n        roles?: ProjectRole[];\n        developerAccess?: boolean;\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface AddProjectMemberResponse {\n        skipped: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        added: ResponseObject<ProjectMember | EnterpriseProjectMember>[];\n        pagination: Pagination;\n    }\n    interface ReplaceProjectMemberRequest {\n        managerAccess?: boolean;\n        developerAccess?: boolean;\n        roles?: ProjectRole[];\n        accessToAllWorkflowSteps?: boolean;\n        permissions?: Permissions;\n    }\n    interface ProjectPermissions {\n        id: number;\n        roles: ProjectRole[];\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n        teams: TeamsModel.Team[];\n    }\n    interface Contributions {\n        id: number;\n        translated: Contribution;\n        approved: Contribution;\n        voted: Contribution;\n        commented: Contribution;\n        project: ProjectsGroupsModel.Project | ProjectsGroupsModel.ProjectSettings;\n    }\n    interface Contribution {\n        strings: number;\n        words?: number;\n    }\n    interface Permissions {\n        [lang: string]: string | {\n            workflowStepIds: number[] | 'all';\n        };\n    }\n}\n```\n\n##### vendors/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList } from '../core';\nexport declare class Vendors extends CrowdinApi {\n    listVendors(options?: PaginationOptions): Promise<ResponseList<VendorsModel.Vendor>>;\n    listVendors(limit?: number, offset?: number): Promise<ResponseList<VendorsModel.Vendor>>;\n}\nexport declare namespace VendorsModel {\n    interface Vendor {\n        id: number;\n        name: string;\n        description: string;\n        status: 'pending' | 'confirmed' | 'rejected';\n        webUrl: string;\n    }\n}\n```\n\n##### webhooks/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';\nexport declare class Webhooks extends CrowdinApi {\n    listWebhooks(projectId: number, options?: PaginationOptions): Promise<ResponseList<WebhooksModel.Webhook>>;\n    listWebhooks(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WebhooksModel.Webhook>>;\n    addWebhook(projectId: number, request: WebhooksModel.AddWebhookRequest): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    getWebhook(projectId: number, webhookId: number): Promise<ResponseObject<WebhooksModel.Webhook>>;\n    deleteWebhook(projectId: number, webhookId: number): Promise<void>;\n    editWebhook(projectId: number, webhookId: number, request: PatchRequest[]): Promise<ResponseObject<WebhooksModel.Webhook>>;\n}\nexport declare namespace WebhooksModel {\n    interface Webhook {\n        id: number;\n        projectId: number;\n        name: string;\n        url: string;\n        events: Event[];\n        headers: Record<string, string>;\n        payload: Record<string, any>;\n        isActive: boolean;\n        batchingEnabled: boolean;\n        requestType: RequestType;\n        contentType: ContentType;\n        createdAt: string;\n        updatedAt: string;\n    }\n    interface AddWebhookRequest {\n        name: string;\n        url: string;\n        events: Event[];\n        requestType: RequestType;\n        isActive?: boolean;\n        batchingEnabled?: boolean;\n        contentType?: ContentType;\n        headers?: Record<string, string>;\n        payload?: Record<string, any>;\n    }\n    type ContentType = 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded';\n    type Event = 'file.added' | 'file.updated' | 'file.reverted' | 'file.deleted' | 'file.translated' | 'file.approved' | 'project.translated' | 'project.approved' | 'project.built' | 'translation.updated' | 'string.added' | 'string.updated' | 'string.deleted' | 'stringComment.created' | 'stringComment.updated' | 'stringComment.deleted' | 'stringComment.restored' | 'suggestion.added' | 'suggestion.updated' | 'suggestion.deleted' | 'suggestion.approved' | 'suggestion.disapproved' | 'task.added' | 'task.statusChanged' | 'task.deleted';\n    type RequestType = 'POST' | 'GET';\n}\n```\n\n##### workflows/index.d.ts\n\n```typescript\nimport { CrowdinApi, PaginationOptions, ResponseList, ResponseObject } from '../core';\nimport { SourceStringsModel } from '../sourceStrings';\nexport declare class Workflows extends CrowdinApi {\n    listWorkflowSteps(projectId: number, options?: PaginationOptions): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    listWorkflowSteps(projectId: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.WorkflowStep>>;\n    getWorkflowStep(projectId: number, stepId: number): Promise<ResponseObject<WorkflowModel.WorkflowStep>>;\n    listStringsOnTheWorkflowStep(projectId: number, stepId: number, options?: WorkflowModel.ListStringsOntheWorkflowStepOptions): Promise<ResponseList<SourceStringsModel.String>>;\n    listWorkflowTemplates(options?: WorkflowModel.ListWorkflowTemplatesOptions): Promise<ResponseList<WorkflowModel.Workflow>>;\n    listWorkflowTemplates(groupId?: number, limit?: number, offset?: number): Promise<ResponseList<WorkflowModel.Workflow>>;\n    getWorkflowTemplateInfo(templateId: number): Promise<ResponseObject<WorkflowModel.Workflow>>;\n}\nexport declare namespace WorkflowModel {\n    interface WorkflowStep {\n        id: number;\n        title: string;\n        type: string;\n        languages: string[];\n        config: {\n            assignees: {\n                [language: string]: number[];\n            };\n        };\n    }\n    interface ListWorkflowTemplatesOptions extends PaginationOptions {\n        groupId?: number;\n    }\n    interface ListStringsOntheWorkflowStepOptions extends PaginationOptions {\n        languageIds?: string;\n        orderBy?: string;\n        status?: 'todo' | 'done' | 'pending' | 'incomplete' | 'need_review';\n    }\n    interface Workflow {\n        id: number;\n        title: string;\n        description: string;\n        groupId: number;\n        isDefault: boolean;\n        webUrl: string;\n        steps: {\n            id: number;\n            languages: string[];\n            assignees: number[];\n            vendorId: number;\n            config: {\n                minRelevant: number;\n                autoSubstitution: boolean;\n            };\n            mtId: number;\n        }[];\n    }\n}\n```\n\n<!-- CROWDIN_API_CLIENT_TYPES_END -->\n\n## Frontend Development\n\n### Crowdin Apps JS API\n\n#### Official Documentation\n\nThe `AP` object provides the Crowdin Apps JS API for interacting with the Crowdin application context.\n\n**📚 Complete API Reference:** https://support.crowdin.com/developer/crowdin-apps-js/\n\n**⚠️ CRITICAL**: Only use methods and types from the Crowdin Apps JS API definitions below.\n\n**Do NOT invent methods or properties that are not listed here.**\n\n#### Common Examples\n\n**Get Context:**\n```javascript\n// Get application context\nAP.getContext(function(context) {\n    console.log('Project ID:', context.project_id);\n});\n```\n\n#### Best Practices\n\n1. **Always check AP availability**\n   ```javascript\n   if (window.AP) {\n       AP.getContext(function(context) {\n           // Your code\n       });\n   }\n   ```\n\n2. **Get JWT token for backend calls**\n   ```javascript\n   AP.getJwtToken(function(token) {\n       fetch('/api/endpoint?jwt=' + token)\n           .then(response => response.json());\n   });\n   ```\n\n3. **Handle errors gracefully**\n   ```javascript\n   try {\n       AP.getContext(function(context) {\n           if (!context.organization_id) {\n               console.error('Organization ID not found');\n           }\n       });\n   } catch (error) {\n       console.error('Failed to get context:', error);\n   }\n   ```\n\n#### Complete Type Definitions\n\n##### Global AP Object Structure\n\n```typescript\ndeclare namespace AP {\n    // Global Actions\n    function getContext(callback: (context: Context) => void): void;\n    function getJwtToken(callback: (token: string) => void): void;\n    function getTheme(): 'light' | 'dark';\n    function redirect(path: string): void;\n}\n```\n\n##### Type Definitions\n\n```typescript\n// Context Information\ninterface Context {\n    project_id: number;\n    organization_id: number;\n}\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-project-tools`\n\n### 2. Key Files to Modify\n\n- `worker/app.ts` - Add new API endpoints here\n- `public/tools/index.html` - Modify UI structure\n- `public/tools/app.js` - Add frontend logic\n- `public/tools/styles.css` - Customize styles"
    }
  }
]