[
  {
    "name": "crowdin-editor-right-panel",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Editor Right Panel module.\n\nUse when:\n- Building translation assistance tools\n- Creating context-aware editor extensions\n- Developing quality assurance tools\n- Building translation validation and suggestion tools\n- Creating custom translation workflows\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building project management tools (use Project Tools instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Crowdin Editor API (window.AP.editor) for translation interactions\n- Express.js server (minimal - mostly frontend-focused)\n- Editor Right Panel module\n- HTML/CSS/JavaScript interface",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Editor Right Panel module for translation editor extensions.\n- Backend: Express.js with Crowdin Apps SDK (minimal - most functionality is frontend)\n- Frontend: HTML/CSS/JavaScript with Crowdin Editor API integration\n- Module: Editor Right Panel (appears in translation editor sidebar)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for app structure\n- **Crowdin Editor API** (`window.AP.editor`) for translation interactions\n- **HTML/CSS/JavaScript** for panel interface\n- **Express.js** for serving static files and optional API endpoints\n\n## Development Approach\n**Most editor right panel apps are frontend-focused** and use the Crowdin Editor API directly. The backend is typically minimal, serving static files and handling app installation.\n\n## Project Structure\n\n### Backend Structure (Minimal)\n- `index.js` - Main application with Editor Right Panel configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main panel interface\n- `data/` - Metadata storage directory (if needed)\n\n### Frontend Structure (Primary Focus)\n- `public/index.html` - Editor panel interface with Crowdin Editor API integration\n- JavaScript for editor interactions and custom functionality\n\n## Editor Right Panel Configuration\n\n```javascript\neditorRightPanel: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public',\n  modes: ['translate'], // Editor modes where panel appears\n  environments: 'crowdin' // or 'enterprise' or 'crowdin,enterprise'\n}\n```\n\n### Available Editor Modes\n- `translate` - Translation mode (most common)\n- `proofread` - Proofreading mode\n- `review` - Review mode\n\n## Crowdin Editor API\n\nThe primary way to interact with translations is through the Crowdin Editor API:\n\n### Include the API Script\n```html\n<script src=\"https://cdn.crowdin.com/apps/dist/iframe.js\"></script>\n```\n\n### Core Editor Methods\n```javascript\n// Insert text at cursor position\nwindow.AP.editor.insertTranslation(text)\n\n// Append text to current translation\nwindow.AP.editor.appendTranslation(text)\n\n// Replace entire translation\nwindow.AP.editor.setTranslation(text)\n\n// Get current translation\nconst translation = window.AP.editor.getTranslation()\n\n// Get source string\nconst sourceString = window.AP.editor.getSourceString()\n```\n\n### Example Usage\n```javascript\nfunction insertText(text) {\n  if (window.AP && window.AP.editor) {\n    window.AP.editor.appendTranslation(text);\n  } else {\n    // Fallback for development/testing\n    console.log('Would insert:', text);\n  }\n}\n```\n\n## Development Patterns\n\n### Frontend-First Approach\nMost editor panel functionality can be implemented entirely in the frontend:\n```javascript\n// Load external data (dictionaries, suggestions, etc.)\nfetch('/api/external-data')\n  .then(response => response.json())\n  .then(data => {\n    // Use data to enhance the editor experience\n    displaySuggestions(data);\n  });\n\n// Interact with editor\nfunction applySuggestion(text) {\n  window.AP.editor.insertTranslation(text);\n}\n```\n\n### Optional Backend APIs\nAdd backend endpoints only when needed:\n```javascript\n// Optional: Custom data endpoints\napp.get('/api/suggestions', async (req, res) => {\n  // Fetch suggestions from external service\n  const suggestions = await getExternalSuggestions(req.query.text);\n  res.json(suggestions);\n});\n\n// Optional: Configuration endpoints\napp.get('/api/config', async (req, res) => {\n  const { client } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n  // Return app-specific configuration\n  res.json({ config: 'data' });\n});\n```\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. **Focus on frontend**: Replace `public/index.html` with your panel interface\n2. **Integrate Editor API**: Use `window.AP.editor` methods for translation interactions\n3. **Add backend APIs only if needed**: For external integrations or data processing\n4. **Test in Crowdin editor**: Panel appears in translation editor sidebar\n5. **Deploy and register**: Deploy to hosting platform and register in Crowdin Developer Console\n\n## Common Use Cases\n- **Text insertion tools**: Special characters, templates, snippets\n- **Translation assistance**: Suggestions, auto-completion, terminology\n- **Quality tools**: Grammar checkers, style validators\n- **Reference tools**: Dictionaries, glossaries, context helpers\n- **Custom workflows**: Project-specific translation aids\n\n## Panel Design Guidelines\n- **Compact Design**: Panel width is typically 300-400px\n- **Quick Actions**: Focus on immediate, actionable functionality\n- **Editor Integration**: Use Editor API methods for seamless translation workflow\n- **Responsive**: Handle different panel sizes gracefully\n- **Performance**: Keep UI lightweight and fast\n\n## Examples from Real Apps\n\n### Simple Text Insertion\n```javascript\n// Just frontend functionality\nfunction insertText(text) {\n  window.AP.editor.appendTranslation(text);\n}\n```\n\n### Translation Suggestions (With Backend)\n```javascript\n// Frontend requests suggestions, backend processes\nasync function getSuggestions(sourceText) {\n  const response = await fetch(`/api/suggestions?text=${sourceText}`);\n  const suggestions = await response.json();\n  displaySuggestions(suggestions);\n}\n```\n\n## Security Notes\n- Editor API handles authentication automatically\n- Panel runs in iframe with Crowdin security context\n- Use HTTPS in production\n- Validate any external data before displaying"
    }
  },
  {
    "name": "crowdin-organization-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Organization Menu module.\n\nUse when:\n- Building organization-wide tools and utilities\n- Creating organization management extensions\n- Developing organization-level analytics and reporting tools\n- Building organization-wide integrations with external APIs\n- Creating custom workflows for groups and projects management\n- Managing organization members and permissions\n\nAvoid when:\n- Building project-specific tools (use Project Tools instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Organization Menu module for organization-wide functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic organization context\n- Module: Organization Menu (appears in organization navigation)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with organization context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the organizationMenu configuration structure\n- **Scopes**: Ensure your app has appropriate organization-level API scopes\n- **Organization Context**: Apps automatically receive organization context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Organization Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/organization-menu/index.html` - Main HTML interface with demo UI\n- `public/organization-menu/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/organization-menu/styles.css` - Responsive CSS with accessibility support\n\n## Organization Menu Configuration\n\n```typescript\norganizationMenu: {\n  fileName: 'index.html',\n  uiPath: '/organization-menu'  // Points to public/organization-menu directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        crowdinModule.Scope.PROJECTS,        // Project management\n        crowdinModule.Scope.GROUPS,          // Group management\n        crowdinModule.Scope.TRANSLATIONS,    // Translation data  \n        // Add other scopes as needed\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get organization context\n    AP.getContext(function(context) {\n        orgContext = context;\n        // context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectsByGroups();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Organization Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Organization context is automatically available\n    console.log('Current organization ID:', organizationId);\n    \n    // Access organization data via API client\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    res.json({ success: true, groups: groupsResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access organization data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Organization Groups and Projects Example\n```typescript\napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    \n    // Get all groups\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    const groups = groupsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        description: item.data.description || '',\n        projects: []\n    }));\n    \n    // Get all projects\n    const projectsResponse = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n    const allProjects = projectsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        groupId: item.data.groupId\n    }));\n    \n    // Organize projects by groups\n    // ... your organization logic ...\n    \n    res.json({\n      success: true,\n      data: { groups, ungroupedProjects }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch projects by groups' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-organization-menu`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/organization-menu/index.html` - Modify UI structure\n- `public/organization-menu/app.js` - Add frontend logic  \n- `public/organization-menu/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.listGroups()\n// Example: connection.client.projectsGroupsApi.withFetchAll().listProjects()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  },
  {
    "name": "crowdin-profile-resources-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Profile Resources Menu module.\n\nUse when:\n- Building user-specific tools and preferences\n- Creating personal dashboards and settings\n- Developing user profile extensions\n- Building user-level integrations and configurations\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating project-specific tools (use Project Tools instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Express.js server\n- Profile Resources Menu module\n- JWT authentication\n- React JSON Schema forms support\n- User metadata storage",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Profile Resources Menu module for user-specific functionality.\n- Backend: Express.js with Crowdin Apps SDK\n- Frontend: HTML/CSS/JavaScript or React JSON Schema forms\n- Authentication: JWT tokens from Crowdin\n- Module: Profile Resources Menu (appears in user profile menu)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for Crowdin integration\n- **Express.js** for server and API endpoints\n- **JWT** for authentication\n- **React JSON Schema forms** (optional) for declarative form generation\n- **HTML/CSS/JavaScript** for custom interfaces\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the profileResourcesMenu configuration structure\n- **User Context**: Apps have access to user-specific data and preferences\n\n## Project Structure\n\n### Backend Structure\n- `index.js` - Main application with Profile Resources Menu configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main UI file (for custom HTML approach)\n- `data/` - Metadata storage directory\n\n### Frontend Options\n1. **Custom HTML Interface**: Replace `public/index.html` with your design\n2. **React JSON Schema Forms**: Use declarative form schemas (uncomment in index.js)\n\n## Implementation Approaches\n\n### Option 1: Custom HTML Interface\nKeep the existing HTML approach and customize:\n```javascript\nprofileResourcesMenu: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public'\n}\n```\n\n### Option 2: React JSON Schema Forms\nUse declarative forms (uncomment in index.js):\n```javascript\nprofileResourcesMenu: {\n  formSchema: {\n    title: \"Your App Settings\",\n    type: \"object\",\n    properties: {\n      preference1: {\n        title: 'User Preference',\n        type: 'string'\n      }\n    }\n  },\n  formUiSchema: {\n    preference1: {\n      \"ui:help\": \"Help text for this preference\"\n    }\n  },\n  formGetDataUrl: '/form-data',\n  formPostDataUrl: '/form-data'\n}\n```\n\n## API Patterns\n\n### Form Data Handling (JSON Schema Forms)\n```javascript\n// GET /form-data - Load form data\napp.get('/form-data', async (req, res) => {\n  const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwtToken);\n  const userId = context.jwtPayload.context.user_id;\n  \n  // Load user preferences\n  const userData = await crowdinApp.getMetadata(userId);\n  \n  res.json({\n    formSchema: formConfiguration.formSchema,\n    formUiSchema: formConfiguration.formUiSchema,\n    formData: userData || {}\n  });\n});\n\n// POST /form-data - Save form data\napp.post('/form-data', async (req, res) => {\n  const { context } = await crowdinApp.establishCrowdinConnection(req.query.jwtToken);\n  const userId = context.jwtPayload.context.user_id;\n  \n  // Save user preferences\n  await crowdinApp.saveMetadata(userId, req.body.data);\n  \n  res.json({ message: 'Settings saved successfully!' });\n});\n```\n\n### Custom API Endpoints\n```javascript\napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const userId = context.jwtPayload.context.user_id;\n    \n    // Your business logic here\n    const preferences = await getUserPreferences(userId);\n    res.json({ success: true, data: preferences });\n  } catch (error) {\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n## Profile Resources Menu Module\n- Appears in user profile menu\n- User-specific functionality and data\n- Access to user preferences and settings\n- Personal integrations and tools\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. Choose implementation approach (HTML or JSON Schema forms)\n2. Define your interface or form schema\n3. Add API endpoints for your business logic\n4. Use metadata storage for user preferences\n5. Test with your Crowdin user account\n6. Deploy and register in Crowdin Developer Console\n\n## Common Use Cases\n- User preference settings\n- Personal integration configurations\n- User-specific dashboards\n- Personal API keys management\n- Custom user workflows\n- Individual reporting preferences\n\n## React JSON Schema Forms\nWhen using form schemas:\n- Forms are automatically generated from schema\n- Built-in validation and error handling\n- Consistent Crowdin UI styling\n- Support for complex form layouts\n- Automatic form submission handling\n\n## Security Notes\n- JWT tokens contain user context information\n- Store user-specific data using metadata storage\n- Validate user permissions for sensitive operations\n- Use HTTPS in production\n- Follow Crowdin API rate limiting guidelines"
    }
  },
  {
    "name": "crowdin-project-tools",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Project Tools module.\n\nUse when:\n- Building project-specific tools and utilities\n- Creating project management extensions\n- Developing project analysis and reporting tools\n- Building project-level integrations with external APIs\n- Creating custom project workflows and automation\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Project Tools module for project-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic project context\n- Module: Project Tools (appears in project menu)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with project context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the projectTools configuration structure\n- **Scopes**: Ensure your app has appropriate project-level API scopes\n- **Project Context**: Apps automatically receive project context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Project Tools configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/tools/index.html` - Main HTML interface with demo UI\n- `public/tools/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/tools/styles.css` - Responsive CSS with accessibility support\n\n## Project Tools Configuration\n\n```typescript\nprojectTools: {\n  fileName: 'index.html',\n  uiPath: '/tools'  // Points to public/tools directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        crowdinModule.Scope.PROJECTS,        // Project management\n        crowdinModule.Scope.TRANSLATIONS,    // Translation data  \n        crowdinModule.Scope.FILES,           // File management\n        crowdinModule.Scope.REPORTS,         // Reporting data\n        // Add other scopes as needed\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get project context\n    AP.getContext(function(context) {\n        projectContext = context;\n        // context.project_id, context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectLanguages();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Project Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/project-languages', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Project context is automatically available\n    console.log('Current project ID:', projectId);\n    \n    // Access project data via API client\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    res.json({ success: true, project: projectResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access project data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const projectId = connection.context.jwtPayload.context.project_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Project Information Example\n```typescript\napp.get('/api/project-overview', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Get comprehensive project information (example)\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    const targetLanguageIds = projectResponse.data.targetLanguageIds || [];\n    \n    // Get supported languages and filter by project\n    const supportedLanguages = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n    const projectLanguages = supportedLanguages.data.filter(\n      lang => targetLanguageIds.includes(lang.data.id)\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        project: projectResponse.data,\n        languages: projectLanguages\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project overview' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-project-tools`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/tools/index.html` - Modify UI structure\n- `public/tools/app.js` - Add frontend logic  \n- `public/tools/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.getProject(projectId)\n// Example: connection.client.languagesApi.withFetchAll().listSupportedLanguages()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  }
]