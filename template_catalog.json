[
  {
    "name": "crowdin-editor-right-panel",
    "language": "typescript",
    "frameworks": [
      "express",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Editor Right Panel module.\n\nUse when:\n- Building translation assistance tools\n- Creating context-aware editor extensions\n- Developing quality assurance tools\n- Building translation validation and suggestion tools\n- Creating custom translation workflows\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building project management tools (use Project Tools instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Crowdin Editor API (window.AP.editor) for translation interactions\n- Express.js server (minimal - mostly frontend-focused)\n- Editor Right Panel module\n- HTML/CSS/JavaScript interface",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Editor Right Panel module for translation editor extensions.\n- Backend: Express.js with Crowdin Apps SDK (minimal - most functionality is frontend)\n- Frontend: HTML/CSS/JavaScript with Crowdin Editor API integration\n- Module: Editor Right Panel (appears in translation editor sidebar)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for app structure\n- **Crowdin Editor API** (`window.AP.editor`) for translation interactions\n- **HTML/CSS/JavaScript** for panel interface\n- **Express.js** for serving static files and optional API endpoints\n\n## Development Approach\n**Most editor right panel apps are frontend-focused** and use the Crowdin Editor API directly. The backend is typically minimal, serving static files and handling app installation.\n\n## Project Structure\n\n### Backend Structure (Minimal)\n- `index.js` - Main application with Editor Right Panel configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main panel interface\n- `data/` - Metadata storage directory (if needed)\n\n### Frontend Structure (Primary Focus)\n- `public/index.html` - Editor panel interface with Crowdin Editor API integration\n- JavaScript for editor interactions and custom functionality\n\n## Editor Right Panel Configuration\n\n```javascript\neditorRightPanel: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public',\n  modes: ['translate'], // Editor modes where panel appears\n  environments: 'crowdin' // or 'enterprise' or 'crowdin,enterprise'\n}\n```\n\n### Available Editor Modes\n- `translate` - Translation mode (most common)\n- `proofread` - Proofreading mode\n- `review` - Review mode\n\n## Crowdin Editor API\n\nThe primary way to interact with translations is through the Crowdin Editor API:\n\n### Include the API Script\n```html\n<script src=\"https://cdn.crowdin.com/apps/dist/iframe.js\"></script>\n```\n\n### Core Editor Methods\n```javascript\n// Insert text at cursor position\nwindow.AP.editor.insertTranslation(text)\n\n// Append text to current translation\nwindow.AP.editor.appendTranslation(text)\n\n// Replace entire translation\nwindow.AP.editor.setTranslation(text)\n\n// Get current translation\nconst translation = window.AP.editor.getTranslation()\n\n// Get source string\nconst sourceString = window.AP.editor.getSourceString()\n```\n\n### Example Usage\n```javascript\nfunction insertText(text) {\n  if (window.AP && window.AP.editor) {\n    window.AP.editor.appendTranslation(text);\n  } else {\n    // Fallback for development/testing\n    console.log('Would insert:', text);\n  }\n}\n```\n\n## Development Patterns\n\n### Frontend-First Approach\nMost editor panel functionality can be implemented entirely in the frontend:\n```javascript\n// Load external data (dictionaries, suggestions, etc.)\nfetch('/api/external-data')\n  .then(response => response.json())\n  .then(data => {\n    // Use data to enhance the editor experience\n    displaySuggestions(data);\n  });\n\n// Interact with editor\nfunction applySuggestion(text) {\n  window.AP.editor.insertTranslation(text);\n}\n```\n\n### Optional Backend APIs\nAdd backend endpoints only when needed:\n```javascript\n// Optional: Custom data endpoints\napp.get('/api/suggestions', async (req, res) => {\n  // Fetch suggestions from external service\n  const suggestions = await getExternalSuggestions(req.query.text);\n  res.json(suggestions);\n});\n\n// Optional: Configuration endpoints\napp.get('/api/config', async (req, res) => {\n  const { client } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n  // Return app-specific configuration\n  res.json({ config: 'data' });\n});\n```\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. **Focus on frontend**: Replace `public/index.html` with your panel interface\n2. **Integrate Editor API**: Use `window.AP.editor` methods for translation interactions\n3. **Add backend APIs only if needed**: For external integrations or data processing\n4. **Test in Crowdin editor**: Panel appears in translation editor sidebar\n5. **Deploy and register**: Deploy to hosting platform and register in Crowdin Developer Console\n\n## Common Use Cases\n- **Text insertion tools**: Special characters, templates, snippets\n- **Translation assistance**: Suggestions, auto-completion, terminology\n- **Quality tools**: Grammar checkers, style validators\n- **Reference tools**: Dictionaries, glossaries, context helpers\n- **Custom workflows**: Project-specific translation aids\n\n## Panel Design Guidelines\n- **Compact Design**: Panel width is typically 300-400px\n- **Quick Actions**: Focus on immediate, actionable functionality\n- **Editor Integration**: Use Editor API methods for seamless translation workflow\n- **Responsive**: Handle different panel sizes gracefully\n- **Performance**: Keep UI lightweight and fast\n\n## Examples from Real Apps\n\n### Simple Text Insertion\n```javascript\n// Just frontend functionality\nfunction insertText(text) {\n  window.AP.editor.appendTranslation(text);\n}\n```\n\n### Translation Suggestions (With Backend)\n```javascript\n// Frontend requests suggestions, backend processes\nasync function getSuggestions(sourceText) {\n  const response = await fetch(`/api/suggestions?text=${sourceText}`);\n  const suggestions = await response.json();\n  displaySuggestions(suggestions);\n}\n```\n\n## Security Notes\n- Editor API handles authentication automatically\n- Panel runs in iframe with Crowdin security context\n- Use HTTPS in production\n- Validate any external data before displaying"
    }
  },
  {
    "name": "crowdin-organization-menu",
    "language": "typescript",
    "frameworks": [
      "express",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Organization Menu module.\n\nUse when:\n- Building organization-wide tools and utilities\n- Creating admin interfaces for organization settings\n- Developing reporting and analytics dashboards\n- Building organization-level integrations\n\nAvoid when:\n- Building project-specific tools (use Project Tools instead)\n- Creating editor extensions (use Editor Right Panel instead)\n- Building file processing tools (use File Processor instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Express.js server\n- Organization Menu module\n- JWT authentication\n- Environment-based configuration",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Organization Menu module for organization-wide functionality.\n- Backend: Express.js with Crowdin Apps SDK\n- Frontend: HTML/CSS/JavaScript (customizable)\n- Authentication: JWT tokens from Crowdin\n- Module: Organization Menu (appears in org navigation)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for Crowdin integration\n- **Express.js** for server and API endpoints\n- **JWT** for authentication\n- **HTML/CSS/JavaScript** for frontend (replace with your framework)\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the organizationMenu configuration structure\n- **Scopes**: Ensure your app has appropriate Crowdin API scopes\n\n## Project Structure\n\n### Backend Structure\n- `index.js` - Main application entry point with Organization Menu configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main UI file (replace with your interface)\n- `data/` - Metadata storage directory\n\n### Frontend Structure\n- `public/index.html` - Main interface (customize as needed)\n- Add CSS frameworks, JavaScript libraries as needed\n- Can be replaced with React, Vue, or any frontend framework\n\n## API Patterns\n\n### Adding Custom Endpoints\nAdd your business logic in `index.js`:\n```javascript\n// Example API endpoint\napp.get('/api/organizations', async (req, res) => {\n  try {\n    const { client } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const organizations = await client.organizationsApi.listOrganizations();\n    res.status(200).json({ success: true, data: organizations.data });\n  } catch (error) {\n    console.error('Error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n### Frontend API Calls\nUse JWT token from URL parameters:\n```javascript\nconst urlParams = new URLSearchParams(window.location.search);\nconst jwt = urlParams.get('jwt');\n\nfetch(`/api/organizations?jwt=${jwt}`)\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n## Organization Menu Module\n- Appears in organization-level navigation\n- Accessible to organization admins and members (based on app permissions)\n- Provides organization-wide functionality\n- Can access organization-level APIs\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. Replace `public/index.html` with your custom UI\n2. Add API endpoints in `index.js` for your business logic\n3. Use `establishCrowdinConnection()` to get authenticated Crowdin API client\n4. Test with your Crowdin organization\n5. Deploy and register in Crowdin Developer Console\n\n## Common Use Cases\n- Organization settings management\n- User management and permissions\n- Reporting and analytics dashboards\n- Integration configuration\n- Bulk operations across projects\n\n## Security Notes\n- JWT tokens are automatically validated by the SDK\n- Use HTTPS in production\n- Don't expose sensitive data to the frontend\n- Follow Crowdin API rate limiting guidelines"
    }
  },
  {
    "name": "crowdin-profile-resources-menu",
    "language": "typescript",
    "frameworks": [
      "express",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Profile Resources Menu module.\n\nUse when:\n- Building user-specific tools and preferences\n- Creating personal dashboards and settings\n- Developing user profile extensions\n- Building user-level integrations and configurations\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating project-specific tools (use Project Tools instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Express.js server\n- Profile Resources Menu module\n- JWT authentication\n- React JSON Schema forms support\n- User metadata storage",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Profile Resources Menu module for user-specific functionality.\n- Backend: Express.js with Crowdin Apps SDK\n- Frontend: HTML/CSS/JavaScript or React JSON Schema forms\n- Authentication: JWT tokens from Crowdin\n- Module: Profile Resources Menu (appears in user profile menu)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for Crowdin integration\n- **Express.js** for server and API endpoints\n- **JWT** for authentication\n- **React JSON Schema forms** (optional) for declarative form generation\n- **HTML/CSS/JavaScript** for custom interfaces\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the profileResourcesMenu configuration structure\n- **User Context**: Apps have access to user-specific data and preferences\n\n## Project Structure\n\n### Backend Structure\n- `index.js` - Main application with Profile Resources Menu configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main UI file (for custom HTML approach)\n- `data/` - Metadata storage directory\n\n### Frontend Options\n1. **Custom HTML Interface**: Replace `public/index.html` with your design\n2. **React JSON Schema Forms**: Use declarative form schemas (uncomment in index.js)\n\n## Implementation Approaches\n\n### Option 1: Custom HTML Interface\nKeep the existing HTML approach and customize:\n```javascript\nprofileResourcesMenu: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public'\n}\n```\n\n### Option 2: React JSON Schema Forms\nUse declarative forms (uncomment in index.js):\n```javascript\nprofileResourcesMenu: {\n  formSchema: {\n    title: \"Your App Settings\",\n    type: \"object\",\n    properties: {\n      preference1: {\n        title: 'User Preference',\n        type: 'string'\n      }\n    }\n  },\n  formUiSchema: {\n    preference1: {\n      \"ui:help\": \"Help text for this preference\"\n    }\n  },\n  formGetDataUrl: '/form-data',\n  formPostDataUrl: '/form-data'\n}\n```\n\n## API Patterns\n\n### Form Data Handling (JSON Schema Forms)\n```javascript\n// GET /form-data - Load form data\napp.get('/form-data', async (req, res) => {\n  const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwtToken);\n  const userId = context.jwtPayload.context.user_id;\n  \n  // Load user preferences\n  const userData = await crowdinApp.getMetadata(userId);\n  \n  res.json({\n    formSchema: formConfiguration.formSchema,\n    formUiSchema: formConfiguration.formUiSchema,\n    formData: userData || {}\n  });\n});\n\n// POST /form-data - Save form data\napp.post('/form-data', async (req, res) => {\n  const { context } = await crowdinApp.establishCrowdinConnection(req.query.jwtToken);\n  const userId = context.jwtPayload.context.user_id;\n  \n  // Save user preferences\n  await crowdinApp.saveMetadata(userId, req.body.data);\n  \n  res.json({ message: 'Settings saved successfully!' });\n});\n```\n\n### Custom API Endpoints\n```javascript\napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const userId = context.jwtPayload.context.user_id;\n    \n    // Your business logic here\n    const preferences = await getUserPreferences(userId);\n    res.json({ success: true, data: preferences });\n  } catch (error) {\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n## Profile Resources Menu Module\n- Appears in user profile menu\n- User-specific functionality and data\n- Access to user preferences and settings\n- Personal integrations and tools\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. Choose implementation approach (HTML or JSON Schema forms)\n2. Define your interface or form schema\n3. Add API endpoints for your business logic\n4. Use metadata storage for user preferences\n5. Test with your Crowdin user account\n6. Deploy and register in Crowdin Developer Console\n\n## Common Use Cases\n- User preference settings\n- Personal integration configurations\n- User-specific dashboards\n- Personal API keys management\n- Custom user workflows\n- Individual reporting preferences\n\n## React JSON Schema Forms\nWhen using form schemas:\n- Forms are automatically generated from schema\n- Built-in validation and error handling\n- Consistent Crowdin UI styling\n- Support for complex form layouts\n- Automatic form submission handling\n\n## Security Notes\n- JWT tokens contain user context information\n- Store user-specific data using metadata storage\n- Validate user permissions for sensitive operations\n- Use HTTPS in production\n- Follow Crowdin API rate limiting guidelines"
    }
  },
  {
    "name": "crowdin-project-tools",
    "language": "typescript",
    "frameworks": [
      "express",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Project Tools module.\n\nUse when:\n- Building project-specific tools and utilities\n- Creating project management extensions\n- Developing project analysis and reporting tools\n- Building project-level integrations\n- Creating custom project workflows\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Express.js server\n- Project Tools module\n- JWT authentication with project context\n- Project-specific API access",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Project Tools module for project-specific functionality.\n- Backend: Express.js with Crowdin Apps SDK\n- Frontend: HTML/CSS/JavaScript with project context integration\n- Authentication: JWT tokens from Crowdin with project context\n- Module: Project Tools (appears in project menu)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for Crowdin integration\n- **Express.js** for server and API endpoints\n- **JWT** for authentication with project context\n- **HTML/CSS/JavaScript** for project tool interface\n- **Crowdin API** for project data access\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the projectTools configuration structure\n- **Scopes**: Ensure your app has appropriate project-level API scopes\n- **Project Context**: Apps automatically receive project context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `index.js` - Main application with Project Tools configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Project tool interface\n- `data/` - Metadata storage directory\n\n### Frontend Structure\n- `public/index.html` - Project tool interface\n- JavaScript for project context handling\n- Project-specific functionality\n\n## Project Tools Configuration\n\n```javascript\nprojectTools: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public'\n}\n```\n\n### Required Scopes\nDefine scopes based on your app's functionality:\n```javascript\nscopes: [\n  crowdinModule.Scope.PROJECTS,        // Project management\n  crowdinModule.Scope.TRANSLATIONS,    // Translation data\n  crowdinModule.Scope.FILES,           // File management\n  crowdinModule.Scope.REPORTS,         // Reporting data\n  // Add other scopes as needed\n]\n```\n\n## Project Context Integration\n\n### Accessing Project Context\n```javascript\napp.get('/api/project-data', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const projectId = context.jwtPayload.context.project_id;\n    \n    // Project context is automatically available\n    console.log('Current project ID:', projectId);\n    \n    // Access project data\n    const project = await client.projectsGroupsApi.getProject(projectId);\n    res.json({ success: true, project: project.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access project data' });\n  }\n});\n```\n\n### Available Context Information\n- `project_id` - Current project ID\n- `organization_id` - Organization ID\n- `user_id` - Current user ID\n- Additional project-specific context\n\n## API Patterns\n\n### Project Information\n```javascript\napp.get('/api/project-overview', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const projectId = context.jwtPayload.context.project_id;\n    \n    // Get comprehensive project information\n    const [project, languages, files, progress] = await Promise.all([\n      client.projectsGroupsApi.getProject(projectId),\n      client.languagesApi.listProjectTargetLanguages(projectId),\n      client.sourceFilesApi.withFetchAll().listProjectFiles(projectId),\n      client.translationStatusApi.getProjectProgress(projectId)\n    ]);\n    \n    res.json({\n      success: true,\n      data: {\n        project: project.data,\n        languages: languages.data,\n        files: files.data,\n        progress: progress.data\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project overview' });\n  }\n});\n```\n\n### Project Operations\n```javascript\napp.post('/api/project-operation', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const projectId = context.jwtPayload.context.project_id;\n    const { operation, parameters } = req.body;\n    \n    let result;\n    switch (operation) {\n      case 'build':\n        result = await client.translationsApi.buildProject(projectId, parameters);\n        break;\n      case 'export':\n        result = await client.translationsApi.exportProjectTranslation(projectId, parameters);\n        break;\n      case 'sync':\n        // Custom sync logic\n        result = await performProjectSync(client, projectId, parameters);\n        break;\n      default:\n        return res.status(400).json({ error: 'Unknown operation' });\n    }\n    \n    res.json({ success: true, result });\n  } catch (error) {\n    res.status(500).json({ error: 'Operation failed' });\n  }\n});\n```\n\n### Bulk Operations\n```javascript\napp.post('/api/bulk-operation', async (req, res) => {\n  try {\n    const { client, context } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n    const projectId = context.jwtPayload.context.project_id;\n    const { action, targets } = req.body;\n    \n    const results = [];\n    for (const target of targets) {\n      try {\n        const result = await performBulkAction(client, projectId, action, target);\n        results.push({ target, success: true, result });\n      } catch (error) {\n        results.push({ target, success: false, error: error.message });\n      }\n    }\n    \n    res.json({ success: true, results });\n  } catch (error) {\n    res.status(500).json({ error: 'Bulk operation failed' });\n  }\n});\n```\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. Replace `public/index.html` with your project tool interface\n2. Define required scopes for your project operations\n3. Add API endpoints for your project-specific logic\n4. Use project context to access relevant data\n5. Test within your Crowdin project\n6. Deploy and register in Crowdin Developer Console\n\n## Common Use Cases\n- **Project Analytics**: Progress tracking, statistics, reports\n- **Bulk Operations**: Mass updates, batch processing\n- **Quality Assurance**: Project-wide QA checks and validation\n- **Integration Management**: Sync with external systems\n- **Custom Workflows**: Specialized project processes\n- **File Management**: Advanced file operations and organization\n- **Team Management**: Project member tools and permissions\n\n## Project Data Access\n- **Files**: Source files, translations, file structures\n- **Strings**: Source strings, translations, contexts\n- **Languages**: Target languages, progress, statistics\n- **Members**: Project team, roles, permissions\n- **Settings**: Project configuration, preferences\n- **Reports**: Progress reports, activity logs\n\n## Best Practices\n- **Efficient API Usage**: Batch requests, use pagination\n- **Error Handling**: Graceful degradation, user-friendly messages\n- **Progress Indicators**: Show progress for long-running operations\n- **Data Caching**: Cache frequently accessed project data\n- **Permissions**: Respect user permissions and project access\n\n## Security Notes\n- JWT tokens contain project context information\n- Validate project access permissions\n- Use HTTPS in production\n- Handle sensitive project data securely\n- Follow Crowdin API rate limiting guidelines\n- Ensure operations are authorized for the current user\n\n## Performance Considerations\n- **Lazy Loading**: Load data as needed\n- **Pagination**: Handle large datasets efficiently\n- **Background Processing**: Use async operations for heavy tasks\n- **Caching**: Cache project metadata and settings\n- **Optimization**: Minimize API calls, batch operations"
    }
  }
]