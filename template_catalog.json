[
  {
    "name": "crowdin-editor-right-panel",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Editor Right Panel module.\n\nUse when:\n- Building translation assistance tools\n- Creating context-aware editor extensions\n- Developing quality assurance tools\n- Building translation validation and suggestion tools\n- Creating custom translation workflows\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building project management tools (use Project Tools instead)\n\nBuilt with:\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- Crowdin Editor API (window.AP.editor) for translation interactions\n- Express.js server (minimal - mostly frontend-focused)\n- Editor Right Panel module\n- HTML/CSS/JavaScript interface",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Editor Right Panel module for translation editor extensions.\n- Backend: Express.js with Crowdin Apps SDK (minimal - most functionality is frontend)\n- Frontend: HTML/CSS/JavaScript with Crowdin Editor API integration\n- Module: Editor Right Panel (appears in translation editor sidebar)\n\n## Tech Stack\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for app structure\n- **Crowdin Editor API** (`window.AP.editor`) for translation interactions\n- **HTML/CSS/JavaScript** for panel interface\n- **Express.js** for serving static files and optional API endpoints\n\n## Development Approach\n**Most editor right panel apps are frontend-focused** and use the Crowdin Editor API directly. The backend is typically minimal, serving static files and handling app installation.\n\n## Project Structure\n\n### Backend Structure (Minimal)\n- `index.js` - Main application with Editor Right Panel configuration\n- `public/` - Static files served to the browser\n- `public/index.html` - Main panel interface\n- `data/` - Metadata storage directory (if needed)\n\n### Frontend Structure (Primary Focus)\n- `public/index.html` - Editor panel interface with Crowdin Editor API integration\n- JavaScript for editor interactions and custom functionality\n\n## Editor Right Panel Configuration\n\n```javascript\neditorRightPanel: {\n  fileName: 'index.html',\n  uiPath: __dirname + '/public',\n  modes: ['translate'], // Editor modes where panel appears\n  environments: 'crowdin' // or 'enterprise' or 'crowdin,enterprise'\n}\n```\n\n### Available Editor Modes\n- `translate` - Translation mode (most common)\n- `proofread` - Proofreading mode\n- `review` - Review mode\n\n## Crowdin Editor API\n\nThe primary way to interact with translations is through the Crowdin Editor API:\n\n### Include the API Script\n```html\n<script src=\"https://cdn.crowdin.com/apps/dist/iframe.js\"></script>\n```\n\n### Core Editor Methods\n```javascript\n// Insert text at cursor position\nwindow.AP.editor.insertTranslation(text)\n\n// Append text to current translation\nwindow.AP.editor.appendTranslation(text)\n\n// Replace entire translation\nwindow.AP.editor.setTranslation(text)\n\n// Get current translation\nconst translation = window.AP.editor.getTranslation()\n\n// Get source string\nconst sourceString = window.AP.editor.getSourceString()\n```\n\n### Example Usage\n```javascript\nfunction insertText(text) {\n  if (window.AP && window.AP.editor) {\n    window.AP.editor.appendTranslation(text);\n  } else {\n    // Fallback for development/testing\n    console.log('Would insert:', text);\n  }\n}\n```\n\n## Development Patterns\n\n### Frontend-First Approach\nMost editor panel functionality can be implemented entirely in the frontend:\n```javascript\n// Load external data (dictionaries, suggestions, etc.)\nfetch('/api/external-data')\n  .then(response => response.json())\n  .then(data => {\n    // Use data to enhance the editor experience\n    displaySuggestions(data);\n  });\n\n// Interact with editor\nfunction applySuggestion(text) {\n  window.AP.editor.insertTranslation(text);\n}\n```\n\n### Optional Backend APIs\nAdd backend endpoints only when needed:\n```javascript\n// Optional: Custom data endpoints\napp.get('/api/suggestions', async (req, res) => {\n  // Fetch suggestions from external service\n  const suggestions = await getExternalSuggestions(req.query.text);\n  res.json(suggestions);\n});\n\n// Optional: Configuration endpoints\napp.get('/api/config', async (req, res) => {\n  const { client } = await crowdinApp.establishCrowdinConnection(req.query.jwt);\n  // Return app-specific configuration\n  res.json({ config: 'data' });\n});\n```\n\n## Environment Variables\nRequired (automatically picked up by Crowdin Apps SDK):\n- `BASE_URL` - Your app's public URL\n- `CROWDIN_CLIENT_ID` - Your app's client ID\n- `CROWDIN_CLIENT_SECRET` - Your app's client secret\n\nOptional:\n- `APP_NAME` - Display name for your app\n- `APP_IDENTIFIER` - Unique identifier\n- `APP_DESCRIPTION` - App description\n- `PORT` - Server port (default: 3000)\n\n## Development Workflow\n1. **Focus on frontend**: Replace `public/index.html` with your panel interface\n2. **Integrate Editor API**: Use `window.AP.editor` methods for translation interactions\n3. **Add backend APIs only if needed**: For external integrations or data processing\n4. **Test in Crowdin editor**: Panel appears in translation editor sidebar\n5. **Deploy and register**: Deploy to hosting platform and register in Crowdin Developer Console\n\n## Common Use Cases\n- **Text insertion tools**: Special characters, templates, snippets\n- **Translation assistance**: Suggestions, auto-completion, terminology\n- **Quality tools**: Grammar checkers, style validators\n- **Reference tools**: Dictionaries, glossaries, context helpers\n- **Custom workflows**: Project-specific translation aids\n\n## Panel Design Guidelines\n- **Compact Design**: Panel width is typically 300-400px\n- **Quick Actions**: Focus on immediate, actionable functionality\n- **Editor Integration**: Use Editor API methods for seamless translation workflow\n- **Responsive**: Handle different panel sizes gracefully\n- **Performance**: Keep UI lightweight and fast\n\n## Examples from Real Apps\n\n### Simple Text Insertion\n```javascript\n// Just frontend functionality\nfunction insertText(text) {\n  window.AP.editor.appendTranslation(text);\n}\n```\n\n### Translation Suggestions (With Backend)\n```javascript\n// Frontend requests suggestions, backend processes\nasync function getSuggestions(sourceText) {\n  const response = await fetch(`/api/suggestions?text=${sourceText}`);\n  const suggestions = await response.json();\n  displaySuggestions(suggestions);\n}\n```\n\n## Security Notes\n- Editor API handles authentication automatically\n- Panel runs in iframe with Crowdin security context\n- Use HTTPS in production\n- Validate any external data before displaying"
    }
  },
  {
    "name": "crowdin-organization-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Organization Menu module.\n\nUse when:\n- Building organization-wide tools and utilities\n- Creating organization management extensions\n- Developing organization-level analytics and reporting tools\n- Building organization-wide integrations with external APIs\n- Creating custom workflows for groups and projects management\n- Managing organization members and permissions\n\nAvoid when:\n- Building project-specific tools (use Project Tools instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Organization Menu module for organization-wide functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic organization context\n- Module: Organization Menu (appears in organization navigation)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with organization context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the organizationMenu configuration structure\n- **Scopes**: Ensure your app has appropriate organization-level API scopes\n- **Organization Context**: Apps automatically receive organization context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Organization Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/organization-menu/index.html` - Main HTML interface with demo UI\n- `public/organization-menu/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/organization-menu/styles.css` - Responsive CSS with accessibility support\n\n## Organization Menu Configuration\n\n```typescript\norganizationMenu: {\n  fileName: 'index.html',\n  uiPath: '/organization-menu'  // Points to public/organization-menu directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        crowdinModule.Scope.PROJECTS,        // Project management\n        crowdinModule.Scope.GROUPS,          // Group management\n        crowdinModule.Scope.TRANSLATIONS,    // Translation data  \n        // Add other scopes as needed\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get organization context\n    AP.getContext(function(context) {\n        orgContext = context;\n        // context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectsByGroups();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Organization Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Organization context is automatically available\n    console.log('Current organization ID:', organizationId);\n    \n    // Access organization data via API client\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    res.json({ success: true, groups: groupsResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access organization data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Organization Groups and Projects Example\n```typescript\napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    \n    // Get all groups\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    const groups = groupsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        description: item.data.description || '',\n        projects: []\n    }));\n    \n    // Get all projects\n    const projectsResponse = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n    const allProjects = projectsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        groupId: item.data.groupId\n    }));\n    \n    // Organize projects by groups\n    // ... your organization logic ...\n    \n    res.json({\n      success: true,\n      data: { groups, ungroupedProjects }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch projects by groups' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-organization-menu`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/organization-menu/index.html` - Modify UI structure\n- `public/organization-menu/app.js` - Add frontend logic  \n- `public/organization-menu/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.listGroups()\n// Example: connection.client.projectsGroupsApi.withFetchAll().listProjects()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  },
  {
    "name": "crowdin-profile-resources-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Profile Resources Menu module.\n\nUse when:\n- Building user-specific tools and preferences\n- Creating personal dashboards and settings\n- Developing user profile extensions\n- Building user-level integrations and configurations\n- Managing user preferences and settings\n- Creating personal analytics and statistics tools\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating project-specific tools (use Project Tools instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Profile Resources Menu module for user-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Profile Resources Menu (appears in user profile menu)\n- Storage: Built-in metadata storage for user preferences (saveMetadata, getMetadata, deleteMetadata)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with user context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the profileResourcesMenu configuration structure\n- **Scopes**: Ensure your app has appropriate user-level API scopes\n- **User Context**: Apps automatically receive user context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Profile Resources Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/profile-resources/index.html` - Main HTML interface with demo UI\n- `public/profile-resources/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/profile-resources/styles.css` - Responsive CSS with accessibility support\n\n## Profile Resources Menu Configuration\n\n```typescript\nprofileResourcesMenu: {\n  fileName: 'index.html',\n  uiPath: '/profile-resources'  // Points to public/profile-resources directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        crowdinModule.Scope.PROJECTS,        // Project management\n        // Add other scopes as needed\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get user context\n    AP.getContext(function(context) {\n        userContext = context;\n        // context.user_id, context.organization_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadUserPreferences();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing User Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // User context is automatically available\n    console.log('Current user ID:', userId);\n    console.log('Organization ID:', organizationId);\n    \n    // Access user data from metadata storage\n    // IMPORTANT: Include organizationId in key to isolate data per org\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    const preferences = await crowdinApp.getMetadata(metadataKey);\n    \n    res.json({ success: true, preferences: preferences });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access user data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const userId = connection.context.jwtPayload.context.user_id;\n        \n        // Your logic here using connection.client API or user storage\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### User Preferences with Storage Example\n```typescript\n// GET - Load user preferences from metadata storage\napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Load from metadata storage with organization-scoped key\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    const storedPreferences = await crowdinApp.getMetadata(metadataKey);\n    \n    // Default preferences if none stored\n    const preferences = storedPreferences || {\n        theme: 'auto',\n        language: 'en',\n        notifications: true,\n        emailDigest: 'weekly'\n    };\n    \n    res.json({\n      success: true,\n      preferences: preferences,\n      fromStorage: !!storedPreferences\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch user preferences' });\n  }\n});\n\n// POST - Save user preferences to metadata storage\napp.post('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const { preferences } = req.body;\n    \n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Save to metadata storage with organization-scoped key\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    await crowdinApp.saveMetadata(metadataKey, preferences, String(organizationId));\n    \n    res.json({\n      success: true,\n      message: 'Preferences saved successfully'\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to save user preferences' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-profile-menu`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/profile-resources/index.html` - Modify UI structure\n- `public/profile-resources/app.js` - Add frontend logic  \n- `public/profile-resources/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.usersApi.getAuthenticatedUser()\n// Example: connection.client.projectsGroupsApi.withFetchAll().listProjects()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Storage API (Metadata)\n\nProfile Resources Menu apps can store user-specific data using the Crowdin Apps SDK Storage API:\n\n### Save User Preferences\n```typescript\n// Save metadata for a specific user in organization\n// Key format includes organizationId to isolate data per organization\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nconst preferences = {\n    theme: 'dark',\n    language: 'en',\n    notifications: true\n};\n\nawait crowdinApp.saveMetadata(\n    metadataKey,              // Unique key for this data\n    preferences,              // Data to store (any serializable object)\n    String(organizationId)    // Organization ID from context\n);\n```\n\n### Load User Preferences\n```typescript\n// Retrieve metadata\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nconst storedPreferences = await crowdinApp.getMetadata(metadataKey);\n\n// Returns null if no data stored\nconst preferences = storedPreferences || defaultPreferences;\n```\n\n### Delete User Preferences\n```typescript\n// Remove metadata\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nawait crowdinApp.deleteMetadata(metadataKey);\n```\n\n### Storage Best Practices\n- **Key Format**: Always include organizationId and userId: `org_${organizationId}_user_${userId}_preferences`\n- **Isolation**: This ensures data is isolated per organization (same user can have different prefs in different orgs)\n- **Descriptive Keys**: Use clear naming: `_preferences`, `_settings`, `_cache`\n- Store only necessary data to minimize storage usage\n- Include timestamps for tracking when data was last updated\n- Handle cases when data doesn't exist (returns `null`)\n- Use organization ID for the third parameter in `saveMetadata()`\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  },
  {
    "name": "crowdin-project-tools",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Project Tools module.\n\nUse when:\n- Building project-specific tools and utilities\n- Creating project management extensions\n- Developing project analysis and reporting tools\n- Building project-level integrations with external APIs\n- Creating custom project workflows and automation\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Project Tools module for project-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic project context\n- Module: Project Tools (appears in project menu)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with project context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the projectTools configuration structure\n- **Scopes**: Ensure your app has appropriate project-level API scopes\n- **Project Context**: Apps automatically receive project context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Project Tools configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/tools/index.html` - Main HTML interface with demo UI\n- `public/tools/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/tools/styles.css` - Responsive CSS with accessibility support\n\n## Project Tools Configuration\n\n```typescript\nprojectTools: {\n  fileName: 'index.html',\n  uiPath: '/tools'  // Points to public/tools directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        crowdinModule.Scope.PROJECTS,        // Project management\n        crowdinModule.Scope.TRANSLATIONS,    // Translation data  \n        crowdinModule.Scope.FILES,           // File management\n        crowdinModule.Scope.REPORTS,         // Reporting data\n        // Add other scopes as needed\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get project context\n    AP.getContext(function(context) {\n        projectContext = context;\n        // context.project_id, context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectLanguages();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Project Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/project-languages', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Project context is automatically available\n    console.log('Current project ID:', projectId);\n    \n    // Access project data via API client\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    res.json({ success: true, project: projectResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access project data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const projectId = connection.context.jwtPayload.context.project_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Project Information Example\n```typescript\napp.get('/api/project-overview', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Get comprehensive project information (example)\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    const targetLanguageIds = projectResponse.data.targetLanguageIds || [];\n    \n    // Get supported languages and filter by project\n    const supportedLanguages = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n    const projectLanguages = supportedLanguages.data.filter(\n      lang => targetLanguageIds.includes(lang.data.id)\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        project: projectResponse.data,\n        languages: projectLanguages\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project overview' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-project-tools`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/tools/index.html` - Modify UI structure\n- `public/tools/app.js` - Add frontend logic  \n- `public/tools/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.getProject(projectId)\n// Example: connection.client.languagesApi.withFetchAll().listSupportedLanguages()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  }
]