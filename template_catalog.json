[
  {
    "name": "crowdin-editor-right-panel",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Editor Right Panel module.\n\nUse when:\n- Building translation assistance tools and helpers\n- Creating context-aware editor extensions\n- Developing quality assurance and validation tools\n- Building translation suggestion and auto-completion tools\n- Creating custom translation workflows\n- Adding glossary, terminology, or reference tools\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building project management tools (use Project Tools instead)\n\nBuilt with:\n- Crowdin Apps JS API (AP.editor for translation interactions)\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js (minimal backend - mostly frontend-focused)\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Editor Right Panel module for translation editor extensions.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK (minimal - mostly frontend)\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Editor API\n- Authentication: JWT tokens from Crowdin with automatic editor context\n- Module: Editor Right Panel (appears in translation editor sidebar)\n- Features: Compact design for sidebar, Editor API integration, event listeners\n\n## Tech Stack\n- **Crowdin Editor API** (AP.editor object) for translation manipulation\n- **Crowdin Apps JS API** (AP object) for context and events\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server (minimal - optional API endpoints)\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Compact CSS** - Optimized for narrow sidebar panel (300-400px)\n\n## Development Restrictions\n- **Panel Width**: Design for 300-400px width (sidebar constraint)\n- **Frontend-Focused**: Most functionality should be in frontend using AP.editor\n- **Module Configuration**: Don't modify the editorRightPanel configuration structure\n- **Editor Modes**: Panel appears only in specified editor modes (comfortable, side-by-side, multilingual, review, assets)\n- **Event Handling**: Listen to editor events for real-time updates\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Editor Right Panel configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/editor-panels/index.html` - Main HTML interface with demo UI\n- `public/editor-panels/app.js` - JavaScript with Crowdin Editor API integration\n- `public/editor-panels/styles.css` - Compact CSS optimized for sidebar\n\n## Editor Right Panel Configuration\n\n```typescript\neditorRightPanel: {\n  fileName: 'index.html',\n  uiPath: '/editor-panels',\n  modes: [EditorMode.COMFORTABLE],  // Specify editor modes where panel appears\n  supportsMultipleStrings: true      // Handle multiple string selection\n}\n```\n\n### Editor Modes\n```typescript\nimport { EditorMode } from '@crowdin/app-project-module/out/types';\n\nmodes: [\n  EditorMode.COMFORTABLE,   // Comfortable mode (most common)\n  EditorMode.SIDE_BY_SIDE,  // Side-by-side mode (most common)\n  EditorMode.MULTILINGUAL,  // Multilingual mode\n  EditorMode.REVIEW,        // Review mode\n  EditorMode.ASSETS         // Assets mode\n]\n```\n\n**Recommended configuration:**\n```typescript\nmodes: [EditorMode.COMFORTABLE, EditorMode.SIDE_BY_SIDE]  // Most common modes\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n#### Available Scopes:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Editor API)\n\n### Initialize and Get String\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get current string information\n    AP.editor.getString(function(string) {\n        console.log('String ID:', string.id);\n        console.log('Text:', string.text);\n        console.log('Context:', string.context);\n        console.log('File:', string.file.name);\n    });\n    \n    // Listen to string changes\n    AP.events.on('string.change', function(data) {\n        // Update panel when user selects a different string\n        loadCurrentString();\n    });\n}\n```\n\n### Editor API Methods\n\n#### Get Information\n```javascript\n// Get current source string\nAP.editor.getString(function(string) {\n    // string.id, string.text, string.context, string.file\n    const sourceText = string.text;\n});\n\n// Get top translation for current string\nAP.editor.getTopTranslation(function(translation) {\n    // translation.id, translation.text, translation.author\n    const translationText = translation.text;\n});\n\n// Get all translations for current string\nAP.editor.getTranslations(function(translations) {\n    // Array of translation objects\n});\n```\n\n#### Modify Translation\n```javascript\n// Append text to end of translation\nAP.editor.appendTranslation(' additional text');\n\n// Replace entire translation\nAP.editor.setTranslation('new translation');\n\n// Clear translation\nAP.editor.clearTranslation();\n```\n\n#### Editor Messages\n```javascript\n// Show success message\nAP.editor.successMessage('Translation saved!');\n\n// Show error message\nAP.editor.errorMessage('Something went wrong');\n\n// Show notice message\nAP.editor.noticeMessage('Please review this translation');\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n// Plus editor-specific context with mode, theme, file, workflow_step\n```\n\n## Backend Integration (Optional)\n\nEditor Right Panel apps are primarily frontend-focused. Add backend endpoints only when needed (e.g., external API integration, suggestions).\n\n### Optional Backend Endpoint\n```typescript\n// Backend - worker/app.ts (only if needed)\napp.get('/api/suggestions', async (req: Request, res: Response) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const sourceText = req.query.text as string;\n    \n    // Example: Fetch suggestions from external service\n    const suggestions = await fetchExternalSuggestions(sourceText);\n    \n    res.json({ success: true, suggestions });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch suggestions' });\n  }\n});\n```\n\n## Common Editor Patterns\n\n### Text Insertion Tool\n```javascript\nfunction insertSpecialCharacter(char) {\n    if (window.AP && window.AP.editor) {\n        AP.editor.appendTranslation(char);\n        AP.editor.successMessage(`Appended: ${char}`);\n    }\n}\n```\n\n### Translation Helper\n```javascript\nfunction applyTemplate(template) {\n    if (window.AP && window.AP.editor) {\n        AP.editor.getString(function(string) {\n            const sourceText = string.text;\n            const filledTemplate = template.replace('{source}', sourceText);\n            AP.editor.setTranslation(filledTemplate);\n        });\n    }\n}\n```\n\n### Quality Check\n```javascript\nfunction checkTranslation() {\n    if (window.AP && window.AP.editor) {\n        AP.editor.getString(function(string) {\n            AP.editor.getTopTranslation(function(translation) {\n                // Your validation logic\n                if (translation && translation.text.length > string.text.length * 2) {\n                    AP.editor.errorMessage('Translation might be too long');\n                }\n            });\n        });\n    }\n}\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-editor-tool`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add backend endpoints only if needed\n- `public/editor-panels/index.html` - Modify compact UI\n- `public/editor-panels/app.js` - Add editor interaction logic  \n- `public/editor-panels/styles.css` - Customize compact styles\n\n### 3. Design Considerations\n- **Panel Width**: Design for 300-400px width (sidebar)\n- **Compact UI**: Keep interface minimal and focused\n- **Quick Actions**: Buttons should trigger immediate actions\n- **Event Driven**: Listen to string.change and other editor events\n- **Performance**: Keep UI lightweight and responsive\n\n## Editor Events\n\n### Available Events\n```javascript\n// String changed (user selected a different string)\nAP.events.on('string.change', function(data) {\n    // Update panel for new string\n    loadCurrentString();\n});\n\n// Translation added\nAP.events.on('translation.added', function(data) {\n    // React to new translation\n});\n\n// Translation approved\nAP.events.on('translation.approve', function(data) {\n    // React to approval\n});\n\n// Translation text edited\nAP.events.on('textarea.edited', function(data) {\n    // React to translation edits\n});\n```\n\n## Common Use Cases\n- Special character insertion tools\n- Translation templates and snippets\n- Glossary and terminology lookups\n- Quality assurance checks\n- External API integrations (dictionaries, MT services)\n- Context and reference displays\n\n## Best Practices\n- Keep UI compact and focused on editor panel width\n- Use Editor API for all translation interactions\n- Listen to events for real-time updates\n- Handle cases when Editor API is not available\n- Minimize backend usage - keep logic in frontend\n- Test with different string types and languages"
    }
  },
  {
    "name": "crowdin-organization-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Organization Menu module.\n\nUse when:\n- Building organization-wide tools and utilities\n- Creating organization management extensions\n- Developing organization-level analytics and reporting tools\n- Building organization-wide integrations with external APIs\n- Creating custom workflows for groups and projects management\n- Managing organization members and permissions\n\nAvoid when:\n- Building project-specific tools (use Project Tools instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Organization Menu module for organization-wide functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic organization context\n- Module: Organization Menu (appears in organization navigation)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with organization context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the organizationMenu configuration structure\n- **Scopes**: Ensure your app has appropriate organization-level API scopes\n- **Organization Context**: Apps automatically receive organization context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Organization Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/organization-menu/index.html` - Main HTML interface with demo UI\n- `public/organization-menu/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/organization-menu/styles.css` - Responsive CSS with accessibility support\n\n## Organization Menu Configuration\n\n```typescript\norganizationMenu: {\n  fileName: 'index.html',\n  uiPath: '/organization-menu'  // Points to public/organization-menu directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n#### Available Scopes:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get organization context\n    AP.getContext(function(context) {\n        orgContext = context;\n        // context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectsByGroups();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Organization Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Organization context is automatically available\n    console.log('Current organization ID:', organizationId);\n    \n    // Access organization data via API client\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    res.json({ success: true, groups: groupsResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access organization data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const organizationId = connection.context.jwtPayload.context.organization_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Organization Groups and Projects Example\n```typescript\napp.get('/api/projects-by-groups', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    \n    // Get all groups\n    const groupsResponse = await connection.client.projectsGroupsApi.withFetchAll().listGroups();\n    const groups = groupsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        description: item.data.description || '',\n        projects: []\n    }));\n    \n    // Get all projects\n    const projectsResponse = await connection.client.projectsGroupsApi.withFetchAll().listProjects();\n    const allProjects = projectsResponse.data.map((item: any) => ({\n        id: item.data.id,\n        name: item.data.name,\n        groupId: item.data.groupId\n    }));\n    \n    // Organize projects by groups\n    // ... your organization logic ...\n    \n    res.json({\n      success: true,\n      data: { groups, ungroupedProjects }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch projects by groups' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-organization-menu`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/organization-menu/index.html` - Modify UI structure\n- `public/organization-menu/app.js` - Add frontend logic  \n- `public/organization-menu/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.listGroups()\n// Example: connection.client.projectsGroupsApi.withFetchAll().listProjects()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  },
  {
    "name": "crowdin-profile-resources-menu",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Profile Resources Menu module.\n\nUse when:\n- Building user-specific tools and preferences\n- Creating personal dashboards and settings\n- Developing user profile extensions\n- Building user-level integrations and configurations\n- Managing user preferences and settings\n- Creating personal analytics and statistics tools\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating project-specific tools (use Project Tools instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- Cloudflare Workers\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Profile Resources Menu module for user-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic user context\n- Module: Profile Resources Menu (appears in user profile menu)\n- Storage: Built-in metadata storage for user preferences (saveMetadata, getMetadata, deleteMetadata)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with user context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the profileResourcesMenu configuration structure\n- **Scopes**: Ensure your app has appropriate user-level API scopes\n- **User Context**: Apps automatically receive user context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Profile Resources Menu configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/profile-resources/index.html` - Main HTML interface with demo UI\n- `public/profile-resources/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/profile-resources/styles.css` - Responsive CSS with accessibility support\n\n## Profile Resources Menu Configuration\n\n```typescript\nprofileResourcesMenu: {\n  fileName: 'index.html',\n  uiPath: '/profile-resources'  // Points to public/profile-resources directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n#### Available Scopes:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get user context\n    AP.getContext(function(context) {\n        userContext = context;\n        // context.user_id, context.organization_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadUserPreferences();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing User Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // User context is automatically available\n    console.log('Current user ID:', userId);\n    console.log('Organization ID:', organizationId);\n    \n    // Access user data from metadata storage\n    // IMPORTANT: Include organizationId in key to isolate data per org\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    const preferences = await crowdinApp.getMetadata(metadataKey);\n    \n    res.json({ success: true, preferences: preferences });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access user data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const userId = connection.context.jwtPayload.context.user_id;\n        \n        // Your logic here using connection.client API or user storage\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### User Preferences with Storage Example\n```typescript\n// GET - Load user preferences from metadata storage\napp.get('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Load from metadata storage with organization-scoped key\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    const storedPreferences = await crowdinApp.getMetadata(metadataKey);\n    \n    // Default preferences if none stored\n    const preferences = storedPreferences || {\n        theme: 'auto',\n        language: 'en',\n        notifications: true,\n        emailDigest: 'weekly'\n    };\n    \n    res.json({\n      success: true,\n      preferences: preferences,\n      fromStorage: !!storedPreferences\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch user preferences' });\n  }\n});\n\n// POST - Save user preferences to metadata storage\napp.post('/api/user-preferences', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const { preferences } = req.body;\n    \n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const userId = connection.context.jwtPayload.context.user_id;\n    const organizationId = connection.context.jwtPayload.context.organization_id;\n    \n    // Save to metadata storage with organization-scoped key\n    const metadataKey = `org_${organizationId}_user_${userId}_preferences`;\n    await crowdinApp.saveMetadata(metadataKey, preferences, String(organizationId));\n    \n    res.json({\n      success: true,\n      message: 'Preferences saved successfully'\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to save user preferences' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-profile-menu`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/profile-resources/index.html` - Modify UI structure\n- `public/profile-resources/app.js` - Add frontend logic  \n- `public/profile-resources/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.usersApi.getAuthenticatedUser()\n// Example: connection.client.projectsGroupsApi.withFetchAll().listProjects()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Storage API (Metadata)\n\nProfile Resources Menu apps can store user-specific data using the Crowdin Apps SDK Storage API:\n\n### Save User Preferences\n```typescript\n// Save metadata for a specific user in organization\n// Key format includes organizationId to isolate data per organization\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nconst preferences = {\n    theme: 'dark',\n    language: 'en',\n    notifications: true\n};\n\nawait crowdinApp.saveMetadata(\n    metadataKey,              // Unique key for this data\n    preferences,              // Data to store (any serializable object)\n    String(organizationId)    // Organization ID from context\n);\n```\n\n### Load User Preferences\n```typescript\n// Retrieve metadata\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nconst storedPreferences = await crowdinApp.getMetadata(metadataKey);\n\n// Returns null if no data stored\nconst preferences = storedPreferences || defaultPreferences;\n```\n\n### Delete User Preferences\n```typescript\n// Remove metadata\nconst metadataKey = `org_${organizationId}_user_${userId}_preferences`;\nawait crowdinApp.deleteMetadata(metadataKey);\n```\n\n### Storage Best Practices\n- **Key Format**: Always include organizationId and userId: `org_${organizationId}_user_${userId}_preferences`\n- **Isolation**: This ensures data is isolated per organization (same user can have different prefs in different orgs)\n- **Descriptive Keys**: Use clear naming: `_preferences`, `_settings`, `_cache`\n- Store only necessary data to minimize storage usage\n- Include timestamps for tracking when data was last updated\n- Handle cases when data doesn't exist (returns `null`)\n- Use organization ID for the third parameter in `saveMetadata()`\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  },
  {
    "name": "crowdin-project-tools",
    "language": "typescript",
    "frameworks": [
      "concurrently",
      "express",
      "nodemon",
      "typescript",
      "wrangler"
    ],
    "description": {
      "selection": "# Template Selection\n\nCrowdin app with Project Tools module.\n\nUse when:\n- Building project-specific tools and utilities\n- Creating project management extensions\n- Developing project analysis and reporting tools\n- Building project-level integrations with external APIs\n- Creating custom project workflows and automation\n\nAvoid when:\n- Building organization-wide tools (use Organization Menu instead)\n- Creating user profile tools (use Profile Resources Menu instead)\n- Building editor extensions (use Editor Right Panel instead)\n\nBuilt with:\n- Crowdin Apps JS API\n- Crowdin Apps SDK (@crowdin/app-project-module)\n- TypeScript\n- Express.js\n- HTML/CSS/JavaScript (modular structure)",
      "usage": "# Usage\n\n## Overview\nCrowdin app with Project Tools module for project-specific functionality.\n- Backend: TypeScript with Express.js and Crowdin Apps SDK\n- Frontend: Modular HTML/CSS/JavaScript with Crowdin Apps JS API\n- Authentication: JWT tokens from Crowdin with automatic project context\n- Module: Project Tools (appears in project menu)\n- Features: Responsive design, error handling, empty states, accessibility\n\n## Tech Stack\n- **Crowdin Apps JS API** (AP object) for frontend integration\n- **Crowdin Apps SDK** (@crowdin/app-project-module) for backend\n- **TypeScript** for type-safe backend development\n- **Express.js** for server and API endpoints\n- **JWT** for secure authentication with project context\n- **Modular Frontend** - Separate HTML, CSS (styles.css), JS (app.js) files\n- **Responsive CSS** - Mobile-first design (320px+)\n- **Accessibility** - WCAG 2.1, ARIA labels\n\n## Development Restrictions\n- **Authentication**: Always use JWT tokens from Crowdin for API requests\n- **Module Configuration**: Don't modify the projectTools configuration structure\n- **Scopes**: Ensure your app has appropriate project-level API scopes\n- **Project Context**: Apps automatically receive project context from JWT\n\n## Project Structure\n\n### Backend Structure\n- `worker/app.ts` - TypeScript backend with Project Tools configuration\n- `worker/index.ts` - Entry point for Cloudflare Worker\n- `public/` - Static files served to the browser\n\n### Frontend Structure\n- `public/tools/index.html` - Main HTML interface with demo UI\n- `public/tools/app.js` - JavaScript with Crowdin Apps JS API integration\n- `public/tools/styles.css` - Responsive CSS with accessibility support\n\n## Project Tools Configuration\n\n```typescript\nprojectTools: {\n  fileName: 'index.html',\n  uiPath: '/tools'  // Points to public/tools directory\n}\n```\n\n### Required Scopes\nAdd scopes to configuration in `worker/app.ts` based on your app's functionality.\n\n**⚠️ IMPORTANT**: Only use scopes from the list below. Do not invent or use non-existent scopes!\n\n#### Available Scopes:\n```typescript\nconst configuration = {\n    // ... other configuration ...\n    scopes: [\n        // Choose from the following valid scopes:\n        \n        // General scopes\n        crowdinModule.Scope.ALL_SCOPES,                  // 'all' - Full access (use with caution)\n        crowdinModule.Scope.NOTIFICATIONS,               // 'notification' - Notifications management\n        \n        // Project-level scopes\n        crowdinModule.Scope.PROJECTS,                    // 'project' - Project management\n        crowdinModule.Scope.TASKS,                       // 'project.task' - Project tasks\n        crowdinModule.Scope.REPORTS,                     // 'project.report' - Project reports\n        crowdinModule.Scope.TRANSLATION_STATUS,          // 'project.status' - Translation status\n        crowdinModule.Scope.SOURCE_FILES_AND_STRINGS,    // 'project.source' - Source files and strings\n        crowdinModule.Scope.WEBHOOKS,                    // 'project.webhook' - Project webhooks\n        crowdinModule.Scope.TRANSLATIONS,                // 'project.translation' - Translations\n        crowdinModule.Scope.SCREENSHOTS,                 // 'project.screenshot' - Screenshots\n        \n        // Organization-level scopes\n        crowdinModule.Scope.USERS,                       // 'user' - User management\n        crowdinModule.Scope.TEAMS,                       // 'team' - Team management\n        crowdinModule.Scope.GROUPS,                      // 'group' - Group management\n        crowdinModule.Scope.ORGANIZATION_WEBHOOKS,       // 'webhook' - Organization webhooks\n        crowdinModule.Scope.VENDORS,                     // 'vendor' - Vendor management\n        crowdinModule.Scope.FIELDS,                      // 'field' - Custom fields\n        crowdinModule.Scope.SECURITY_LOGS,               // 'security-log' - Security logs\n        crowdinModule.Scope.APPLICATIONS,                // 'application' - Applications management\n        \n        // Resources\n        crowdinModule.Scope.TRANSLATION_MEMORIES,        // 'tm' - Translation memories\n        crowdinModule.Scope.MACHINE_TRANSLATION_ENGINES, // 'mt' - Machine translation engines\n        crowdinModule.Scope.GLOSSARIES,                  // 'glossary' - Glossaries\n        \n        // AI-related scopes\n        crowdinModule.Scope.AI,                          // 'ai' - AI features\n        crowdinModule.Scope.AI_PROVIDERS,                // 'ai.provider' - AI providers\n        crowdinModule.Scope.AI_PROMPTS,                  // 'ai.prompt' - AI prompts\n        crowdinModule.Scope.AI_PROXIES,                  // 'ai.proxy' - AI proxies\n    ]\n}\n```\n\n## Frontend Integration (Crowdin Apps JS API)\n\n### Initialize and Get Context\n```javascript\n// Frontend - app.js\nfunction initializeApp() {\n    // Get project context\n    AP.getContext(function(context) {\n        projectContext = context;\n        // context.project_id, context.organization_id, context.user_id\n    });\n    \n    // Get JWT token for API calls\n    AP.getJwtToken(function(token) {\n        jwtToken = token;\n        loadProjectLanguages();  // Make API calls with token\n    });\n}\n```\n\n## Backend Integration\n\n### Accessing Project Context\n```typescript\n// Backend - worker/app.ts  \napp.get('/api/project-languages', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Project context is automatically available\n    console.log('Current project ID:', projectId);\n    \n    // Access project data via API client\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    res.json({ success: true, project: projectResponse.data });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to access project data' });\n  }\n});\n```\n\n### Available Context Information\n```typescript\ncontext.project_id             // Current project ID (number)\ncontext.user_id                // Current user ID (number)\ncontext.organization_id        // Organization ID (number)\ncontext.organization_domain    // Organization domain (string | null)\ncontext.invite_restrict_enabled // Invite restrictions flag (boolean)\ncontext.user_login             // User login/username (string)\ncontext.project_identifier     // Project identifier (string)\n```\n\n## API Patterns\n\n### Standard Endpoint Template\n```typescript\napp.get('/api/your-endpoint', async (req: Request, res: Response) => {\n    try {\n        const jwt = req.query.jwt as string;\n        if (!jwt) {\n            return res.status(400).json({ success: false, error: 'JWT token is required' });\n        }\n        \n        const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n        const projectId = connection.context.jwtPayload.context.project_id;\n        \n        // Your logic here using connection.client API\n        \n        res.status(200).json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ success: false, error: 'Operation failed' });\n    }\n});\n```\n\n### Project Information Example\n```typescript\napp.get('/api/project-overview', async (req, res) => {\n  try {\n    const jwt = req.query.jwt as string;\n    const connection = await crowdinApp.establishCrowdinConnection(jwt, undefined);\n    const projectId = connection.context.jwtPayload.context.project_id;\n    \n    // Get comprehensive project information (example)\n    const projectResponse = await connection.client.projectsGroupsApi.getProject(projectId);\n    const targetLanguageIds = projectResponse.data.targetLanguageIds || [];\n    \n    // Get supported languages and filter by project\n    const supportedLanguages = await connection.client.languagesApi.withFetchAll().listSupportedLanguages();\n    const projectLanguages = supportedLanguages.data.filter(\n      lang => targetLanguageIds.includes(lang.data.id)\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        project: projectResponse.data,\n        languages: projectLanguages\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project overview' });\n  }\n});\n```\n\n### Adding New Endpoints to app.ts\nAdd new endpoints after the existing ones, before the return statement:\n```typescript\n// Add this AFTER existing endpoints in createApp function\napp.post('/api/your-new-endpoint', async (req: Request, res: Response) => {\n    // Your implementation following the standard template\n});\n\n// IMPORTANT: Add endpoints BEFORE this return statement:\nreturn { expressApp: app, crowdinApp };\n```\n\n## Development Workflow\n\n### 1. Configure Your App Identity\n**⚠️ Important**: You MUST update the configuration in `worker/app.ts` before deployment:\n```typescript\nconst configuration = {\n    name: \"Your App Name\",           // Change this to your app's display name\n    identifier: \"your-app-id\",       // Change to unique identifier (lowercase, hyphens)\n    description: \"Your app description\", // Change to describe your app's purpose\n    // ... rest of configuration\n}\n```\n\n**Note**: The `identifier` must be unique across all Crowdin apps. Use format like: `company-project-tools`\n\n### 2. Key Files to Modify\n- `worker/app.ts` - Add new API endpoints here\n- `public/tools/index.html` - Modify UI structure\n- `public/tools/app.js` - Add frontend logic  \n- `public/tools/styles.css` - Customize styles\n\n## Crowdin API Access\n\nUse `connection.client` to access Crowdin API methods:\n```typescript\n// Access any Crowdin API endpoint via connection.client\n// Example: connection.client.projectsGroupsApi.getProject(projectId)\n// Example: connection.client.languagesApi.withFetchAll().listSupportedLanguages()\n// Use withFetchAll() for paginated results to get all data\n```\n\n## Frontend Patterns\n\n### Making API Calls from Frontend\n```javascript\nasync function callBackendAPI(endpoint, method = 'GET', body = null) {\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' }\n    };\n    \n    if (body) options.body = JSON.stringify(body);\n    \n    const response = await fetch(`${endpoint}?jwt=${jwtToken}`, options);\n    return response.json();\n}\n```\n\n### Updating UI with Results\n```javascript\nfunction updateUI(elementId, content) {\n    const element = document.getElementById(elementId);\n    element.innerHTML = content;\n    element.className = ''; // Remove loading class\n}\n```"
    }
  }
]